name: Auto Release

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type'
        required: true
        type: choice
        options:
          - patch  # 0.0.X
          - minor  # 0.X.0
          - major  # X.0.0
        default: patch

permissions:
  contents: write

jobs:
  auto-release:
    name: Automatic Version Bump and Release
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Dart
        uses: dart-lang/setup-dart@v1
        with:
          sdk: stable

      - name: Configure git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Get current version
        id: current_version
        run: |
          CURRENT_VERSION=$(grep '^version:' pubspec.yaml | sed 's/version: //')
          echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $CURRENT_VERSION"

      - name: Calculate new version
        id: new_version
        run: |
          CURRENT="${{ steps.current_version.outputs.version }}"
          VERSION_TYPE="${{ github.event.inputs.version_type }}"

          IFS='.' read -r major minor patch <<< "$CURRENT"

          case $VERSION_TYPE in
            major)
              major=$((major + 1))
              minor=0
              patch=0
              ;;
            minor)
              minor=$((minor + 1))
              patch=0
              ;;
            patch)
              patch=$((patch + 1))
              ;;
          esac

          NEW_VERSION="${major}.${minor}.${patch}"
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "New version: $NEW_VERSION"

      - name: Update version in pubspec.yaml
        run: |
          NEW_VERSION="${{ steps.new_version.outputs.version }}"
          sed -i "s/^version: .*/version: $NEW_VERSION/" pubspec.yaml
          git diff pubspec.yaml

      - name: Update CHANGELOG.md
        run: |
          NEW_VERSION="${{ steps.new_version.outputs.version }}"
          TODAY=$(date +%Y-%m-%d)

          # Create temporary file with new entry
          cat > /tmp/changelog_entry.md << EOF
          ## [$NEW_VERSION] - $TODAY

          ### Changed
          - Version bump to $NEW_VERSION

          EOF

          # Insert new entry after "# Changelog" line
          sed -i "/^# Changelog$/r /tmp/changelog_entry.md" CHANGELOG.md

          echo "Updated CHANGELOG.md:"
          head -20 CHANGELOG.md

      - name: Install dependencies
        run: dart pub get

      - name: Run build_runner
        run: dart run build_runner build --delete-conflicting-outputs

      - name: Run tests
        run: dart test --reporter expanded

      - name: Verify package
        run: dart pub publish --dry-run

      - name: Commit changes
        run: |
          NEW_VERSION="${{ steps.new_version.outputs.version }}"
          git add pubspec.yaml CHANGELOG.md
          git commit -m "chore: bump version to $NEW_VERSION

          Automated version bump via GitHub Actions.

          ðŸ¤– Generated with [Claude Code](https://claude.com/claude-code)

          Co-Authored-By: github-actions[bot] <github-actions[bot]@users.noreply.github.com>"

      - name: Create and push tag
        run: |
          NEW_VERSION="${{ steps.new_version.outputs.version }}"
          git tag "v$NEW_VERSION"
          git push origin main
          git push origin "v$NEW_VERSION"

      - name: Generate release notes
        id: release_notes
        run: |
          NEW_VERSION="${{ steps.new_version.outputs.version }}"
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")

          cat > release_notes.md << EOF
          ## What's Changed

          EOF

          if [ -n "$PREV_TAG" ]; then
            echo "### Commits since $PREV_TAG" >> release_notes.md
            echo "" >> release_notes.md
            git log ${PREV_TAG}..HEAD --pretty=format:"- %s" >> release_notes.md
            echo "" >> release_notes.md
            echo "" >> release_notes.md
            echo "**Full Changelog**: https://github.com/${{ github.repository }}/compare/${PREV_TAG}...v${NEW_VERSION}" >> release_notes.md
          else
            echo "First release" >> release_notes.md
          fi

          echo "" >> release_notes.md
          echo "## Installation" >> release_notes.md
          echo "" >> release_notes.md
          echo "\`\`\`yaml" >> release_notes.md
          echo "dependencies:" >> release_notes.md
          echo "  notion_dart_kit: ^$NEW_VERSION" >> release_notes.md
          echo "\`\`\`" >> release_notes.md

          cat release_notes.md

      - name: Create GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          NEW_VERSION="${{ steps.new_version.outputs.version }}"
          gh release create "v$NEW_VERSION" \
            --title "v$NEW_VERSION" \
            --notes-file release_notes.md

      - name: Publish to pub.dev
        run: dart pub publish --force
        env:
          PUB_CREDENTIALS: ${{ secrets.PUB_CREDENTIALS }}
