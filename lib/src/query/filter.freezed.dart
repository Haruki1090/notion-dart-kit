// coverage:ignore-file
// GENERATED CODE - DO NOT MODIFY BY HAND
// ignore_for_file: type=lint
// ignore_for_file: unused_element, deprecated_member_use, deprecated_member_use_from_same_package, use_function_type_syntax_for_parameters, unnecessary_const, avoid_init_to_null, invalid_override_different_default_values_named, prefer_expression_function_bodies, annotate_overrides, invalid_annotation_target, unnecessary_question_mark

part of 'filter.dart';

// **************************************************************************
// FreezedGenerator
// **************************************************************************

T _$identity<T>(T value) => value;

final _privateConstructorUsedError = UnsupportedError(
    'It seems like you constructed your class using `MyClass._()`. This constructor is only meant to be used by freezed and you are not supposed to need it nor use it.\nPlease check the documentation here for more information: https://github.com/rrousselGit/freezed#adding-getters-and-methods-to-our-models');

/// @nodoc
mixin _$Filter {
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function(List<Filter> filters) and,
    required TResult Function(List<Filter> filters) or,
    required TResult Function(String name, PropertyFilter filter) property,
  }) =>
      throw _privateConstructorUsedError;
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function(List<Filter> filters)? and,
    TResult? Function(List<Filter> filters)? or,
    TResult? Function(String name, PropertyFilter filter)? property,
  }) =>
      throw _privateConstructorUsedError;
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function(List<Filter> filters)? and,
    TResult Function(List<Filter> filters)? or,
    TResult Function(String name, PropertyFilter filter)? property,
    required TResult orElse(),
  }) =>
      throw _privateConstructorUsedError;
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(AndFilter value) and,
    required TResult Function(OrFilter value) or,
    required TResult Function(PropertyFilterCondition value) property,
  }) =>
      throw _privateConstructorUsedError;
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(AndFilter value)? and,
    TResult? Function(OrFilter value)? or,
    TResult? Function(PropertyFilterCondition value)? property,
  }) =>
      throw _privateConstructorUsedError;
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(AndFilter value)? and,
    TResult Function(OrFilter value)? or,
    TResult Function(PropertyFilterCondition value)? property,
    required TResult orElse(),
  }) =>
      throw _privateConstructorUsedError;
}

/// @nodoc
abstract class $FilterCopyWith<$Res> {
  factory $FilterCopyWith(Filter value, $Res Function(Filter) then) =
      _$FilterCopyWithImpl<$Res, Filter>;
}

/// @nodoc
class _$FilterCopyWithImpl<$Res, $Val extends Filter>
    implements $FilterCopyWith<$Res> {
  _$FilterCopyWithImpl(this._value, this._then);

  // ignore: unused_field
  final $Val _value;
  // ignore: unused_field
  final $Res Function($Val) _then;

  /// Create a copy of Filter
  /// with the given fields replaced by the non-null parameter values.
}

/// @nodoc
abstract class _$$AndFilterImplCopyWith<$Res> {
  factory _$$AndFilterImplCopyWith(
          _$AndFilterImpl value, $Res Function(_$AndFilterImpl) then) =
      __$$AndFilterImplCopyWithImpl<$Res>;
  @useResult
  $Res call({List<Filter> filters});
}

/// @nodoc
class __$$AndFilterImplCopyWithImpl<$Res>
    extends _$FilterCopyWithImpl<$Res, _$AndFilterImpl>
    implements _$$AndFilterImplCopyWith<$Res> {
  __$$AndFilterImplCopyWithImpl(
      _$AndFilterImpl _value, $Res Function(_$AndFilterImpl) _then)
      : super(_value, _then);

  /// Create a copy of Filter
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? filters = null,
  }) {
    return _then(_$AndFilterImpl(
      null == filters
          ? _value._filters
          : filters // ignore: cast_nullable_to_non_nullable
              as List<Filter>,
    ));
  }
}

/// @nodoc

class _$AndFilterImpl extends AndFilter {
  const _$AndFilterImpl(final List<Filter> filters)
      : _filters = filters,
        super._();

  final List<Filter> _filters;
  @override
  List<Filter> get filters {
    if (_filters is EqualUnmodifiableListView) return _filters;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_filters);
  }

  @override
  String toString() {
    return 'Filter.and(filters: $filters)';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$AndFilterImpl &&
            const DeepCollectionEquality().equals(other._filters, _filters));
  }

  @override
  int get hashCode =>
      Object.hash(runtimeType, const DeepCollectionEquality().hash(_filters));

  /// Create a copy of Filter
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  @pragma('vm:prefer-inline')
  _$$AndFilterImplCopyWith<_$AndFilterImpl> get copyWith =>
      __$$AndFilterImplCopyWithImpl<_$AndFilterImpl>(this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function(List<Filter> filters) and,
    required TResult Function(List<Filter> filters) or,
    required TResult Function(String name, PropertyFilter filter) property,
  }) {
    return and(filters);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function(List<Filter> filters)? and,
    TResult? Function(List<Filter> filters)? or,
    TResult? Function(String name, PropertyFilter filter)? property,
  }) {
    return and?.call(filters);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function(List<Filter> filters)? and,
    TResult Function(List<Filter> filters)? or,
    TResult Function(String name, PropertyFilter filter)? property,
    required TResult orElse(),
  }) {
    if (and != null) {
      return and(filters);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(AndFilter value) and,
    required TResult Function(OrFilter value) or,
    required TResult Function(PropertyFilterCondition value) property,
  }) {
    return and(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(AndFilter value)? and,
    TResult? Function(OrFilter value)? or,
    TResult? Function(PropertyFilterCondition value)? property,
  }) {
    return and?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(AndFilter value)? and,
    TResult Function(OrFilter value)? or,
    TResult Function(PropertyFilterCondition value)? property,
    required TResult orElse(),
  }) {
    if (and != null) {
      return and(this);
    }
    return orElse();
  }
}

abstract class AndFilter extends Filter {
  const factory AndFilter(final List<Filter> filters) = _$AndFilterImpl;
  const AndFilter._() : super._();

  List<Filter> get filters;

  /// Create a copy of Filter
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  _$$AndFilterImplCopyWith<_$AndFilterImpl> get copyWith =>
      throw _privateConstructorUsedError;
}

/// @nodoc
abstract class _$$OrFilterImplCopyWith<$Res> {
  factory _$$OrFilterImplCopyWith(
          _$OrFilterImpl value, $Res Function(_$OrFilterImpl) then) =
      __$$OrFilterImplCopyWithImpl<$Res>;
  @useResult
  $Res call({List<Filter> filters});
}

/// @nodoc
class __$$OrFilterImplCopyWithImpl<$Res>
    extends _$FilterCopyWithImpl<$Res, _$OrFilterImpl>
    implements _$$OrFilterImplCopyWith<$Res> {
  __$$OrFilterImplCopyWithImpl(
      _$OrFilterImpl _value, $Res Function(_$OrFilterImpl) _then)
      : super(_value, _then);

  /// Create a copy of Filter
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? filters = null,
  }) {
    return _then(_$OrFilterImpl(
      null == filters
          ? _value._filters
          : filters // ignore: cast_nullable_to_non_nullable
              as List<Filter>,
    ));
  }
}

/// @nodoc

class _$OrFilterImpl extends OrFilter {
  const _$OrFilterImpl(final List<Filter> filters)
      : _filters = filters,
        super._();

  final List<Filter> _filters;
  @override
  List<Filter> get filters {
    if (_filters is EqualUnmodifiableListView) return _filters;
    // ignore: implicit_dynamic_type
    return EqualUnmodifiableListView(_filters);
  }

  @override
  String toString() {
    return 'Filter.or(filters: $filters)';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$OrFilterImpl &&
            const DeepCollectionEquality().equals(other._filters, _filters));
  }

  @override
  int get hashCode =>
      Object.hash(runtimeType, const DeepCollectionEquality().hash(_filters));

  /// Create a copy of Filter
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  @pragma('vm:prefer-inline')
  _$$OrFilterImplCopyWith<_$OrFilterImpl> get copyWith =>
      __$$OrFilterImplCopyWithImpl<_$OrFilterImpl>(this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function(List<Filter> filters) and,
    required TResult Function(List<Filter> filters) or,
    required TResult Function(String name, PropertyFilter filter) property,
  }) {
    return or(filters);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function(List<Filter> filters)? and,
    TResult? Function(List<Filter> filters)? or,
    TResult? Function(String name, PropertyFilter filter)? property,
  }) {
    return or?.call(filters);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function(List<Filter> filters)? and,
    TResult Function(List<Filter> filters)? or,
    TResult Function(String name, PropertyFilter filter)? property,
    required TResult orElse(),
  }) {
    if (or != null) {
      return or(filters);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(AndFilter value) and,
    required TResult Function(OrFilter value) or,
    required TResult Function(PropertyFilterCondition value) property,
  }) {
    return or(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(AndFilter value)? and,
    TResult? Function(OrFilter value)? or,
    TResult? Function(PropertyFilterCondition value)? property,
  }) {
    return or?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(AndFilter value)? and,
    TResult Function(OrFilter value)? or,
    TResult Function(PropertyFilterCondition value)? property,
    required TResult orElse(),
  }) {
    if (or != null) {
      return or(this);
    }
    return orElse();
  }
}

abstract class OrFilter extends Filter {
  const factory OrFilter(final List<Filter> filters) = _$OrFilterImpl;
  const OrFilter._() : super._();

  List<Filter> get filters;

  /// Create a copy of Filter
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  _$$OrFilterImplCopyWith<_$OrFilterImpl> get copyWith =>
      throw _privateConstructorUsedError;
}

/// @nodoc
abstract class _$$PropertyFilterConditionImplCopyWith<$Res> {
  factory _$$PropertyFilterConditionImplCopyWith(
          _$PropertyFilterConditionImpl value,
          $Res Function(_$PropertyFilterConditionImpl) then) =
      __$$PropertyFilterConditionImplCopyWithImpl<$Res>;
  @useResult
  $Res call({String name, PropertyFilter filter});

  $PropertyFilterCopyWith<$Res> get filter;
}

/// @nodoc
class __$$PropertyFilterConditionImplCopyWithImpl<$Res>
    extends _$FilterCopyWithImpl<$Res, _$PropertyFilterConditionImpl>
    implements _$$PropertyFilterConditionImplCopyWith<$Res> {
  __$$PropertyFilterConditionImplCopyWithImpl(
      _$PropertyFilterConditionImpl _value,
      $Res Function(_$PropertyFilterConditionImpl) _then)
      : super(_value, _then);

  /// Create a copy of Filter
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? name = null,
    Object? filter = null,
  }) {
    return _then(_$PropertyFilterConditionImpl(
      name: null == name
          ? _value.name
          : name // ignore: cast_nullable_to_non_nullable
              as String,
      filter: null == filter
          ? _value.filter
          : filter // ignore: cast_nullable_to_non_nullable
              as PropertyFilter,
    ));
  }

  /// Create a copy of Filter
  /// with the given fields replaced by the non-null parameter values.
  @override
  @pragma('vm:prefer-inline')
  $PropertyFilterCopyWith<$Res> get filter {
    return $PropertyFilterCopyWith<$Res>(_value.filter, (value) {
      return _then(_value.copyWith(filter: value));
    });
  }
}

/// @nodoc

class _$PropertyFilterConditionImpl extends PropertyFilterCondition {
  const _$PropertyFilterConditionImpl(
      {required this.name, required this.filter})
      : super._();

  @override
  final String name;
  @override
  final PropertyFilter filter;

  @override
  String toString() {
    return 'Filter.property(name: $name, filter: $filter)';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$PropertyFilterConditionImpl &&
            (identical(other.name, name) || other.name == name) &&
            (identical(other.filter, filter) || other.filter == filter));
  }

  @override
  int get hashCode => Object.hash(runtimeType, name, filter);

  /// Create a copy of Filter
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  @pragma('vm:prefer-inline')
  _$$PropertyFilterConditionImplCopyWith<_$PropertyFilterConditionImpl>
      get copyWith => __$$PropertyFilterConditionImplCopyWithImpl<
          _$PropertyFilterConditionImpl>(this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function(List<Filter> filters) and,
    required TResult Function(List<Filter> filters) or,
    required TResult Function(String name, PropertyFilter filter) property,
  }) {
    return property(name, filter);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function(List<Filter> filters)? and,
    TResult? Function(List<Filter> filters)? or,
    TResult? Function(String name, PropertyFilter filter)? property,
  }) {
    return property?.call(name, filter);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function(List<Filter> filters)? and,
    TResult Function(List<Filter> filters)? or,
    TResult Function(String name, PropertyFilter filter)? property,
    required TResult orElse(),
  }) {
    if (property != null) {
      return property(name, filter);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(AndFilter value) and,
    required TResult Function(OrFilter value) or,
    required TResult Function(PropertyFilterCondition value) property,
  }) {
    return property(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(AndFilter value)? and,
    TResult? Function(OrFilter value)? or,
    TResult? Function(PropertyFilterCondition value)? property,
  }) {
    return property?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(AndFilter value)? and,
    TResult Function(OrFilter value)? or,
    TResult Function(PropertyFilterCondition value)? property,
    required TResult orElse(),
  }) {
    if (property != null) {
      return property(this);
    }
    return orElse();
  }
}

abstract class PropertyFilterCondition extends Filter {
  const factory PropertyFilterCondition(
      {required final String name,
      required final PropertyFilter filter}) = _$PropertyFilterConditionImpl;
  const PropertyFilterCondition._() : super._();

  String get name;
  PropertyFilter get filter;

  /// Create a copy of Filter
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  _$$PropertyFilterConditionImplCopyWith<_$PropertyFilterConditionImpl>
      get copyWith => throw _privateConstructorUsedError;
}

/// @nodoc
mixin _$PropertyFilter {
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function(String value) textEquals,
    required TResult Function(String value) textDoesNotEqual,
    required TResult Function(String value) textContains,
    required TResult Function(String value) textDoesNotContain,
    required TResult Function(String value) textStartsWith,
    required TResult Function(String value) textEndsWith,
    required TResult Function() textIsEmpty,
    required TResult Function() textIsNotEmpty,
    required TResult Function(double value) numberEquals,
    required TResult Function(double value) numberDoesNotEqual,
    required TResult Function(double value) numberGreaterThan,
    required TResult Function(double value) numberLessThan,
    required TResult Function(double value) numberGreaterThanOrEqual,
    required TResult Function(double value) numberLessThanOrEqual,
    required TResult Function() numberIsEmpty,
    required TResult Function() numberIsNotEmpty,
    required TResult Function(bool value) checkboxEquals,
    required TResult Function(String value) selectEquals,
    required TResult Function(String value) selectDoesNotEqual,
    required TResult Function() selectIsEmpty,
    required TResult Function() selectIsNotEmpty,
    required TResult Function(String value) multiSelectContains,
    required TResult Function(String value) multiSelectDoesNotContain,
    required TResult Function() multiSelectIsEmpty,
    required TResult Function() multiSelectIsNotEmpty,
    required TResult Function(String date) dateEquals,
    required TResult Function(String date) dateBefore,
    required TResult Function(String date) dateAfter,
    required TResult Function(String date) dateOnOrBefore,
    required TResult Function(String date) dateOnOrAfter,
    required TResult Function() dateIsEmpty,
    required TResult Function() dateIsNotEmpty,
    required TResult Function() datePastWeek,
    required TResult Function() datePastMonth,
    required TResult Function() datePastYear,
    required TResult Function() dateNextWeek,
    required TResult Function() dateNextMonth,
    required TResult Function() dateNextYear,
    required TResult Function(String userId) peopleContains,
    required TResult Function(String userId) peopleDoesNotContain,
    required TResult Function() peopleIsEmpty,
    required TResult Function() peopleIsNotEmpty,
    required TResult Function() filesIsEmpty,
    required TResult Function() filesIsNotEmpty,
    required TResult Function(String pageId) relationContains,
    required TResult Function(String pageId) relationDoesNotContain,
    required TResult Function() relationIsEmpty,
    required TResult Function() relationIsNotEmpty,
  }) =>
      throw _privateConstructorUsedError;
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function(String value)? textEquals,
    TResult? Function(String value)? textDoesNotEqual,
    TResult? Function(String value)? textContains,
    TResult? Function(String value)? textDoesNotContain,
    TResult? Function(String value)? textStartsWith,
    TResult? Function(String value)? textEndsWith,
    TResult? Function()? textIsEmpty,
    TResult? Function()? textIsNotEmpty,
    TResult? Function(double value)? numberEquals,
    TResult? Function(double value)? numberDoesNotEqual,
    TResult? Function(double value)? numberGreaterThan,
    TResult? Function(double value)? numberLessThan,
    TResult? Function(double value)? numberGreaterThanOrEqual,
    TResult? Function(double value)? numberLessThanOrEqual,
    TResult? Function()? numberIsEmpty,
    TResult? Function()? numberIsNotEmpty,
    TResult? Function(bool value)? checkboxEquals,
    TResult? Function(String value)? selectEquals,
    TResult? Function(String value)? selectDoesNotEqual,
    TResult? Function()? selectIsEmpty,
    TResult? Function()? selectIsNotEmpty,
    TResult? Function(String value)? multiSelectContains,
    TResult? Function(String value)? multiSelectDoesNotContain,
    TResult? Function()? multiSelectIsEmpty,
    TResult? Function()? multiSelectIsNotEmpty,
    TResult? Function(String date)? dateEquals,
    TResult? Function(String date)? dateBefore,
    TResult? Function(String date)? dateAfter,
    TResult? Function(String date)? dateOnOrBefore,
    TResult? Function(String date)? dateOnOrAfter,
    TResult? Function()? dateIsEmpty,
    TResult? Function()? dateIsNotEmpty,
    TResult? Function()? datePastWeek,
    TResult? Function()? datePastMonth,
    TResult? Function()? datePastYear,
    TResult? Function()? dateNextWeek,
    TResult? Function()? dateNextMonth,
    TResult? Function()? dateNextYear,
    TResult? Function(String userId)? peopleContains,
    TResult? Function(String userId)? peopleDoesNotContain,
    TResult? Function()? peopleIsEmpty,
    TResult? Function()? peopleIsNotEmpty,
    TResult? Function()? filesIsEmpty,
    TResult? Function()? filesIsNotEmpty,
    TResult? Function(String pageId)? relationContains,
    TResult? Function(String pageId)? relationDoesNotContain,
    TResult? Function()? relationIsEmpty,
    TResult? Function()? relationIsNotEmpty,
  }) =>
      throw _privateConstructorUsedError;
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function(String value)? textEquals,
    TResult Function(String value)? textDoesNotEqual,
    TResult Function(String value)? textContains,
    TResult Function(String value)? textDoesNotContain,
    TResult Function(String value)? textStartsWith,
    TResult Function(String value)? textEndsWith,
    TResult Function()? textIsEmpty,
    TResult Function()? textIsNotEmpty,
    TResult Function(double value)? numberEquals,
    TResult Function(double value)? numberDoesNotEqual,
    TResult Function(double value)? numberGreaterThan,
    TResult Function(double value)? numberLessThan,
    TResult Function(double value)? numberGreaterThanOrEqual,
    TResult Function(double value)? numberLessThanOrEqual,
    TResult Function()? numberIsEmpty,
    TResult Function()? numberIsNotEmpty,
    TResult Function(bool value)? checkboxEquals,
    TResult Function(String value)? selectEquals,
    TResult Function(String value)? selectDoesNotEqual,
    TResult Function()? selectIsEmpty,
    TResult Function()? selectIsNotEmpty,
    TResult Function(String value)? multiSelectContains,
    TResult Function(String value)? multiSelectDoesNotContain,
    TResult Function()? multiSelectIsEmpty,
    TResult Function()? multiSelectIsNotEmpty,
    TResult Function(String date)? dateEquals,
    TResult Function(String date)? dateBefore,
    TResult Function(String date)? dateAfter,
    TResult Function(String date)? dateOnOrBefore,
    TResult Function(String date)? dateOnOrAfter,
    TResult Function()? dateIsEmpty,
    TResult Function()? dateIsNotEmpty,
    TResult Function()? datePastWeek,
    TResult Function()? datePastMonth,
    TResult Function()? datePastYear,
    TResult Function()? dateNextWeek,
    TResult Function()? dateNextMonth,
    TResult Function()? dateNextYear,
    TResult Function(String userId)? peopleContains,
    TResult Function(String userId)? peopleDoesNotContain,
    TResult Function()? peopleIsEmpty,
    TResult Function()? peopleIsNotEmpty,
    TResult Function()? filesIsEmpty,
    TResult Function()? filesIsNotEmpty,
    TResult Function(String pageId)? relationContains,
    TResult Function(String pageId)? relationDoesNotContain,
    TResult Function()? relationIsEmpty,
    TResult Function()? relationIsNotEmpty,
    required TResult orElse(),
  }) =>
      throw _privateConstructorUsedError;
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(TextEqualsFilter value) textEquals,
    required TResult Function(TextDoesNotEqualFilter value) textDoesNotEqual,
    required TResult Function(TextContainsFilter value) textContains,
    required TResult Function(TextDoesNotContainFilter value)
        textDoesNotContain,
    required TResult Function(TextStartsWithFilter value) textStartsWith,
    required TResult Function(TextEndsWithFilter value) textEndsWith,
    required TResult Function(TextIsEmptyFilter value) textIsEmpty,
    required TResult Function(TextIsNotEmptyFilter value) textIsNotEmpty,
    required TResult Function(NumberEqualsFilter value) numberEquals,
    required TResult Function(NumberDoesNotEqualFilter value)
        numberDoesNotEqual,
    required TResult Function(NumberGreaterThanFilter value) numberGreaterThan,
    required TResult Function(NumberLessThanFilter value) numberLessThan,
    required TResult Function(NumberGreaterThanOrEqualFilter value)
        numberGreaterThanOrEqual,
    required TResult Function(NumberLessThanOrEqualFilter value)
        numberLessThanOrEqual,
    required TResult Function(NumberIsEmptyFilter value) numberIsEmpty,
    required TResult Function(NumberIsNotEmptyFilter value) numberIsNotEmpty,
    required TResult Function(CheckboxEqualsFilter value) checkboxEquals,
    required TResult Function(SelectEqualsFilter value) selectEquals,
    required TResult Function(SelectDoesNotEqualFilter value)
        selectDoesNotEqual,
    required TResult Function(SelectIsEmptyFilter value) selectIsEmpty,
    required TResult Function(SelectIsNotEmptyFilter value) selectIsNotEmpty,
    required TResult Function(MultiSelectContainsFilter value)
        multiSelectContains,
    required TResult Function(MultiSelectDoesNotContainFilter value)
        multiSelectDoesNotContain,
    required TResult Function(MultiSelectIsEmptyFilter value)
        multiSelectIsEmpty,
    required TResult Function(MultiSelectIsNotEmptyFilter value)
        multiSelectIsNotEmpty,
    required TResult Function(DateEqualsFilter value) dateEquals,
    required TResult Function(DateBeforeFilter value) dateBefore,
    required TResult Function(DateAfterFilter value) dateAfter,
    required TResult Function(DateOnOrBeforeFilter value) dateOnOrBefore,
    required TResult Function(DateOnOrAfterFilter value) dateOnOrAfter,
    required TResult Function(DateIsEmptyFilter value) dateIsEmpty,
    required TResult Function(DateIsNotEmptyFilter value) dateIsNotEmpty,
    required TResult Function(DatePastWeekFilter value) datePastWeek,
    required TResult Function(DatePastMonthFilter value) datePastMonth,
    required TResult Function(DatePastYearFilter value) datePastYear,
    required TResult Function(DateNextWeekFilter value) dateNextWeek,
    required TResult Function(DateNextMonthFilter value) dateNextMonth,
    required TResult Function(DateNextYearFilter value) dateNextYear,
    required TResult Function(PeopleContainsFilter value) peopleContains,
    required TResult Function(PeopleDoesNotContainFilter value)
        peopleDoesNotContain,
    required TResult Function(PeopleIsEmptyFilter value) peopleIsEmpty,
    required TResult Function(PeopleIsNotEmptyFilter value) peopleIsNotEmpty,
    required TResult Function(FilesIsEmptyFilter value) filesIsEmpty,
    required TResult Function(FilesIsNotEmptyFilter value) filesIsNotEmpty,
    required TResult Function(RelationContainsFilter value) relationContains,
    required TResult Function(RelationDoesNotContainFilter value)
        relationDoesNotContain,
    required TResult Function(RelationIsEmptyFilter value) relationIsEmpty,
    required TResult Function(RelationIsNotEmptyFilter value)
        relationIsNotEmpty,
  }) =>
      throw _privateConstructorUsedError;
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(TextEqualsFilter value)? textEquals,
    TResult? Function(TextDoesNotEqualFilter value)? textDoesNotEqual,
    TResult? Function(TextContainsFilter value)? textContains,
    TResult? Function(TextDoesNotContainFilter value)? textDoesNotContain,
    TResult? Function(TextStartsWithFilter value)? textStartsWith,
    TResult? Function(TextEndsWithFilter value)? textEndsWith,
    TResult? Function(TextIsEmptyFilter value)? textIsEmpty,
    TResult? Function(TextIsNotEmptyFilter value)? textIsNotEmpty,
    TResult? Function(NumberEqualsFilter value)? numberEquals,
    TResult? Function(NumberDoesNotEqualFilter value)? numberDoesNotEqual,
    TResult? Function(NumberGreaterThanFilter value)? numberGreaterThan,
    TResult? Function(NumberLessThanFilter value)? numberLessThan,
    TResult? Function(NumberGreaterThanOrEqualFilter value)?
        numberGreaterThanOrEqual,
    TResult? Function(NumberLessThanOrEqualFilter value)? numberLessThanOrEqual,
    TResult? Function(NumberIsEmptyFilter value)? numberIsEmpty,
    TResult? Function(NumberIsNotEmptyFilter value)? numberIsNotEmpty,
    TResult? Function(CheckboxEqualsFilter value)? checkboxEquals,
    TResult? Function(SelectEqualsFilter value)? selectEquals,
    TResult? Function(SelectDoesNotEqualFilter value)? selectDoesNotEqual,
    TResult? Function(SelectIsEmptyFilter value)? selectIsEmpty,
    TResult? Function(SelectIsNotEmptyFilter value)? selectIsNotEmpty,
    TResult? Function(MultiSelectContainsFilter value)? multiSelectContains,
    TResult? Function(MultiSelectDoesNotContainFilter value)?
        multiSelectDoesNotContain,
    TResult? Function(MultiSelectIsEmptyFilter value)? multiSelectIsEmpty,
    TResult? Function(MultiSelectIsNotEmptyFilter value)? multiSelectIsNotEmpty,
    TResult? Function(DateEqualsFilter value)? dateEquals,
    TResult? Function(DateBeforeFilter value)? dateBefore,
    TResult? Function(DateAfterFilter value)? dateAfter,
    TResult? Function(DateOnOrBeforeFilter value)? dateOnOrBefore,
    TResult? Function(DateOnOrAfterFilter value)? dateOnOrAfter,
    TResult? Function(DateIsEmptyFilter value)? dateIsEmpty,
    TResult? Function(DateIsNotEmptyFilter value)? dateIsNotEmpty,
    TResult? Function(DatePastWeekFilter value)? datePastWeek,
    TResult? Function(DatePastMonthFilter value)? datePastMonth,
    TResult? Function(DatePastYearFilter value)? datePastYear,
    TResult? Function(DateNextWeekFilter value)? dateNextWeek,
    TResult? Function(DateNextMonthFilter value)? dateNextMonth,
    TResult? Function(DateNextYearFilter value)? dateNextYear,
    TResult? Function(PeopleContainsFilter value)? peopleContains,
    TResult? Function(PeopleDoesNotContainFilter value)? peopleDoesNotContain,
    TResult? Function(PeopleIsEmptyFilter value)? peopleIsEmpty,
    TResult? Function(PeopleIsNotEmptyFilter value)? peopleIsNotEmpty,
    TResult? Function(FilesIsEmptyFilter value)? filesIsEmpty,
    TResult? Function(FilesIsNotEmptyFilter value)? filesIsNotEmpty,
    TResult? Function(RelationContainsFilter value)? relationContains,
    TResult? Function(RelationDoesNotContainFilter value)?
        relationDoesNotContain,
    TResult? Function(RelationIsEmptyFilter value)? relationIsEmpty,
    TResult? Function(RelationIsNotEmptyFilter value)? relationIsNotEmpty,
  }) =>
      throw _privateConstructorUsedError;
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(TextEqualsFilter value)? textEquals,
    TResult Function(TextDoesNotEqualFilter value)? textDoesNotEqual,
    TResult Function(TextContainsFilter value)? textContains,
    TResult Function(TextDoesNotContainFilter value)? textDoesNotContain,
    TResult Function(TextStartsWithFilter value)? textStartsWith,
    TResult Function(TextEndsWithFilter value)? textEndsWith,
    TResult Function(TextIsEmptyFilter value)? textIsEmpty,
    TResult Function(TextIsNotEmptyFilter value)? textIsNotEmpty,
    TResult Function(NumberEqualsFilter value)? numberEquals,
    TResult Function(NumberDoesNotEqualFilter value)? numberDoesNotEqual,
    TResult Function(NumberGreaterThanFilter value)? numberGreaterThan,
    TResult Function(NumberLessThanFilter value)? numberLessThan,
    TResult Function(NumberGreaterThanOrEqualFilter value)?
        numberGreaterThanOrEqual,
    TResult Function(NumberLessThanOrEqualFilter value)? numberLessThanOrEqual,
    TResult Function(NumberIsEmptyFilter value)? numberIsEmpty,
    TResult Function(NumberIsNotEmptyFilter value)? numberIsNotEmpty,
    TResult Function(CheckboxEqualsFilter value)? checkboxEquals,
    TResult Function(SelectEqualsFilter value)? selectEquals,
    TResult Function(SelectDoesNotEqualFilter value)? selectDoesNotEqual,
    TResult Function(SelectIsEmptyFilter value)? selectIsEmpty,
    TResult Function(SelectIsNotEmptyFilter value)? selectIsNotEmpty,
    TResult Function(MultiSelectContainsFilter value)? multiSelectContains,
    TResult Function(MultiSelectDoesNotContainFilter value)?
        multiSelectDoesNotContain,
    TResult Function(MultiSelectIsEmptyFilter value)? multiSelectIsEmpty,
    TResult Function(MultiSelectIsNotEmptyFilter value)? multiSelectIsNotEmpty,
    TResult Function(DateEqualsFilter value)? dateEquals,
    TResult Function(DateBeforeFilter value)? dateBefore,
    TResult Function(DateAfterFilter value)? dateAfter,
    TResult Function(DateOnOrBeforeFilter value)? dateOnOrBefore,
    TResult Function(DateOnOrAfterFilter value)? dateOnOrAfter,
    TResult Function(DateIsEmptyFilter value)? dateIsEmpty,
    TResult Function(DateIsNotEmptyFilter value)? dateIsNotEmpty,
    TResult Function(DatePastWeekFilter value)? datePastWeek,
    TResult Function(DatePastMonthFilter value)? datePastMonth,
    TResult Function(DatePastYearFilter value)? datePastYear,
    TResult Function(DateNextWeekFilter value)? dateNextWeek,
    TResult Function(DateNextMonthFilter value)? dateNextMonth,
    TResult Function(DateNextYearFilter value)? dateNextYear,
    TResult Function(PeopleContainsFilter value)? peopleContains,
    TResult Function(PeopleDoesNotContainFilter value)? peopleDoesNotContain,
    TResult Function(PeopleIsEmptyFilter value)? peopleIsEmpty,
    TResult Function(PeopleIsNotEmptyFilter value)? peopleIsNotEmpty,
    TResult Function(FilesIsEmptyFilter value)? filesIsEmpty,
    TResult Function(FilesIsNotEmptyFilter value)? filesIsNotEmpty,
    TResult Function(RelationContainsFilter value)? relationContains,
    TResult Function(RelationDoesNotContainFilter value)?
        relationDoesNotContain,
    TResult Function(RelationIsEmptyFilter value)? relationIsEmpty,
    TResult Function(RelationIsNotEmptyFilter value)? relationIsNotEmpty,
    required TResult orElse(),
  }) =>
      throw _privateConstructorUsedError;
}

/// @nodoc
abstract class $PropertyFilterCopyWith<$Res> {
  factory $PropertyFilterCopyWith(
          PropertyFilter value, $Res Function(PropertyFilter) then) =
      _$PropertyFilterCopyWithImpl<$Res, PropertyFilter>;
}

/// @nodoc
class _$PropertyFilterCopyWithImpl<$Res, $Val extends PropertyFilter>
    implements $PropertyFilterCopyWith<$Res> {
  _$PropertyFilterCopyWithImpl(this._value, this._then);

  // ignore: unused_field
  final $Val _value;
  // ignore: unused_field
  final $Res Function($Val) _then;

  /// Create a copy of PropertyFilter
  /// with the given fields replaced by the non-null parameter values.
}

/// @nodoc
abstract class _$$TextEqualsFilterImplCopyWith<$Res> {
  factory _$$TextEqualsFilterImplCopyWith(_$TextEqualsFilterImpl value,
          $Res Function(_$TextEqualsFilterImpl) then) =
      __$$TextEqualsFilterImplCopyWithImpl<$Res>;
  @useResult
  $Res call({String value});
}

/// @nodoc
class __$$TextEqualsFilterImplCopyWithImpl<$Res>
    extends _$PropertyFilterCopyWithImpl<$Res, _$TextEqualsFilterImpl>
    implements _$$TextEqualsFilterImplCopyWith<$Res> {
  __$$TextEqualsFilterImplCopyWithImpl(_$TextEqualsFilterImpl _value,
      $Res Function(_$TextEqualsFilterImpl) _then)
      : super(_value, _then);

  /// Create a copy of PropertyFilter
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? value = null,
  }) {
    return _then(_$TextEqualsFilterImpl(
      null == value
          ? _value.value
          : value // ignore: cast_nullable_to_non_nullable
              as String,
    ));
  }
}

/// @nodoc

class _$TextEqualsFilterImpl extends TextEqualsFilter {
  const _$TextEqualsFilterImpl(this.value) : super._();

  @override
  final String value;

  @override
  String toString() {
    return 'PropertyFilter.textEquals(value: $value)';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$TextEqualsFilterImpl &&
            (identical(other.value, value) || other.value == value));
  }

  @override
  int get hashCode => Object.hash(runtimeType, value);

  /// Create a copy of PropertyFilter
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  @pragma('vm:prefer-inline')
  _$$TextEqualsFilterImplCopyWith<_$TextEqualsFilterImpl> get copyWith =>
      __$$TextEqualsFilterImplCopyWithImpl<_$TextEqualsFilterImpl>(
          this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function(String value) textEquals,
    required TResult Function(String value) textDoesNotEqual,
    required TResult Function(String value) textContains,
    required TResult Function(String value) textDoesNotContain,
    required TResult Function(String value) textStartsWith,
    required TResult Function(String value) textEndsWith,
    required TResult Function() textIsEmpty,
    required TResult Function() textIsNotEmpty,
    required TResult Function(double value) numberEquals,
    required TResult Function(double value) numberDoesNotEqual,
    required TResult Function(double value) numberGreaterThan,
    required TResult Function(double value) numberLessThan,
    required TResult Function(double value) numberGreaterThanOrEqual,
    required TResult Function(double value) numberLessThanOrEqual,
    required TResult Function() numberIsEmpty,
    required TResult Function() numberIsNotEmpty,
    required TResult Function(bool value) checkboxEquals,
    required TResult Function(String value) selectEquals,
    required TResult Function(String value) selectDoesNotEqual,
    required TResult Function() selectIsEmpty,
    required TResult Function() selectIsNotEmpty,
    required TResult Function(String value) multiSelectContains,
    required TResult Function(String value) multiSelectDoesNotContain,
    required TResult Function() multiSelectIsEmpty,
    required TResult Function() multiSelectIsNotEmpty,
    required TResult Function(String date) dateEquals,
    required TResult Function(String date) dateBefore,
    required TResult Function(String date) dateAfter,
    required TResult Function(String date) dateOnOrBefore,
    required TResult Function(String date) dateOnOrAfter,
    required TResult Function() dateIsEmpty,
    required TResult Function() dateIsNotEmpty,
    required TResult Function() datePastWeek,
    required TResult Function() datePastMonth,
    required TResult Function() datePastYear,
    required TResult Function() dateNextWeek,
    required TResult Function() dateNextMonth,
    required TResult Function() dateNextYear,
    required TResult Function(String userId) peopleContains,
    required TResult Function(String userId) peopleDoesNotContain,
    required TResult Function() peopleIsEmpty,
    required TResult Function() peopleIsNotEmpty,
    required TResult Function() filesIsEmpty,
    required TResult Function() filesIsNotEmpty,
    required TResult Function(String pageId) relationContains,
    required TResult Function(String pageId) relationDoesNotContain,
    required TResult Function() relationIsEmpty,
    required TResult Function() relationIsNotEmpty,
  }) {
    return textEquals(value);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function(String value)? textEquals,
    TResult? Function(String value)? textDoesNotEqual,
    TResult? Function(String value)? textContains,
    TResult? Function(String value)? textDoesNotContain,
    TResult? Function(String value)? textStartsWith,
    TResult? Function(String value)? textEndsWith,
    TResult? Function()? textIsEmpty,
    TResult? Function()? textIsNotEmpty,
    TResult? Function(double value)? numberEquals,
    TResult? Function(double value)? numberDoesNotEqual,
    TResult? Function(double value)? numberGreaterThan,
    TResult? Function(double value)? numberLessThan,
    TResult? Function(double value)? numberGreaterThanOrEqual,
    TResult? Function(double value)? numberLessThanOrEqual,
    TResult? Function()? numberIsEmpty,
    TResult? Function()? numberIsNotEmpty,
    TResult? Function(bool value)? checkboxEquals,
    TResult? Function(String value)? selectEquals,
    TResult? Function(String value)? selectDoesNotEqual,
    TResult? Function()? selectIsEmpty,
    TResult? Function()? selectIsNotEmpty,
    TResult? Function(String value)? multiSelectContains,
    TResult? Function(String value)? multiSelectDoesNotContain,
    TResult? Function()? multiSelectIsEmpty,
    TResult? Function()? multiSelectIsNotEmpty,
    TResult? Function(String date)? dateEquals,
    TResult? Function(String date)? dateBefore,
    TResult? Function(String date)? dateAfter,
    TResult? Function(String date)? dateOnOrBefore,
    TResult? Function(String date)? dateOnOrAfter,
    TResult? Function()? dateIsEmpty,
    TResult? Function()? dateIsNotEmpty,
    TResult? Function()? datePastWeek,
    TResult? Function()? datePastMonth,
    TResult? Function()? datePastYear,
    TResult? Function()? dateNextWeek,
    TResult? Function()? dateNextMonth,
    TResult? Function()? dateNextYear,
    TResult? Function(String userId)? peopleContains,
    TResult? Function(String userId)? peopleDoesNotContain,
    TResult? Function()? peopleIsEmpty,
    TResult? Function()? peopleIsNotEmpty,
    TResult? Function()? filesIsEmpty,
    TResult? Function()? filesIsNotEmpty,
    TResult? Function(String pageId)? relationContains,
    TResult? Function(String pageId)? relationDoesNotContain,
    TResult? Function()? relationIsEmpty,
    TResult? Function()? relationIsNotEmpty,
  }) {
    return textEquals?.call(value);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function(String value)? textEquals,
    TResult Function(String value)? textDoesNotEqual,
    TResult Function(String value)? textContains,
    TResult Function(String value)? textDoesNotContain,
    TResult Function(String value)? textStartsWith,
    TResult Function(String value)? textEndsWith,
    TResult Function()? textIsEmpty,
    TResult Function()? textIsNotEmpty,
    TResult Function(double value)? numberEquals,
    TResult Function(double value)? numberDoesNotEqual,
    TResult Function(double value)? numberGreaterThan,
    TResult Function(double value)? numberLessThan,
    TResult Function(double value)? numberGreaterThanOrEqual,
    TResult Function(double value)? numberLessThanOrEqual,
    TResult Function()? numberIsEmpty,
    TResult Function()? numberIsNotEmpty,
    TResult Function(bool value)? checkboxEquals,
    TResult Function(String value)? selectEquals,
    TResult Function(String value)? selectDoesNotEqual,
    TResult Function()? selectIsEmpty,
    TResult Function()? selectIsNotEmpty,
    TResult Function(String value)? multiSelectContains,
    TResult Function(String value)? multiSelectDoesNotContain,
    TResult Function()? multiSelectIsEmpty,
    TResult Function()? multiSelectIsNotEmpty,
    TResult Function(String date)? dateEquals,
    TResult Function(String date)? dateBefore,
    TResult Function(String date)? dateAfter,
    TResult Function(String date)? dateOnOrBefore,
    TResult Function(String date)? dateOnOrAfter,
    TResult Function()? dateIsEmpty,
    TResult Function()? dateIsNotEmpty,
    TResult Function()? datePastWeek,
    TResult Function()? datePastMonth,
    TResult Function()? datePastYear,
    TResult Function()? dateNextWeek,
    TResult Function()? dateNextMonth,
    TResult Function()? dateNextYear,
    TResult Function(String userId)? peopleContains,
    TResult Function(String userId)? peopleDoesNotContain,
    TResult Function()? peopleIsEmpty,
    TResult Function()? peopleIsNotEmpty,
    TResult Function()? filesIsEmpty,
    TResult Function()? filesIsNotEmpty,
    TResult Function(String pageId)? relationContains,
    TResult Function(String pageId)? relationDoesNotContain,
    TResult Function()? relationIsEmpty,
    TResult Function()? relationIsNotEmpty,
    required TResult orElse(),
  }) {
    if (textEquals != null) {
      return textEquals(value);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(TextEqualsFilter value) textEquals,
    required TResult Function(TextDoesNotEqualFilter value) textDoesNotEqual,
    required TResult Function(TextContainsFilter value) textContains,
    required TResult Function(TextDoesNotContainFilter value)
        textDoesNotContain,
    required TResult Function(TextStartsWithFilter value) textStartsWith,
    required TResult Function(TextEndsWithFilter value) textEndsWith,
    required TResult Function(TextIsEmptyFilter value) textIsEmpty,
    required TResult Function(TextIsNotEmptyFilter value) textIsNotEmpty,
    required TResult Function(NumberEqualsFilter value) numberEquals,
    required TResult Function(NumberDoesNotEqualFilter value)
        numberDoesNotEqual,
    required TResult Function(NumberGreaterThanFilter value) numberGreaterThan,
    required TResult Function(NumberLessThanFilter value) numberLessThan,
    required TResult Function(NumberGreaterThanOrEqualFilter value)
        numberGreaterThanOrEqual,
    required TResult Function(NumberLessThanOrEqualFilter value)
        numberLessThanOrEqual,
    required TResult Function(NumberIsEmptyFilter value) numberIsEmpty,
    required TResult Function(NumberIsNotEmptyFilter value) numberIsNotEmpty,
    required TResult Function(CheckboxEqualsFilter value) checkboxEquals,
    required TResult Function(SelectEqualsFilter value) selectEquals,
    required TResult Function(SelectDoesNotEqualFilter value)
        selectDoesNotEqual,
    required TResult Function(SelectIsEmptyFilter value) selectIsEmpty,
    required TResult Function(SelectIsNotEmptyFilter value) selectIsNotEmpty,
    required TResult Function(MultiSelectContainsFilter value)
        multiSelectContains,
    required TResult Function(MultiSelectDoesNotContainFilter value)
        multiSelectDoesNotContain,
    required TResult Function(MultiSelectIsEmptyFilter value)
        multiSelectIsEmpty,
    required TResult Function(MultiSelectIsNotEmptyFilter value)
        multiSelectIsNotEmpty,
    required TResult Function(DateEqualsFilter value) dateEquals,
    required TResult Function(DateBeforeFilter value) dateBefore,
    required TResult Function(DateAfterFilter value) dateAfter,
    required TResult Function(DateOnOrBeforeFilter value) dateOnOrBefore,
    required TResult Function(DateOnOrAfterFilter value) dateOnOrAfter,
    required TResult Function(DateIsEmptyFilter value) dateIsEmpty,
    required TResult Function(DateIsNotEmptyFilter value) dateIsNotEmpty,
    required TResult Function(DatePastWeekFilter value) datePastWeek,
    required TResult Function(DatePastMonthFilter value) datePastMonth,
    required TResult Function(DatePastYearFilter value) datePastYear,
    required TResult Function(DateNextWeekFilter value) dateNextWeek,
    required TResult Function(DateNextMonthFilter value) dateNextMonth,
    required TResult Function(DateNextYearFilter value) dateNextYear,
    required TResult Function(PeopleContainsFilter value) peopleContains,
    required TResult Function(PeopleDoesNotContainFilter value)
        peopleDoesNotContain,
    required TResult Function(PeopleIsEmptyFilter value) peopleIsEmpty,
    required TResult Function(PeopleIsNotEmptyFilter value) peopleIsNotEmpty,
    required TResult Function(FilesIsEmptyFilter value) filesIsEmpty,
    required TResult Function(FilesIsNotEmptyFilter value) filesIsNotEmpty,
    required TResult Function(RelationContainsFilter value) relationContains,
    required TResult Function(RelationDoesNotContainFilter value)
        relationDoesNotContain,
    required TResult Function(RelationIsEmptyFilter value) relationIsEmpty,
    required TResult Function(RelationIsNotEmptyFilter value)
        relationIsNotEmpty,
  }) {
    return textEquals(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(TextEqualsFilter value)? textEquals,
    TResult? Function(TextDoesNotEqualFilter value)? textDoesNotEqual,
    TResult? Function(TextContainsFilter value)? textContains,
    TResult? Function(TextDoesNotContainFilter value)? textDoesNotContain,
    TResult? Function(TextStartsWithFilter value)? textStartsWith,
    TResult? Function(TextEndsWithFilter value)? textEndsWith,
    TResult? Function(TextIsEmptyFilter value)? textIsEmpty,
    TResult? Function(TextIsNotEmptyFilter value)? textIsNotEmpty,
    TResult? Function(NumberEqualsFilter value)? numberEquals,
    TResult? Function(NumberDoesNotEqualFilter value)? numberDoesNotEqual,
    TResult? Function(NumberGreaterThanFilter value)? numberGreaterThan,
    TResult? Function(NumberLessThanFilter value)? numberLessThan,
    TResult? Function(NumberGreaterThanOrEqualFilter value)?
        numberGreaterThanOrEqual,
    TResult? Function(NumberLessThanOrEqualFilter value)? numberLessThanOrEqual,
    TResult? Function(NumberIsEmptyFilter value)? numberIsEmpty,
    TResult? Function(NumberIsNotEmptyFilter value)? numberIsNotEmpty,
    TResult? Function(CheckboxEqualsFilter value)? checkboxEquals,
    TResult? Function(SelectEqualsFilter value)? selectEquals,
    TResult? Function(SelectDoesNotEqualFilter value)? selectDoesNotEqual,
    TResult? Function(SelectIsEmptyFilter value)? selectIsEmpty,
    TResult? Function(SelectIsNotEmptyFilter value)? selectIsNotEmpty,
    TResult? Function(MultiSelectContainsFilter value)? multiSelectContains,
    TResult? Function(MultiSelectDoesNotContainFilter value)?
        multiSelectDoesNotContain,
    TResult? Function(MultiSelectIsEmptyFilter value)? multiSelectIsEmpty,
    TResult? Function(MultiSelectIsNotEmptyFilter value)? multiSelectIsNotEmpty,
    TResult? Function(DateEqualsFilter value)? dateEquals,
    TResult? Function(DateBeforeFilter value)? dateBefore,
    TResult? Function(DateAfterFilter value)? dateAfter,
    TResult? Function(DateOnOrBeforeFilter value)? dateOnOrBefore,
    TResult? Function(DateOnOrAfterFilter value)? dateOnOrAfter,
    TResult? Function(DateIsEmptyFilter value)? dateIsEmpty,
    TResult? Function(DateIsNotEmptyFilter value)? dateIsNotEmpty,
    TResult? Function(DatePastWeekFilter value)? datePastWeek,
    TResult? Function(DatePastMonthFilter value)? datePastMonth,
    TResult? Function(DatePastYearFilter value)? datePastYear,
    TResult? Function(DateNextWeekFilter value)? dateNextWeek,
    TResult? Function(DateNextMonthFilter value)? dateNextMonth,
    TResult? Function(DateNextYearFilter value)? dateNextYear,
    TResult? Function(PeopleContainsFilter value)? peopleContains,
    TResult? Function(PeopleDoesNotContainFilter value)? peopleDoesNotContain,
    TResult? Function(PeopleIsEmptyFilter value)? peopleIsEmpty,
    TResult? Function(PeopleIsNotEmptyFilter value)? peopleIsNotEmpty,
    TResult? Function(FilesIsEmptyFilter value)? filesIsEmpty,
    TResult? Function(FilesIsNotEmptyFilter value)? filesIsNotEmpty,
    TResult? Function(RelationContainsFilter value)? relationContains,
    TResult? Function(RelationDoesNotContainFilter value)?
        relationDoesNotContain,
    TResult? Function(RelationIsEmptyFilter value)? relationIsEmpty,
    TResult? Function(RelationIsNotEmptyFilter value)? relationIsNotEmpty,
  }) {
    return textEquals?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(TextEqualsFilter value)? textEquals,
    TResult Function(TextDoesNotEqualFilter value)? textDoesNotEqual,
    TResult Function(TextContainsFilter value)? textContains,
    TResult Function(TextDoesNotContainFilter value)? textDoesNotContain,
    TResult Function(TextStartsWithFilter value)? textStartsWith,
    TResult Function(TextEndsWithFilter value)? textEndsWith,
    TResult Function(TextIsEmptyFilter value)? textIsEmpty,
    TResult Function(TextIsNotEmptyFilter value)? textIsNotEmpty,
    TResult Function(NumberEqualsFilter value)? numberEquals,
    TResult Function(NumberDoesNotEqualFilter value)? numberDoesNotEqual,
    TResult Function(NumberGreaterThanFilter value)? numberGreaterThan,
    TResult Function(NumberLessThanFilter value)? numberLessThan,
    TResult Function(NumberGreaterThanOrEqualFilter value)?
        numberGreaterThanOrEqual,
    TResult Function(NumberLessThanOrEqualFilter value)? numberLessThanOrEqual,
    TResult Function(NumberIsEmptyFilter value)? numberIsEmpty,
    TResult Function(NumberIsNotEmptyFilter value)? numberIsNotEmpty,
    TResult Function(CheckboxEqualsFilter value)? checkboxEquals,
    TResult Function(SelectEqualsFilter value)? selectEquals,
    TResult Function(SelectDoesNotEqualFilter value)? selectDoesNotEqual,
    TResult Function(SelectIsEmptyFilter value)? selectIsEmpty,
    TResult Function(SelectIsNotEmptyFilter value)? selectIsNotEmpty,
    TResult Function(MultiSelectContainsFilter value)? multiSelectContains,
    TResult Function(MultiSelectDoesNotContainFilter value)?
        multiSelectDoesNotContain,
    TResult Function(MultiSelectIsEmptyFilter value)? multiSelectIsEmpty,
    TResult Function(MultiSelectIsNotEmptyFilter value)? multiSelectIsNotEmpty,
    TResult Function(DateEqualsFilter value)? dateEquals,
    TResult Function(DateBeforeFilter value)? dateBefore,
    TResult Function(DateAfterFilter value)? dateAfter,
    TResult Function(DateOnOrBeforeFilter value)? dateOnOrBefore,
    TResult Function(DateOnOrAfterFilter value)? dateOnOrAfter,
    TResult Function(DateIsEmptyFilter value)? dateIsEmpty,
    TResult Function(DateIsNotEmptyFilter value)? dateIsNotEmpty,
    TResult Function(DatePastWeekFilter value)? datePastWeek,
    TResult Function(DatePastMonthFilter value)? datePastMonth,
    TResult Function(DatePastYearFilter value)? datePastYear,
    TResult Function(DateNextWeekFilter value)? dateNextWeek,
    TResult Function(DateNextMonthFilter value)? dateNextMonth,
    TResult Function(DateNextYearFilter value)? dateNextYear,
    TResult Function(PeopleContainsFilter value)? peopleContains,
    TResult Function(PeopleDoesNotContainFilter value)? peopleDoesNotContain,
    TResult Function(PeopleIsEmptyFilter value)? peopleIsEmpty,
    TResult Function(PeopleIsNotEmptyFilter value)? peopleIsNotEmpty,
    TResult Function(FilesIsEmptyFilter value)? filesIsEmpty,
    TResult Function(FilesIsNotEmptyFilter value)? filesIsNotEmpty,
    TResult Function(RelationContainsFilter value)? relationContains,
    TResult Function(RelationDoesNotContainFilter value)?
        relationDoesNotContain,
    TResult Function(RelationIsEmptyFilter value)? relationIsEmpty,
    TResult Function(RelationIsNotEmptyFilter value)? relationIsNotEmpty,
    required TResult orElse(),
  }) {
    if (textEquals != null) {
      return textEquals(this);
    }
    return orElse();
  }
}

abstract class TextEqualsFilter extends PropertyFilter {
  const factory TextEqualsFilter(final String value) = _$TextEqualsFilterImpl;
  const TextEqualsFilter._() : super._();

  String get value;

  /// Create a copy of PropertyFilter
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  _$$TextEqualsFilterImplCopyWith<_$TextEqualsFilterImpl> get copyWith =>
      throw _privateConstructorUsedError;
}

/// @nodoc
abstract class _$$TextDoesNotEqualFilterImplCopyWith<$Res> {
  factory _$$TextDoesNotEqualFilterImplCopyWith(
          _$TextDoesNotEqualFilterImpl value,
          $Res Function(_$TextDoesNotEqualFilterImpl) then) =
      __$$TextDoesNotEqualFilterImplCopyWithImpl<$Res>;
  @useResult
  $Res call({String value});
}

/// @nodoc
class __$$TextDoesNotEqualFilterImplCopyWithImpl<$Res>
    extends _$PropertyFilterCopyWithImpl<$Res, _$TextDoesNotEqualFilterImpl>
    implements _$$TextDoesNotEqualFilterImplCopyWith<$Res> {
  __$$TextDoesNotEqualFilterImplCopyWithImpl(
      _$TextDoesNotEqualFilterImpl _value,
      $Res Function(_$TextDoesNotEqualFilterImpl) _then)
      : super(_value, _then);

  /// Create a copy of PropertyFilter
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? value = null,
  }) {
    return _then(_$TextDoesNotEqualFilterImpl(
      null == value
          ? _value.value
          : value // ignore: cast_nullable_to_non_nullable
              as String,
    ));
  }
}

/// @nodoc

class _$TextDoesNotEqualFilterImpl extends TextDoesNotEqualFilter {
  const _$TextDoesNotEqualFilterImpl(this.value) : super._();

  @override
  final String value;

  @override
  String toString() {
    return 'PropertyFilter.textDoesNotEqual(value: $value)';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$TextDoesNotEqualFilterImpl &&
            (identical(other.value, value) || other.value == value));
  }

  @override
  int get hashCode => Object.hash(runtimeType, value);

  /// Create a copy of PropertyFilter
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  @pragma('vm:prefer-inline')
  _$$TextDoesNotEqualFilterImplCopyWith<_$TextDoesNotEqualFilterImpl>
      get copyWith => __$$TextDoesNotEqualFilterImplCopyWithImpl<
          _$TextDoesNotEqualFilterImpl>(this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function(String value) textEquals,
    required TResult Function(String value) textDoesNotEqual,
    required TResult Function(String value) textContains,
    required TResult Function(String value) textDoesNotContain,
    required TResult Function(String value) textStartsWith,
    required TResult Function(String value) textEndsWith,
    required TResult Function() textIsEmpty,
    required TResult Function() textIsNotEmpty,
    required TResult Function(double value) numberEquals,
    required TResult Function(double value) numberDoesNotEqual,
    required TResult Function(double value) numberGreaterThan,
    required TResult Function(double value) numberLessThan,
    required TResult Function(double value) numberGreaterThanOrEqual,
    required TResult Function(double value) numberLessThanOrEqual,
    required TResult Function() numberIsEmpty,
    required TResult Function() numberIsNotEmpty,
    required TResult Function(bool value) checkboxEquals,
    required TResult Function(String value) selectEquals,
    required TResult Function(String value) selectDoesNotEqual,
    required TResult Function() selectIsEmpty,
    required TResult Function() selectIsNotEmpty,
    required TResult Function(String value) multiSelectContains,
    required TResult Function(String value) multiSelectDoesNotContain,
    required TResult Function() multiSelectIsEmpty,
    required TResult Function() multiSelectIsNotEmpty,
    required TResult Function(String date) dateEquals,
    required TResult Function(String date) dateBefore,
    required TResult Function(String date) dateAfter,
    required TResult Function(String date) dateOnOrBefore,
    required TResult Function(String date) dateOnOrAfter,
    required TResult Function() dateIsEmpty,
    required TResult Function() dateIsNotEmpty,
    required TResult Function() datePastWeek,
    required TResult Function() datePastMonth,
    required TResult Function() datePastYear,
    required TResult Function() dateNextWeek,
    required TResult Function() dateNextMonth,
    required TResult Function() dateNextYear,
    required TResult Function(String userId) peopleContains,
    required TResult Function(String userId) peopleDoesNotContain,
    required TResult Function() peopleIsEmpty,
    required TResult Function() peopleIsNotEmpty,
    required TResult Function() filesIsEmpty,
    required TResult Function() filesIsNotEmpty,
    required TResult Function(String pageId) relationContains,
    required TResult Function(String pageId) relationDoesNotContain,
    required TResult Function() relationIsEmpty,
    required TResult Function() relationIsNotEmpty,
  }) {
    return textDoesNotEqual(value);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function(String value)? textEquals,
    TResult? Function(String value)? textDoesNotEqual,
    TResult? Function(String value)? textContains,
    TResult? Function(String value)? textDoesNotContain,
    TResult? Function(String value)? textStartsWith,
    TResult? Function(String value)? textEndsWith,
    TResult? Function()? textIsEmpty,
    TResult? Function()? textIsNotEmpty,
    TResult? Function(double value)? numberEquals,
    TResult? Function(double value)? numberDoesNotEqual,
    TResult? Function(double value)? numberGreaterThan,
    TResult? Function(double value)? numberLessThan,
    TResult? Function(double value)? numberGreaterThanOrEqual,
    TResult? Function(double value)? numberLessThanOrEqual,
    TResult? Function()? numberIsEmpty,
    TResult? Function()? numberIsNotEmpty,
    TResult? Function(bool value)? checkboxEquals,
    TResult? Function(String value)? selectEquals,
    TResult? Function(String value)? selectDoesNotEqual,
    TResult? Function()? selectIsEmpty,
    TResult? Function()? selectIsNotEmpty,
    TResult? Function(String value)? multiSelectContains,
    TResult? Function(String value)? multiSelectDoesNotContain,
    TResult? Function()? multiSelectIsEmpty,
    TResult? Function()? multiSelectIsNotEmpty,
    TResult? Function(String date)? dateEquals,
    TResult? Function(String date)? dateBefore,
    TResult? Function(String date)? dateAfter,
    TResult? Function(String date)? dateOnOrBefore,
    TResult? Function(String date)? dateOnOrAfter,
    TResult? Function()? dateIsEmpty,
    TResult? Function()? dateIsNotEmpty,
    TResult? Function()? datePastWeek,
    TResult? Function()? datePastMonth,
    TResult? Function()? datePastYear,
    TResult? Function()? dateNextWeek,
    TResult? Function()? dateNextMonth,
    TResult? Function()? dateNextYear,
    TResult? Function(String userId)? peopleContains,
    TResult? Function(String userId)? peopleDoesNotContain,
    TResult? Function()? peopleIsEmpty,
    TResult? Function()? peopleIsNotEmpty,
    TResult? Function()? filesIsEmpty,
    TResult? Function()? filesIsNotEmpty,
    TResult? Function(String pageId)? relationContains,
    TResult? Function(String pageId)? relationDoesNotContain,
    TResult? Function()? relationIsEmpty,
    TResult? Function()? relationIsNotEmpty,
  }) {
    return textDoesNotEqual?.call(value);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function(String value)? textEquals,
    TResult Function(String value)? textDoesNotEqual,
    TResult Function(String value)? textContains,
    TResult Function(String value)? textDoesNotContain,
    TResult Function(String value)? textStartsWith,
    TResult Function(String value)? textEndsWith,
    TResult Function()? textIsEmpty,
    TResult Function()? textIsNotEmpty,
    TResult Function(double value)? numberEquals,
    TResult Function(double value)? numberDoesNotEqual,
    TResult Function(double value)? numberGreaterThan,
    TResult Function(double value)? numberLessThan,
    TResult Function(double value)? numberGreaterThanOrEqual,
    TResult Function(double value)? numberLessThanOrEqual,
    TResult Function()? numberIsEmpty,
    TResult Function()? numberIsNotEmpty,
    TResult Function(bool value)? checkboxEquals,
    TResult Function(String value)? selectEquals,
    TResult Function(String value)? selectDoesNotEqual,
    TResult Function()? selectIsEmpty,
    TResult Function()? selectIsNotEmpty,
    TResult Function(String value)? multiSelectContains,
    TResult Function(String value)? multiSelectDoesNotContain,
    TResult Function()? multiSelectIsEmpty,
    TResult Function()? multiSelectIsNotEmpty,
    TResult Function(String date)? dateEquals,
    TResult Function(String date)? dateBefore,
    TResult Function(String date)? dateAfter,
    TResult Function(String date)? dateOnOrBefore,
    TResult Function(String date)? dateOnOrAfter,
    TResult Function()? dateIsEmpty,
    TResult Function()? dateIsNotEmpty,
    TResult Function()? datePastWeek,
    TResult Function()? datePastMonth,
    TResult Function()? datePastYear,
    TResult Function()? dateNextWeek,
    TResult Function()? dateNextMonth,
    TResult Function()? dateNextYear,
    TResult Function(String userId)? peopleContains,
    TResult Function(String userId)? peopleDoesNotContain,
    TResult Function()? peopleIsEmpty,
    TResult Function()? peopleIsNotEmpty,
    TResult Function()? filesIsEmpty,
    TResult Function()? filesIsNotEmpty,
    TResult Function(String pageId)? relationContains,
    TResult Function(String pageId)? relationDoesNotContain,
    TResult Function()? relationIsEmpty,
    TResult Function()? relationIsNotEmpty,
    required TResult orElse(),
  }) {
    if (textDoesNotEqual != null) {
      return textDoesNotEqual(value);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(TextEqualsFilter value) textEquals,
    required TResult Function(TextDoesNotEqualFilter value) textDoesNotEqual,
    required TResult Function(TextContainsFilter value) textContains,
    required TResult Function(TextDoesNotContainFilter value)
        textDoesNotContain,
    required TResult Function(TextStartsWithFilter value) textStartsWith,
    required TResult Function(TextEndsWithFilter value) textEndsWith,
    required TResult Function(TextIsEmptyFilter value) textIsEmpty,
    required TResult Function(TextIsNotEmptyFilter value) textIsNotEmpty,
    required TResult Function(NumberEqualsFilter value) numberEquals,
    required TResult Function(NumberDoesNotEqualFilter value)
        numberDoesNotEqual,
    required TResult Function(NumberGreaterThanFilter value) numberGreaterThan,
    required TResult Function(NumberLessThanFilter value) numberLessThan,
    required TResult Function(NumberGreaterThanOrEqualFilter value)
        numberGreaterThanOrEqual,
    required TResult Function(NumberLessThanOrEqualFilter value)
        numberLessThanOrEqual,
    required TResult Function(NumberIsEmptyFilter value) numberIsEmpty,
    required TResult Function(NumberIsNotEmptyFilter value) numberIsNotEmpty,
    required TResult Function(CheckboxEqualsFilter value) checkboxEquals,
    required TResult Function(SelectEqualsFilter value) selectEquals,
    required TResult Function(SelectDoesNotEqualFilter value)
        selectDoesNotEqual,
    required TResult Function(SelectIsEmptyFilter value) selectIsEmpty,
    required TResult Function(SelectIsNotEmptyFilter value) selectIsNotEmpty,
    required TResult Function(MultiSelectContainsFilter value)
        multiSelectContains,
    required TResult Function(MultiSelectDoesNotContainFilter value)
        multiSelectDoesNotContain,
    required TResult Function(MultiSelectIsEmptyFilter value)
        multiSelectIsEmpty,
    required TResult Function(MultiSelectIsNotEmptyFilter value)
        multiSelectIsNotEmpty,
    required TResult Function(DateEqualsFilter value) dateEquals,
    required TResult Function(DateBeforeFilter value) dateBefore,
    required TResult Function(DateAfterFilter value) dateAfter,
    required TResult Function(DateOnOrBeforeFilter value) dateOnOrBefore,
    required TResult Function(DateOnOrAfterFilter value) dateOnOrAfter,
    required TResult Function(DateIsEmptyFilter value) dateIsEmpty,
    required TResult Function(DateIsNotEmptyFilter value) dateIsNotEmpty,
    required TResult Function(DatePastWeekFilter value) datePastWeek,
    required TResult Function(DatePastMonthFilter value) datePastMonth,
    required TResult Function(DatePastYearFilter value) datePastYear,
    required TResult Function(DateNextWeekFilter value) dateNextWeek,
    required TResult Function(DateNextMonthFilter value) dateNextMonth,
    required TResult Function(DateNextYearFilter value) dateNextYear,
    required TResult Function(PeopleContainsFilter value) peopleContains,
    required TResult Function(PeopleDoesNotContainFilter value)
        peopleDoesNotContain,
    required TResult Function(PeopleIsEmptyFilter value) peopleIsEmpty,
    required TResult Function(PeopleIsNotEmptyFilter value) peopleIsNotEmpty,
    required TResult Function(FilesIsEmptyFilter value) filesIsEmpty,
    required TResult Function(FilesIsNotEmptyFilter value) filesIsNotEmpty,
    required TResult Function(RelationContainsFilter value) relationContains,
    required TResult Function(RelationDoesNotContainFilter value)
        relationDoesNotContain,
    required TResult Function(RelationIsEmptyFilter value) relationIsEmpty,
    required TResult Function(RelationIsNotEmptyFilter value)
        relationIsNotEmpty,
  }) {
    return textDoesNotEqual(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(TextEqualsFilter value)? textEquals,
    TResult? Function(TextDoesNotEqualFilter value)? textDoesNotEqual,
    TResult? Function(TextContainsFilter value)? textContains,
    TResult? Function(TextDoesNotContainFilter value)? textDoesNotContain,
    TResult? Function(TextStartsWithFilter value)? textStartsWith,
    TResult? Function(TextEndsWithFilter value)? textEndsWith,
    TResult? Function(TextIsEmptyFilter value)? textIsEmpty,
    TResult? Function(TextIsNotEmptyFilter value)? textIsNotEmpty,
    TResult? Function(NumberEqualsFilter value)? numberEquals,
    TResult? Function(NumberDoesNotEqualFilter value)? numberDoesNotEqual,
    TResult? Function(NumberGreaterThanFilter value)? numberGreaterThan,
    TResult? Function(NumberLessThanFilter value)? numberLessThan,
    TResult? Function(NumberGreaterThanOrEqualFilter value)?
        numberGreaterThanOrEqual,
    TResult? Function(NumberLessThanOrEqualFilter value)? numberLessThanOrEqual,
    TResult? Function(NumberIsEmptyFilter value)? numberIsEmpty,
    TResult? Function(NumberIsNotEmptyFilter value)? numberIsNotEmpty,
    TResult? Function(CheckboxEqualsFilter value)? checkboxEquals,
    TResult? Function(SelectEqualsFilter value)? selectEquals,
    TResult? Function(SelectDoesNotEqualFilter value)? selectDoesNotEqual,
    TResult? Function(SelectIsEmptyFilter value)? selectIsEmpty,
    TResult? Function(SelectIsNotEmptyFilter value)? selectIsNotEmpty,
    TResult? Function(MultiSelectContainsFilter value)? multiSelectContains,
    TResult? Function(MultiSelectDoesNotContainFilter value)?
        multiSelectDoesNotContain,
    TResult? Function(MultiSelectIsEmptyFilter value)? multiSelectIsEmpty,
    TResult? Function(MultiSelectIsNotEmptyFilter value)? multiSelectIsNotEmpty,
    TResult? Function(DateEqualsFilter value)? dateEquals,
    TResult? Function(DateBeforeFilter value)? dateBefore,
    TResult? Function(DateAfterFilter value)? dateAfter,
    TResult? Function(DateOnOrBeforeFilter value)? dateOnOrBefore,
    TResult? Function(DateOnOrAfterFilter value)? dateOnOrAfter,
    TResult? Function(DateIsEmptyFilter value)? dateIsEmpty,
    TResult? Function(DateIsNotEmptyFilter value)? dateIsNotEmpty,
    TResult? Function(DatePastWeekFilter value)? datePastWeek,
    TResult? Function(DatePastMonthFilter value)? datePastMonth,
    TResult? Function(DatePastYearFilter value)? datePastYear,
    TResult? Function(DateNextWeekFilter value)? dateNextWeek,
    TResult? Function(DateNextMonthFilter value)? dateNextMonth,
    TResult? Function(DateNextYearFilter value)? dateNextYear,
    TResult? Function(PeopleContainsFilter value)? peopleContains,
    TResult? Function(PeopleDoesNotContainFilter value)? peopleDoesNotContain,
    TResult? Function(PeopleIsEmptyFilter value)? peopleIsEmpty,
    TResult? Function(PeopleIsNotEmptyFilter value)? peopleIsNotEmpty,
    TResult? Function(FilesIsEmptyFilter value)? filesIsEmpty,
    TResult? Function(FilesIsNotEmptyFilter value)? filesIsNotEmpty,
    TResult? Function(RelationContainsFilter value)? relationContains,
    TResult? Function(RelationDoesNotContainFilter value)?
        relationDoesNotContain,
    TResult? Function(RelationIsEmptyFilter value)? relationIsEmpty,
    TResult? Function(RelationIsNotEmptyFilter value)? relationIsNotEmpty,
  }) {
    return textDoesNotEqual?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(TextEqualsFilter value)? textEquals,
    TResult Function(TextDoesNotEqualFilter value)? textDoesNotEqual,
    TResult Function(TextContainsFilter value)? textContains,
    TResult Function(TextDoesNotContainFilter value)? textDoesNotContain,
    TResult Function(TextStartsWithFilter value)? textStartsWith,
    TResult Function(TextEndsWithFilter value)? textEndsWith,
    TResult Function(TextIsEmptyFilter value)? textIsEmpty,
    TResult Function(TextIsNotEmptyFilter value)? textIsNotEmpty,
    TResult Function(NumberEqualsFilter value)? numberEquals,
    TResult Function(NumberDoesNotEqualFilter value)? numberDoesNotEqual,
    TResult Function(NumberGreaterThanFilter value)? numberGreaterThan,
    TResult Function(NumberLessThanFilter value)? numberLessThan,
    TResult Function(NumberGreaterThanOrEqualFilter value)?
        numberGreaterThanOrEqual,
    TResult Function(NumberLessThanOrEqualFilter value)? numberLessThanOrEqual,
    TResult Function(NumberIsEmptyFilter value)? numberIsEmpty,
    TResult Function(NumberIsNotEmptyFilter value)? numberIsNotEmpty,
    TResult Function(CheckboxEqualsFilter value)? checkboxEquals,
    TResult Function(SelectEqualsFilter value)? selectEquals,
    TResult Function(SelectDoesNotEqualFilter value)? selectDoesNotEqual,
    TResult Function(SelectIsEmptyFilter value)? selectIsEmpty,
    TResult Function(SelectIsNotEmptyFilter value)? selectIsNotEmpty,
    TResult Function(MultiSelectContainsFilter value)? multiSelectContains,
    TResult Function(MultiSelectDoesNotContainFilter value)?
        multiSelectDoesNotContain,
    TResult Function(MultiSelectIsEmptyFilter value)? multiSelectIsEmpty,
    TResult Function(MultiSelectIsNotEmptyFilter value)? multiSelectIsNotEmpty,
    TResult Function(DateEqualsFilter value)? dateEquals,
    TResult Function(DateBeforeFilter value)? dateBefore,
    TResult Function(DateAfterFilter value)? dateAfter,
    TResult Function(DateOnOrBeforeFilter value)? dateOnOrBefore,
    TResult Function(DateOnOrAfterFilter value)? dateOnOrAfter,
    TResult Function(DateIsEmptyFilter value)? dateIsEmpty,
    TResult Function(DateIsNotEmptyFilter value)? dateIsNotEmpty,
    TResult Function(DatePastWeekFilter value)? datePastWeek,
    TResult Function(DatePastMonthFilter value)? datePastMonth,
    TResult Function(DatePastYearFilter value)? datePastYear,
    TResult Function(DateNextWeekFilter value)? dateNextWeek,
    TResult Function(DateNextMonthFilter value)? dateNextMonth,
    TResult Function(DateNextYearFilter value)? dateNextYear,
    TResult Function(PeopleContainsFilter value)? peopleContains,
    TResult Function(PeopleDoesNotContainFilter value)? peopleDoesNotContain,
    TResult Function(PeopleIsEmptyFilter value)? peopleIsEmpty,
    TResult Function(PeopleIsNotEmptyFilter value)? peopleIsNotEmpty,
    TResult Function(FilesIsEmptyFilter value)? filesIsEmpty,
    TResult Function(FilesIsNotEmptyFilter value)? filesIsNotEmpty,
    TResult Function(RelationContainsFilter value)? relationContains,
    TResult Function(RelationDoesNotContainFilter value)?
        relationDoesNotContain,
    TResult Function(RelationIsEmptyFilter value)? relationIsEmpty,
    TResult Function(RelationIsNotEmptyFilter value)? relationIsNotEmpty,
    required TResult orElse(),
  }) {
    if (textDoesNotEqual != null) {
      return textDoesNotEqual(this);
    }
    return orElse();
  }
}

abstract class TextDoesNotEqualFilter extends PropertyFilter {
  const factory TextDoesNotEqualFilter(final String value) =
      _$TextDoesNotEqualFilterImpl;
  const TextDoesNotEqualFilter._() : super._();

  String get value;

  /// Create a copy of PropertyFilter
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  _$$TextDoesNotEqualFilterImplCopyWith<_$TextDoesNotEqualFilterImpl>
      get copyWith => throw _privateConstructorUsedError;
}

/// @nodoc
abstract class _$$TextContainsFilterImplCopyWith<$Res> {
  factory _$$TextContainsFilterImplCopyWith(_$TextContainsFilterImpl value,
          $Res Function(_$TextContainsFilterImpl) then) =
      __$$TextContainsFilterImplCopyWithImpl<$Res>;
  @useResult
  $Res call({String value});
}

/// @nodoc
class __$$TextContainsFilterImplCopyWithImpl<$Res>
    extends _$PropertyFilterCopyWithImpl<$Res, _$TextContainsFilterImpl>
    implements _$$TextContainsFilterImplCopyWith<$Res> {
  __$$TextContainsFilterImplCopyWithImpl(_$TextContainsFilterImpl _value,
      $Res Function(_$TextContainsFilterImpl) _then)
      : super(_value, _then);

  /// Create a copy of PropertyFilter
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? value = null,
  }) {
    return _then(_$TextContainsFilterImpl(
      null == value
          ? _value.value
          : value // ignore: cast_nullable_to_non_nullable
              as String,
    ));
  }
}

/// @nodoc

class _$TextContainsFilterImpl extends TextContainsFilter {
  const _$TextContainsFilterImpl(this.value) : super._();

  @override
  final String value;

  @override
  String toString() {
    return 'PropertyFilter.textContains(value: $value)';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$TextContainsFilterImpl &&
            (identical(other.value, value) || other.value == value));
  }

  @override
  int get hashCode => Object.hash(runtimeType, value);

  /// Create a copy of PropertyFilter
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  @pragma('vm:prefer-inline')
  _$$TextContainsFilterImplCopyWith<_$TextContainsFilterImpl> get copyWith =>
      __$$TextContainsFilterImplCopyWithImpl<_$TextContainsFilterImpl>(
          this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function(String value) textEquals,
    required TResult Function(String value) textDoesNotEqual,
    required TResult Function(String value) textContains,
    required TResult Function(String value) textDoesNotContain,
    required TResult Function(String value) textStartsWith,
    required TResult Function(String value) textEndsWith,
    required TResult Function() textIsEmpty,
    required TResult Function() textIsNotEmpty,
    required TResult Function(double value) numberEquals,
    required TResult Function(double value) numberDoesNotEqual,
    required TResult Function(double value) numberGreaterThan,
    required TResult Function(double value) numberLessThan,
    required TResult Function(double value) numberGreaterThanOrEqual,
    required TResult Function(double value) numberLessThanOrEqual,
    required TResult Function() numberIsEmpty,
    required TResult Function() numberIsNotEmpty,
    required TResult Function(bool value) checkboxEquals,
    required TResult Function(String value) selectEquals,
    required TResult Function(String value) selectDoesNotEqual,
    required TResult Function() selectIsEmpty,
    required TResult Function() selectIsNotEmpty,
    required TResult Function(String value) multiSelectContains,
    required TResult Function(String value) multiSelectDoesNotContain,
    required TResult Function() multiSelectIsEmpty,
    required TResult Function() multiSelectIsNotEmpty,
    required TResult Function(String date) dateEquals,
    required TResult Function(String date) dateBefore,
    required TResult Function(String date) dateAfter,
    required TResult Function(String date) dateOnOrBefore,
    required TResult Function(String date) dateOnOrAfter,
    required TResult Function() dateIsEmpty,
    required TResult Function() dateIsNotEmpty,
    required TResult Function() datePastWeek,
    required TResult Function() datePastMonth,
    required TResult Function() datePastYear,
    required TResult Function() dateNextWeek,
    required TResult Function() dateNextMonth,
    required TResult Function() dateNextYear,
    required TResult Function(String userId) peopleContains,
    required TResult Function(String userId) peopleDoesNotContain,
    required TResult Function() peopleIsEmpty,
    required TResult Function() peopleIsNotEmpty,
    required TResult Function() filesIsEmpty,
    required TResult Function() filesIsNotEmpty,
    required TResult Function(String pageId) relationContains,
    required TResult Function(String pageId) relationDoesNotContain,
    required TResult Function() relationIsEmpty,
    required TResult Function() relationIsNotEmpty,
  }) {
    return textContains(value);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function(String value)? textEquals,
    TResult? Function(String value)? textDoesNotEqual,
    TResult? Function(String value)? textContains,
    TResult? Function(String value)? textDoesNotContain,
    TResult? Function(String value)? textStartsWith,
    TResult? Function(String value)? textEndsWith,
    TResult? Function()? textIsEmpty,
    TResult? Function()? textIsNotEmpty,
    TResult? Function(double value)? numberEquals,
    TResult? Function(double value)? numberDoesNotEqual,
    TResult? Function(double value)? numberGreaterThan,
    TResult? Function(double value)? numberLessThan,
    TResult? Function(double value)? numberGreaterThanOrEqual,
    TResult? Function(double value)? numberLessThanOrEqual,
    TResult? Function()? numberIsEmpty,
    TResult? Function()? numberIsNotEmpty,
    TResult? Function(bool value)? checkboxEquals,
    TResult? Function(String value)? selectEquals,
    TResult? Function(String value)? selectDoesNotEqual,
    TResult? Function()? selectIsEmpty,
    TResult? Function()? selectIsNotEmpty,
    TResult? Function(String value)? multiSelectContains,
    TResult? Function(String value)? multiSelectDoesNotContain,
    TResult? Function()? multiSelectIsEmpty,
    TResult? Function()? multiSelectIsNotEmpty,
    TResult? Function(String date)? dateEquals,
    TResult? Function(String date)? dateBefore,
    TResult? Function(String date)? dateAfter,
    TResult? Function(String date)? dateOnOrBefore,
    TResult? Function(String date)? dateOnOrAfter,
    TResult? Function()? dateIsEmpty,
    TResult? Function()? dateIsNotEmpty,
    TResult? Function()? datePastWeek,
    TResult? Function()? datePastMonth,
    TResult? Function()? datePastYear,
    TResult? Function()? dateNextWeek,
    TResult? Function()? dateNextMonth,
    TResult? Function()? dateNextYear,
    TResult? Function(String userId)? peopleContains,
    TResult? Function(String userId)? peopleDoesNotContain,
    TResult? Function()? peopleIsEmpty,
    TResult? Function()? peopleIsNotEmpty,
    TResult? Function()? filesIsEmpty,
    TResult? Function()? filesIsNotEmpty,
    TResult? Function(String pageId)? relationContains,
    TResult? Function(String pageId)? relationDoesNotContain,
    TResult? Function()? relationIsEmpty,
    TResult? Function()? relationIsNotEmpty,
  }) {
    return textContains?.call(value);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function(String value)? textEquals,
    TResult Function(String value)? textDoesNotEqual,
    TResult Function(String value)? textContains,
    TResult Function(String value)? textDoesNotContain,
    TResult Function(String value)? textStartsWith,
    TResult Function(String value)? textEndsWith,
    TResult Function()? textIsEmpty,
    TResult Function()? textIsNotEmpty,
    TResult Function(double value)? numberEquals,
    TResult Function(double value)? numberDoesNotEqual,
    TResult Function(double value)? numberGreaterThan,
    TResult Function(double value)? numberLessThan,
    TResult Function(double value)? numberGreaterThanOrEqual,
    TResult Function(double value)? numberLessThanOrEqual,
    TResult Function()? numberIsEmpty,
    TResult Function()? numberIsNotEmpty,
    TResult Function(bool value)? checkboxEquals,
    TResult Function(String value)? selectEquals,
    TResult Function(String value)? selectDoesNotEqual,
    TResult Function()? selectIsEmpty,
    TResult Function()? selectIsNotEmpty,
    TResult Function(String value)? multiSelectContains,
    TResult Function(String value)? multiSelectDoesNotContain,
    TResult Function()? multiSelectIsEmpty,
    TResult Function()? multiSelectIsNotEmpty,
    TResult Function(String date)? dateEquals,
    TResult Function(String date)? dateBefore,
    TResult Function(String date)? dateAfter,
    TResult Function(String date)? dateOnOrBefore,
    TResult Function(String date)? dateOnOrAfter,
    TResult Function()? dateIsEmpty,
    TResult Function()? dateIsNotEmpty,
    TResult Function()? datePastWeek,
    TResult Function()? datePastMonth,
    TResult Function()? datePastYear,
    TResult Function()? dateNextWeek,
    TResult Function()? dateNextMonth,
    TResult Function()? dateNextYear,
    TResult Function(String userId)? peopleContains,
    TResult Function(String userId)? peopleDoesNotContain,
    TResult Function()? peopleIsEmpty,
    TResult Function()? peopleIsNotEmpty,
    TResult Function()? filesIsEmpty,
    TResult Function()? filesIsNotEmpty,
    TResult Function(String pageId)? relationContains,
    TResult Function(String pageId)? relationDoesNotContain,
    TResult Function()? relationIsEmpty,
    TResult Function()? relationIsNotEmpty,
    required TResult orElse(),
  }) {
    if (textContains != null) {
      return textContains(value);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(TextEqualsFilter value) textEquals,
    required TResult Function(TextDoesNotEqualFilter value) textDoesNotEqual,
    required TResult Function(TextContainsFilter value) textContains,
    required TResult Function(TextDoesNotContainFilter value)
        textDoesNotContain,
    required TResult Function(TextStartsWithFilter value) textStartsWith,
    required TResult Function(TextEndsWithFilter value) textEndsWith,
    required TResult Function(TextIsEmptyFilter value) textIsEmpty,
    required TResult Function(TextIsNotEmptyFilter value) textIsNotEmpty,
    required TResult Function(NumberEqualsFilter value) numberEquals,
    required TResult Function(NumberDoesNotEqualFilter value)
        numberDoesNotEqual,
    required TResult Function(NumberGreaterThanFilter value) numberGreaterThan,
    required TResult Function(NumberLessThanFilter value) numberLessThan,
    required TResult Function(NumberGreaterThanOrEqualFilter value)
        numberGreaterThanOrEqual,
    required TResult Function(NumberLessThanOrEqualFilter value)
        numberLessThanOrEqual,
    required TResult Function(NumberIsEmptyFilter value) numberIsEmpty,
    required TResult Function(NumberIsNotEmptyFilter value) numberIsNotEmpty,
    required TResult Function(CheckboxEqualsFilter value) checkboxEquals,
    required TResult Function(SelectEqualsFilter value) selectEquals,
    required TResult Function(SelectDoesNotEqualFilter value)
        selectDoesNotEqual,
    required TResult Function(SelectIsEmptyFilter value) selectIsEmpty,
    required TResult Function(SelectIsNotEmptyFilter value) selectIsNotEmpty,
    required TResult Function(MultiSelectContainsFilter value)
        multiSelectContains,
    required TResult Function(MultiSelectDoesNotContainFilter value)
        multiSelectDoesNotContain,
    required TResult Function(MultiSelectIsEmptyFilter value)
        multiSelectIsEmpty,
    required TResult Function(MultiSelectIsNotEmptyFilter value)
        multiSelectIsNotEmpty,
    required TResult Function(DateEqualsFilter value) dateEquals,
    required TResult Function(DateBeforeFilter value) dateBefore,
    required TResult Function(DateAfterFilter value) dateAfter,
    required TResult Function(DateOnOrBeforeFilter value) dateOnOrBefore,
    required TResult Function(DateOnOrAfterFilter value) dateOnOrAfter,
    required TResult Function(DateIsEmptyFilter value) dateIsEmpty,
    required TResult Function(DateIsNotEmptyFilter value) dateIsNotEmpty,
    required TResult Function(DatePastWeekFilter value) datePastWeek,
    required TResult Function(DatePastMonthFilter value) datePastMonth,
    required TResult Function(DatePastYearFilter value) datePastYear,
    required TResult Function(DateNextWeekFilter value) dateNextWeek,
    required TResult Function(DateNextMonthFilter value) dateNextMonth,
    required TResult Function(DateNextYearFilter value) dateNextYear,
    required TResult Function(PeopleContainsFilter value) peopleContains,
    required TResult Function(PeopleDoesNotContainFilter value)
        peopleDoesNotContain,
    required TResult Function(PeopleIsEmptyFilter value) peopleIsEmpty,
    required TResult Function(PeopleIsNotEmptyFilter value) peopleIsNotEmpty,
    required TResult Function(FilesIsEmptyFilter value) filesIsEmpty,
    required TResult Function(FilesIsNotEmptyFilter value) filesIsNotEmpty,
    required TResult Function(RelationContainsFilter value) relationContains,
    required TResult Function(RelationDoesNotContainFilter value)
        relationDoesNotContain,
    required TResult Function(RelationIsEmptyFilter value) relationIsEmpty,
    required TResult Function(RelationIsNotEmptyFilter value)
        relationIsNotEmpty,
  }) {
    return textContains(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(TextEqualsFilter value)? textEquals,
    TResult? Function(TextDoesNotEqualFilter value)? textDoesNotEqual,
    TResult? Function(TextContainsFilter value)? textContains,
    TResult? Function(TextDoesNotContainFilter value)? textDoesNotContain,
    TResult? Function(TextStartsWithFilter value)? textStartsWith,
    TResult? Function(TextEndsWithFilter value)? textEndsWith,
    TResult? Function(TextIsEmptyFilter value)? textIsEmpty,
    TResult? Function(TextIsNotEmptyFilter value)? textIsNotEmpty,
    TResult? Function(NumberEqualsFilter value)? numberEquals,
    TResult? Function(NumberDoesNotEqualFilter value)? numberDoesNotEqual,
    TResult? Function(NumberGreaterThanFilter value)? numberGreaterThan,
    TResult? Function(NumberLessThanFilter value)? numberLessThan,
    TResult? Function(NumberGreaterThanOrEqualFilter value)?
        numberGreaterThanOrEqual,
    TResult? Function(NumberLessThanOrEqualFilter value)? numberLessThanOrEqual,
    TResult? Function(NumberIsEmptyFilter value)? numberIsEmpty,
    TResult? Function(NumberIsNotEmptyFilter value)? numberIsNotEmpty,
    TResult? Function(CheckboxEqualsFilter value)? checkboxEquals,
    TResult? Function(SelectEqualsFilter value)? selectEquals,
    TResult? Function(SelectDoesNotEqualFilter value)? selectDoesNotEqual,
    TResult? Function(SelectIsEmptyFilter value)? selectIsEmpty,
    TResult? Function(SelectIsNotEmptyFilter value)? selectIsNotEmpty,
    TResult? Function(MultiSelectContainsFilter value)? multiSelectContains,
    TResult? Function(MultiSelectDoesNotContainFilter value)?
        multiSelectDoesNotContain,
    TResult? Function(MultiSelectIsEmptyFilter value)? multiSelectIsEmpty,
    TResult? Function(MultiSelectIsNotEmptyFilter value)? multiSelectIsNotEmpty,
    TResult? Function(DateEqualsFilter value)? dateEquals,
    TResult? Function(DateBeforeFilter value)? dateBefore,
    TResult? Function(DateAfterFilter value)? dateAfter,
    TResult? Function(DateOnOrBeforeFilter value)? dateOnOrBefore,
    TResult? Function(DateOnOrAfterFilter value)? dateOnOrAfter,
    TResult? Function(DateIsEmptyFilter value)? dateIsEmpty,
    TResult? Function(DateIsNotEmptyFilter value)? dateIsNotEmpty,
    TResult? Function(DatePastWeekFilter value)? datePastWeek,
    TResult? Function(DatePastMonthFilter value)? datePastMonth,
    TResult? Function(DatePastYearFilter value)? datePastYear,
    TResult? Function(DateNextWeekFilter value)? dateNextWeek,
    TResult? Function(DateNextMonthFilter value)? dateNextMonth,
    TResult? Function(DateNextYearFilter value)? dateNextYear,
    TResult? Function(PeopleContainsFilter value)? peopleContains,
    TResult? Function(PeopleDoesNotContainFilter value)? peopleDoesNotContain,
    TResult? Function(PeopleIsEmptyFilter value)? peopleIsEmpty,
    TResult? Function(PeopleIsNotEmptyFilter value)? peopleIsNotEmpty,
    TResult? Function(FilesIsEmptyFilter value)? filesIsEmpty,
    TResult? Function(FilesIsNotEmptyFilter value)? filesIsNotEmpty,
    TResult? Function(RelationContainsFilter value)? relationContains,
    TResult? Function(RelationDoesNotContainFilter value)?
        relationDoesNotContain,
    TResult? Function(RelationIsEmptyFilter value)? relationIsEmpty,
    TResult? Function(RelationIsNotEmptyFilter value)? relationIsNotEmpty,
  }) {
    return textContains?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(TextEqualsFilter value)? textEquals,
    TResult Function(TextDoesNotEqualFilter value)? textDoesNotEqual,
    TResult Function(TextContainsFilter value)? textContains,
    TResult Function(TextDoesNotContainFilter value)? textDoesNotContain,
    TResult Function(TextStartsWithFilter value)? textStartsWith,
    TResult Function(TextEndsWithFilter value)? textEndsWith,
    TResult Function(TextIsEmptyFilter value)? textIsEmpty,
    TResult Function(TextIsNotEmptyFilter value)? textIsNotEmpty,
    TResult Function(NumberEqualsFilter value)? numberEquals,
    TResult Function(NumberDoesNotEqualFilter value)? numberDoesNotEqual,
    TResult Function(NumberGreaterThanFilter value)? numberGreaterThan,
    TResult Function(NumberLessThanFilter value)? numberLessThan,
    TResult Function(NumberGreaterThanOrEqualFilter value)?
        numberGreaterThanOrEqual,
    TResult Function(NumberLessThanOrEqualFilter value)? numberLessThanOrEqual,
    TResult Function(NumberIsEmptyFilter value)? numberIsEmpty,
    TResult Function(NumberIsNotEmptyFilter value)? numberIsNotEmpty,
    TResult Function(CheckboxEqualsFilter value)? checkboxEquals,
    TResult Function(SelectEqualsFilter value)? selectEquals,
    TResult Function(SelectDoesNotEqualFilter value)? selectDoesNotEqual,
    TResult Function(SelectIsEmptyFilter value)? selectIsEmpty,
    TResult Function(SelectIsNotEmptyFilter value)? selectIsNotEmpty,
    TResult Function(MultiSelectContainsFilter value)? multiSelectContains,
    TResult Function(MultiSelectDoesNotContainFilter value)?
        multiSelectDoesNotContain,
    TResult Function(MultiSelectIsEmptyFilter value)? multiSelectIsEmpty,
    TResult Function(MultiSelectIsNotEmptyFilter value)? multiSelectIsNotEmpty,
    TResult Function(DateEqualsFilter value)? dateEquals,
    TResult Function(DateBeforeFilter value)? dateBefore,
    TResult Function(DateAfterFilter value)? dateAfter,
    TResult Function(DateOnOrBeforeFilter value)? dateOnOrBefore,
    TResult Function(DateOnOrAfterFilter value)? dateOnOrAfter,
    TResult Function(DateIsEmptyFilter value)? dateIsEmpty,
    TResult Function(DateIsNotEmptyFilter value)? dateIsNotEmpty,
    TResult Function(DatePastWeekFilter value)? datePastWeek,
    TResult Function(DatePastMonthFilter value)? datePastMonth,
    TResult Function(DatePastYearFilter value)? datePastYear,
    TResult Function(DateNextWeekFilter value)? dateNextWeek,
    TResult Function(DateNextMonthFilter value)? dateNextMonth,
    TResult Function(DateNextYearFilter value)? dateNextYear,
    TResult Function(PeopleContainsFilter value)? peopleContains,
    TResult Function(PeopleDoesNotContainFilter value)? peopleDoesNotContain,
    TResult Function(PeopleIsEmptyFilter value)? peopleIsEmpty,
    TResult Function(PeopleIsNotEmptyFilter value)? peopleIsNotEmpty,
    TResult Function(FilesIsEmptyFilter value)? filesIsEmpty,
    TResult Function(FilesIsNotEmptyFilter value)? filesIsNotEmpty,
    TResult Function(RelationContainsFilter value)? relationContains,
    TResult Function(RelationDoesNotContainFilter value)?
        relationDoesNotContain,
    TResult Function(RelationIsEmptyFilter value)? relationIsEmpty,
    TResult Function(RelationIsNotEmptyFilter value)? relationIsNotEmpty,
    required TResult orElse(),
  }) {
    if (textContains != null) {
      return textContains(this);
    }
    return orElse();
  }
}

abstract class TextContainsFilter extends PropertyFilter {
  const factory TextContainsFilter(final String value) =
      _$TextContainsFilterImpl;
  const TextContainsFilter._() : super._();

  String get value;

  /// Create a copy of PropertyFilter
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  _$$TextContainsFilterImplCopyWith<_$TextContainsFilterImpl> get copyWith =>
      throw _privateConstructorUsedError;
}

/// @nodoc
abstract class _$$TextDoesNotContainFilterImplCopyWith<$Res> {
  factory _$$TextDoesNotContainFilterImplCopyWith(
          _$TextDoesNotContainFilterImpl value,
          $Res Function(_$TextDoesNotContainFilterImpl) then) =
      __$$TextDoesNotContainFilterImplCopyWithImpl<$Res>;
  @useResult
  $Res call({String value});
}

/// @nodoc
class __$$TextDoesNotContainFilterImplCopyWithImpl<$Res>
    extends _$PropertyFilterCopyWithImpl<$Res, _$TextDoesNotContainFilterImpl>
    implements _$$TextDoesNotContainFilterImplCopyWith<$Res> {
  __$$TextDoesNotContainFilterImplCopyWithImpl(
      _$TextDoesNotContainFilterImpl _value,
      $Res Function(_$TextDoesNotContainFilterImpl) _then)
      : super(_value, _then);

  /// Create a copy of PropertyFilter
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? value = null,
  }) {
    return _then(_$TextDoesNotContainFilterImpl(
      null == value
          ? _value.value
          : value // ignore: cast_nullable_to_non_nullable
              as String,
    ));
  }
}

/// @nodoc

class _$TextDoesNotContainFilterImpl extends TextDoesNotContainFilter {
  const _$TextDoesNotContainFilterImpl(this.value) : super._();

  @override
  final String value;

  @override
  String toString() {
    return 'PropertyFilter.textDoesNotContain(value: $value)';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$TextDoesNotContainFilterImpl &&
            (identical(other.value, value) || other.value == value));
  }

  @override
  int get hashCode => Object.hash(runtimeType, value);

  /// Create a copy of PropertyFilter
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  @pragma('vm:prefer-inline')
  _$$TextDoesNotContainFilterImplCopyWith<_$TextDoesNotContainFilterImpl>
      get copyWith => __$$TextDoesNotContainFilterImplCopyWithImpl<
          _$TextDoesNotContainFilterImpl>(this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function(String value) textEquals,
    required TResult Function(String value) textDoesNotEqual,
    required TResult Function(String value) textContains,
    required TResult Function(String value) textDoesNotContain,
    required TResult Function(String value) textStartsWith,
    required TResult Function(String value) textEndsWith,
    required TResult Function() textIsEmpty,
    required TResult Function() textIsNotEmpty,
    required TResult Function(double value) numberEquals,
    required TResult Function(double value) numberDoesNotEqual,
    required TResult Function(double value) numberGreaterThan,
    required TResult Function(double value) numberLessThan,
    required TResult Function(double value) numberGreaterThanOrEqual,
    required TResult Function(double value) numberLessThanOrEqual,
    required TResult Function() numberIsEmpty,
    required TResult Function() numberIsNotEmpty,
    required TResult Function(bool value) checkboxEquals,
    required TResult Function(String value) selectEquals,
    required TResult Function(String value) selectDoesNotEqual,
    required TResult Function() selectIsEmpty,
    required TResult Function() selectIsNotEmpty,
    required TResult Function(String value) multiSelectContains,
    required TResult Function(String value) multiSelectDoesNotContain,
    required TResult Function() multiSelectIsEmpty,
    required TResult Function() multiSelectIsNotEmpty,
    required TResult Function(String date) dateEquals,
    required TResult Function(String date) dateBefore,
    required TResult Function(String date) dateAfter,
    required TResult Function(String date) dateOnOrBefore,
    required TResult Function(String date) dateOnOrAfter,
    required TResult Function() dateIsEmpty,
    required TResult Function() dateIsNotEmpty,
    required TResult Function() datePastWeek,
    required TResult Function() datePastMonth,
    required TResult Function() datePastYear,
    required TResult Function() dateNextWeek,
    required TResult Function() dateNextMonth,
    required TResult Function() dateNextYear,
    required TResult Function(String userId) peopleContains,
    required TResult Function(String userId) peopleDoesNotContain,
    required TResult Function() peopleIsEmpty,
    required TResult Function() peopleIsNotEmpty,
    required TResult Function() filesIsEmpty,
    required TResult Function() filesIsNotEmpty,
    required TResult Function(String pageId) relationContains,
    required TResult Function(String pageId) relationDoesNotContain,
    required TResult Function() relationIsEmpty,
    required TResult Function() relationIsNotEmpty,
  }) {
    return textDoesNotContain(value);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function(String value)? textEquals,
    TResult? Function(String value)? textDoesNotEqual,
    TResult? Function(String value)? textContains,
    TResult? Function(String value)? textDoesNotContain,
    TResult? Function(String value)? textStartsWith,
    TResult? Function(String value)? textEndsWith,
    TResult? Function()? textIsEmpty,
    TResult? Function()? textIsNotEmpty,
    TResult? Function(double value)? numberEquals,
    TResult? Function(double value)? numberDoesNotEqual,
    TResult? Function(double value)? numberGreaterThan,
    TResult? Function(double value)? numberLessThan,
    TResult? Function(double value)? numberGreaterThanOrEqual,
    TResult? Function(double value)? numberLessThanOrEqual,
    TResult? Function()? numberIsEmpty,
    TResult? Function()? numberIsNotEmpty,
    TResult? Function(bool value)? checkboxEquals,
    TResult? Function(String value)? selectEquals,
    TResult? Function(String value)? selectDoesNotEqual,
    TResult? Function()? selectIsEmpty,
    TResult? Function()? selectIsNotEmpty,
    TResult? Function(String value)? multiSelectContains,
    TResult? Function(String value)? multiSelectDoesNotContain,
    TResult? Function()? multiSelectIsEmpty,
    TResult? Function()? multiSelectIsNotEmpty,
    TResult? Function(String date)? dateEquals,
    TResult? Function(String date)? dateBefore,
    TResult? Function(String date)? dateAfter,
    TResult? Function(String date)? dateOnOrBefore,
    TResult? Function(String date)? dateOnOrAfter,
    TResult? Function()? dateIsEmpty,
    TResult? Function()? dateIsNotEmpty,
    TResult? Function()? datePastWeek,
    TResult? Function()? datePastMonth,
    TResult? Function()? datePastYear,
    TResult? Function()? dateNextWeek,
    TResult? Function()? dateNextMonth,
    TResult? Function()? dateNextYear,
    TResult? Function(String userId)? peopleContains,
    TResult? Function(String userId)? peopleDoesNotContain,
    TResult? Function()? peopleIsEmpty,
    TResult? Function()? peopleIsNotEmpty,
    TResult? Function()? filesIsEmpty,
    TResult? Function()? filesIsNotEmpty,
    TResult? Function(String pageId)? relationContains,
    TResult? Function(String pageId)? relationDoesNotContain,
    TResult? Function()? relationIsEmpty,
    TResult? Function()? relationIsNotEmpty,
  }) {
    return textDoesNotContain?.call(value);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function(String value)? textEquals,
    TResult Function(String value)? textDoesNotEqual,
    TResult Function(String value)? textContains,
    TResult Function(String value)? textDoesNotContain,
    TResult Function(String value)? textStartsWith,
    TResult Function(String value)? textEndsWith,
    TResult Function()? textIsEmpty,
    TResult Function()? textIsNotEmpty,
    TResult Function(double value)? numberEquals,
    TResult Function(double value)? numberDoesNotEqual,
    TResult Function(double value)? numberGreaterThan,
    TResult Function(double value)? numberLessThan,
    TResult Function(double value)? numberGreaterThanOrEqual,
    TResult Function(double value)? numberLessThanOrEqual,
    TResult Function()? numberIsEmpty,
    TResult Function()? numberIsNotEmpty,
    TResult Function(bool value)? checkboxEquals,
    TResult Function(String value)? selectEquals,
    TResult Function(String value)? selectDoesNotEqual,
    TResult Function()? selectIsEmpty,
    TResult Function()? selectIsNotEmpty,
    TResult Function(String value)? multiSelectContains,
    TResult Function(String value)? multiSelectDoesNotContain,
    TResult Function()? multiSelectIsEmpty,
    TResult Function()? multiSelectIsNotEmpty,
    TResult Function(String date)? dateEquals,
    TResult Function(String date)? dateBefore,
    TResult Function(String date)? dateAfter,
    TResult Function(String date)? dateOnOrBefore,
    TResult Function(String date)? dateOnOrAfter,
    TResult Function()? dateIsEmpty,
    TResult Function()? dateIsNotEmpty,
    TResult Function()? datePastWeek,
    TResult Function()? datePastMonth,
    TResult Function()? datePastYear,
    TResult Function()? dateNextWeek,
    TResult Function()? dateNextMonth,
    TResult Function()? dateNextYear,
    TResult Function(String userId)? peopleContains,
    TResult Function(String userId)? peopleDoesNotContain,
    TResult Function()? peopleIsEmpty,
    TResult Function()? peopleIsNotEmpty,
    TResult Function()? filesIsEmpty,
    TResult Function()? filesIsNotEmpty,
    TResult Function(String pageId)? relationContains,
    TResult Function(String pageId)? relationDoesNotContain,
    TResult Function()? relationIsEmpty,
    TResult Function()? relationIsNotEmpty,
    required TResult orElse(),
  }) {
    if (textDoesNotContain != null) {
      return textDoesNotContain(value);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(TextEqualsFilter value) textEquals,
    required TResult Function(TextDoesNotEqualFilter value) textDoesNotEqual,
    required TResult Function(TextContainsFilter value) textContains,
    required TResult Function(TextDoesNotContainFilter value)
        textDoesNotContain,
    required TResult Function(TextStartsWithFilter value) textStartsWith,
    required TResult Function(TextEndsWithFilter value) textEndsWith,
    required TResult Function(TextIsEmptyFilter value) textIsEmpty,
    required TResult Function(TextIsNotEmptyFilter value) textIsNotEmpty,
    required TResult Function(NumberEqualsFilter value) numberEquals,
    required TResult Function(NumberDoesNotEqualFilter value)
        numberDoesNotEqual,
    required TResult Function(NumberGreaterThanFilter value) numberGreaterThan,
    required TResult Function(NumberLessThanFilter value) numberLessThan,
    required TResult Function(NumberGreaterThanOrEqualFilter value)
        numberGreaterThanOrEqual,
    required TResult Function(NumberLessThanOrEqualFilter value)
        numberLessThanOrEqual,
    required TResult Function(NumberIsEmptyFilter value) numberIsEmpty,
    required TResult Function(NumberIsNotEmptyFilter value) numberIsNotEmpty,
    required TResult Function(CheckboxEqualsFilter value) checkboxEquals,
    required TResult Function(SelectEqualsFilter value) selectEquals,
    required TResult Function(SelectDoesNotEqualFilter value)
        selectDoesNotEqual,
    required TResult Function(SelectIsEmptyFilter value) selectIsEmpty,
    required TResult Function(SelectIsNotEmptyFilter value) selectIsNotEmpty,
    required TResult Function(MultiSelectContainsFilter value)
        multiSelectContains,
    required TResult Function(MultiSelectDoesNotContainFilter value)
        multiSelectDoesNotContain,
    required TResult Function(MultiSelectIsEmptyFilter value)
        multiSelectIsEmpty,
    required TResult Function(MultiSelectIsNotEmptyFilter value)
        multiSelectIsNotEmpty,
    required TResult Function(DateEqualsFilter value) dateEquals,
    required TResult Function(DateBeforeFilter value) dateBefore,
    required TResult Function(DateAfterFilter value) dateAfter,
    required TResult Function(DateOnOrBeforeFilter value) dateOnOrBefore,
    required TResult Function(DateOnOrAfterFilter value) dateOnOrAfter,
    required TResult Function(DateIsEmptyFilter value) dateIsEmpty,
    required TResult Function(DateIsNotEmptyFilter value) dateIsNotEmpty,
    required TResult Function(DatePastWeekFilter value) datePastWeek,
    required TResult Function(DatePastMonthFilter value) datePastMonth,
    required TResult Function(DatePastYearFilter value) datePastYear,
    required TResult Function(DateNextWeekFilter value) dateNextWeek,
    required TResult Function(DateNextMonthFilter value) dateNextMonth,
    required TResult Function(DateNextYearFilter value) dateNextYear,
    required TResult Function(PeopleContainsFilter value) peopleContains,
    required TResult Function(PeopleDoesNotContainFilter value)
        peopleDoesNotContain,
    required TResult Function(PeopleIsEmptyFilter value) peopleIsEmpty,
    required TResult Function(PeopleIsNotEmptyFilter value) peopleIsNotEmpty,
    required TResult Function(FilesIsEmptyFilter value) filesIsEmpty,
    required TResult Function(FilesIsNotEmptyFilter value) filesIsNotEmpty,
    required TResult Function(RelationContainsFilter value) relationContains,
    required TResult Function(RelationDoesNotContainFilter value)
        relationDoesNotContain,
    required TResult Function(RelationIsEmptyFilter value) relationIsEmpty,
    required TResult Function(RelationIsNotEmptyFilter value)
        relationIsNotEmpty,
  }) {
    return textDoesNotContain(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(TextEqualsFilter value)? textEquals,
    TResult? Function(TextDoesNotEqualFilter value)? textDoesNotEqual,
    TResult? Function(TextContainsFilter value)? textContains,
    TResult? Function(TextDoesNotContainFilter value)? textDoesNotContain,
    TResult? Function(TextStartsWithFilter value)? textStartsWith,
    TResult? Function(TextEndsWithFilter value)? textEndsWith,
    TResult? Function(TextIsEmptyFilter value)? textIsEmpty,
    TResult? Function(TextIsNotEmptyFilter value)? textIsNotEmpty,
    TResult? Function(NumberEqualsFilter value)? numberEquals,
    TResult? Function(NumberDoesNotEqualFilter value)? numberDoesNotEqual,
    TResult? Function(NumberGreaterThanFilter value)? numberGreaterThan,
    TResult? Function(NumberLessThanFilter value)? numberLessThan,
    TResult? Function(NumberGreaterThanOrEqualFilter value)?
        numberGreaterThanOrEqual,
    TResult? Function(NumberLessThanOrEqualFilter value)? numberLessThanOrEqual,
    TResult? Function(NumberIsEmptyFilter value)? numberIsEmpty,
    TResult? Function(NumberIsNotEmptyFilter value)? numberIsNotEmpty,
    TResult? Function(CheckboxEqualsFilter value)? checkboxEquals,
    TResult? Function(SelectEqualsFilter value)? selectEquals,
    TResult? Function(SelectDoesNotEqualFilter value)? selectDoesNotEqual,
    TResult? Function(SelectIsEmptyFilter value)? selectIsEmpty,
    TResult? Function(SelectIsNotEmptyFilter value)? selectIsNotEmpty,
    TResult? Function(MultiSelectContainsFilter value)? multiSelectContains,
    TResult? Function(MultiSelectDoesNotContainFilter value)?
        multiSelectDoesNotContain,
    TResult? Function(MultiSelectIsEmptyFilter value)? multiSelectIsEmpty,
    TResult? Function(MultiSelectIsNotEmptyFilter value)? multiSelectIsNotEmpty,
    TResult? Function(DateEqualsFilter value)? dateEquals,
    TResult? Function(DateBeforeFilter value)? dateBefore,
    TResult? Function(DateAfterFilter value)? dateAfter,
    TResult? Function(DateOnOrBeforeFilter value)? dateOnOrBefore,
    TResult? Function(DateOnOrAfterFilter value)? dateOnOrAfter,
    TResult? Function(DateIsEmptyFilter value)? dateIsEmpty,
    TResult? Function(DateIsNotEmptyFilter value)? dateIsNotEmpty,
    TResult? Function(DatePastWeekFilter value)? datePastWeek,
    TResult? Function(DatePastMonthFilter value)? datePastMonth,
    TResult? Function(DatePastYearFilter value)? datePastYear,
    TResult? Function(DateNextWeekFilter value)? dateNextWeek,
    TResult? Function(DateNextMonthFilter value)? dateNextMonth,
    TResult? Function(DateNextYearFilter value)? dateNextYear,
    TResult? Function(PeopleContainsFilter value)? peopleContains,
    TResult? Function(PeopleDoesNotContainFilter value)? peopleDoesNotContain,
    TResult? Function(PeopleIsEmptyFilter value)? peopleIsEmpty,
    TResult? Function(PeopleIsNotEmptyFilter value)? peopleIsNotEmpty,
    TResult? Function(FilesIsEmptyFilter value)? filesIsEmpty,
    TResult? Function(FilesIsNotEmptyFilter value)? filesIsNotEmpty,
    TResult? Function(RelationContainsFilter value)? relationContains,
    TResult? Function(RelationDoesNotContainFilter value)?
        relationDoesNotContain,
    TResult? Function(RelationIsEmptyFilter value)? relationIsEmpty,
    TResult? Function(RelationIsNotEmptyFilter value)? relationIsNotEmpty,
  }) {
    return textDoesNotContain?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(TextEqualsFilter value)? textEquals,
    TResult Function(TextDoesNotEqualFilter value)? textDoesNotEqual,
    TResult Function(TextContainsFilter value)? textContains,
    TResult Function(TextDoesNotContainFilter value)? textDoesNotContain,
    TResult Function(TextStartsWithFilter value)? textStartsWith,
    TResult Function(TextEndsWithFilter value)? textEndsWith,
    TResult Function(TextIsEmptyFilter value)? textIsEmpty,
    TResult Function(TextIsNotEmptyFilter value)? textIsNotEmpty,
    TResult Function(NumberEqualsFilter value)? numberEquals,
    TResult Function(NumberDoesNotEqualFilter value)? numberDoesNotEqual,
    TResult Function(NumberGreaterThanFilter value)? numberGreaterThan,
    TResult Function(NumberLessThanFilter value)? numberLessThan,
    TResult Function(NumberGreaterThanOrEqualFilter value)?
        numberGreaterThanOrEqual,
    TResult Function(NumberLessThanOrEqualFilter value)? numberLessThanOrEqual,
    TResult Function(NumberIsEmptyFilter value)? numberIsEmpty,
    TResult Function(NumberIsNotEmptyFilter value)? numberIsNotEmpty,
    TResult Function(CheckboxEqualsFilter value)? checkboxEquals,
    TResult Function(SelectEqualsFilter value)? selectEquals,
    TResult Function(SelectDoesNotEqualFilter value)? selectDoesNotEqual,
    TResult Function(SelectIsEmptyFilter value)? selectIsEmpty,
    TResult Function(SelectIsNotEmptyFilter value)? selectIsNotEmpty,
    TResult Function(MultiSelectContainsFilter value)? multiSelectContains,
    TResult Function(MultiSelectDoesNotContainFilter value)?
        multiSelectDoesNotContain,
    TResult Function(MultiSelectIsEmptyFilter value)? multiSelectIsEmpty,
    TResult Function(MultiSelectIsNotEmptyFilter value)? multiSelectIsNotEmpty,
    TResult Function(DateEqualsFilter value)? dateEquals,
    TResult Function(DateBeforeFilter value)? dateBefore,
    TResult Function(DateAfterFilter value)? dateAfter,
    TResult Function(DateOnOrBeforeFilter value)? dateOnOrBefore,
    TResult Function(DateOnOrAfterFilter value)? dateOnOrAfter,
    TResult Function(DateIsEmptyFilter value)? dateIsEmpty,
    TResult Function(DateIsNotEmptyFilter value)? dateIsNotEmpty,
    TResult Function(DatePastWeekFilter value)? datePastWeek,
    TResult Function(DatePastMonthFilter value)? datePastMonth,
    TResult Function(DatePastYearFilter value)? datePastYear,
    TResult Function(DateNextWeekFilter value)? dateNextWeek,
    TResult Function(DateNextMonthFilter value)? dateNextMonth,
    TResult Function(DateNextYearFilter value)? dateNextYear,
    TResult Function(PeopleContainsFilter value)? peopleContains,
    TResult Function(PeopleDoesNotContainFilter value)? peopleDoesNotContain,
    TResult Function(PeopleIsEmptyFilter value)? peopleIsEmpty,
    TResult Function(PeopleIsNotEmptyFilter value)? peopleIsNotEmpty,
    TResult Function(FilesIsEmptyFilter value)? filesIsEmpty,
    TResult Function(FilesIsNotEmptyFilter value)? filesIsNotEmpty,
    TResult Function(RelationContainsFilter value)? relationContains,
    TResult Function(RelationDoesNotContainFilter value)?
        relationDoesNotContain,
    TResult Function(RelationIsEmptyFilter value)? relationIsEmpty,
    TResult Function(RelationIsNotEmptyFilter value)? relationIsNotEmpty,
    required TResult orElse(),
  }) {
    if (textDoesNotContain != null) {
      return textDoesNotContain(this);
    }
    return orElse();
  }
}

abstract class TextDoesNotContainFilter extends PropertyFilter {
  const factory TextDoesNotContainFilter(final String value) =
      _$TextDoesNotContainFilterImpl;
  const TextDoesNotContainFilter._() : super._();

  String get value;

  /// Create a copy of PropertyFilter
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  _$$TextDoesNotContainFilterImplCopyWith<_$TextDoesNotContainFilterImpl>
      get copyWith => throw _privateConstructorUsedError;
}

/// @nodoc
abstract class _$$TextStartsWithFilterImplCopyWith<$Res> {
  factory _$$TextStartsWithFilterImplCopyWith(_$TextStartsWithFilterImpl value,
          $Res Function(_$TextStartsWithFilterImpl) then) =
      __$$TextStartsWithFilterImplCopyWithImpl<$Res>;
  @useResult
  $Res call({String value});
}

/// @nodoc
class __$$TextStartsWithFilterImplCopyWithImpl<$Res>
    extends _$PropertyFilterCopyWithImpl<$Res, _$TextStartsWithFilterImpl>
    implements _$$TextStartsWithFilterImplCopyWith<$Res> {
  __$$TextStartsWithFilterImplCopyWithImpl(_$TextStartsWithFilterImpl _value,
      $Res Function(_$TextStartsWithFilterImpl) _then)
      : super(_value, _then);

  /// Create a copy of PropertyFilter
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? value = null,
  }) {
    return _then(_$TextStartsWithFilterImpl(
      null == value
          ? _value.value
          : value // ignore: cast_nullable_to_non_nullable
              as String,
    ));
  }
}

/// @nodoc

class _$TextStartsWithFilterImpl extends TextStartsWithFilter {
  const _$TextStartsWithFilterImpl(this.value) : super._();

  @override
  final String value;

  @override
  String toString() {
    return 'PropertyFilter.textStartsWith(value: $value)';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$TextStartsWithFilterImpl &&
            (identical(other.value, value) || other.value == value));
  }

  @override
  int get hashCode => Object.hash(runtimeType, value);

  /// Create a copy of PropertyFilter
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  @pragma('vm:prefer-inline')
  _$$TextStartsWithFilterImplCopyWith<_$TextStartsWithFilterImpl>
      get copyWith =>
          __$$TextStartsWithFilterImplCopyWithImpl<_$TextStartsWithFilterImpl>(
              this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function(String value) textEquals,
    required TResult Function(String value) textDoesNotEqual,
    required TResult Function(String value) textContains,
    required TResult Function(String value) textDoesNotContain,
    required TResult Function(String value) textStartsWith,
    required TResult Function(String value) textEndsWith,
    required TResult Function() textIsEmpty,
    required TResult Function() textIsNotEmpty,
    required TResult Function(double value) numberEquals,
    required TResult Function(double value) numberDoesNotEqual,
    required TResult Function(double value) numberGreaterThan,
    required TResult Function(double value) numberLessThan,
    required TResult Function(double value) numberGreaterThanOrEqual,
    required TResult Function(double value) numberLessThanOrEqual,
    required TResult Function() numberIsEmpty,
    required TResult Function() numberIsNotEmpty,
    required TResult Function(bool value) checkboxEquals,
    required TResult Function(String value) selectEquals,
    required TResult Function(String value) selectDoesNotEqual,
    required TResult Function() selectIsEmpty,
    required TResult Function() selectIsNotEmpty,
    required TResult Function(String value) multiSelectContains,
    required TResult Function(String value) multiSelectDoesNotContain,
    required TResult Function() multiSelectIsEmpty,
    required TResult Function() multiSelectIsNotEmpty,
    required TResult Function(String date) dateEquals,
    required TResult Function(String date) dateBefore,
    required TResult Function(String date) dateAfter,
    required TResult Function(String date) dateOnOrBefore,
    required TResult Function(String date) dateOnOrAfter,
    required TResult Function() dateIsEmpty,
    required TResult Function() dateIsNotEmpty,
    required TResult Function() datePastWeek,
    required TResult Function() datePastMonth,
    required TResult Function() datePastYear,
    required TResult Function() dateNextWeek,
    required TResult Function() dateNextMonth,
    required TResult Function() dateNextYear,
    required TResult Function(String userId) peopleContains,
    required TResult Function(String userId) peopleDoesNotContain,
    required TResult Function() peopleIsEmpty,
    required TResult Function() peopleIsNotEmpty,
    required TResult Function() filesIsEmpty,
    required TResult Function() filesIsNotEmpty,
    required TResult Function(String pageId) relationContains,
    required TResult Function(String pageId) relationDoesNotContain,
    required TResult Function() relationIsEmpty,
    required TResult Function() relationIsNotEmpty,
  }) {
    return textStartsWith(value);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function(String value)? textEquals,
    TResult? Function(String value)? textDoesNotEqual,
    TResult? Function(String value)? textContains,
    TResult? Function(String value)? textDoesNotContain,
    TResult? Function(String value)? textStartsWith,
    TResult? Function(String value)? textEndsWith,
    TResult? Function()? textIsEmpty,
    TResult? Function()? textIsNotEmpty,
    TResult? Function(double value)? numberEquals,
    TResult? Function(double value)? numberDoesNotEqual,
    TResult? Function(double value)? numberGreaterThan,
    TResult? Function(double value)? numberLessThan,
    TResult? Function(double value)? numberGreaterThanOrEqual,
    TResult? Function(double value)? numberLessThanOrEqual,
    TResult? Function()? numberIsEmpty,
    TResult? Function()? numberIsNotEmpty,
    TResult? Function(bool value)? checkboxEquals,
    TResult? Function(String value)? selectEquals,
    TResult? Function(String value)? selectDoesNotEqual,
    TResult? Function()? selectIsEmpty,
    TResult? Function()? selectIsNotEmpty,
    TResult? Function(String value)? multiSelectContains,
    TResult? Function(String value)? multiSelectDoesNotContain,
    TResult? Function()? multiSelectIsEmpty,
    TResult? Function()? multiSelectIsNotEmpty,
    TResult? Function(String date)? dateEquals,
    TResult? Function(String date)? dateBefore,
    TResult? Function(String date)? dateAfter,
    TResult? Function(String date)? dateOnOrBefore,
    TResult? Function(String date)? dateOnOrAfter,
    TResult? Function()? dateIsEmpty,
    TResult? Function()? dateIsNotEmpty,
    TResult? Function()? datePastWeek,
    TResult? Function()? datePastMonth,
    TResult? Function()? datePastYear,
    TResult? Function()? dateNextWeek,
    TResult? Function()? dateNextMonth,
    TResult? Function()? dateNextYear,
    TResult? Function(String userId)? peopleContains,
    TResult? Function(String userId)? peopleDoesNotContain,
    TResult? Function()? peopleIsEmpty,
    TResult? Function()? peopleIsNotEmpty,
    TResult? Function()? filesIsEmpty,
    TResult? Function()? filesIsNotEmpty,
    TResult? Function(String pageId)? relationContains,
    TResult? Function(String pageId)? relationDoesNotContain,
    TResult? Function()? relationIsEmpty,
    TResult? Function()? relationIsNotEmpty,
  }) {
    return textStartsWith?.call(value);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function(String value)? textEquals,
    TResult Function(String value)? textDoesNotEqual,
    TResult Function(String value)? textContains,
    TResult Function(String value)? textDoesNotContain,
    TResult Function(String value)? textStartsWith,
    TResult Function(String value)? textEndsWith,
    TResult Function()? textIsEmpty,
    TResult Function()? textIsNotEmpty,
    TResult Function(double value)? numberEquals,
    TResult Function(double value)? numberDoesNotEqual,
    TResult Function(double value)? numberGreaterThan,
    TResult Function(double value)? numberLessThan,
    TResult Function(double value)? numberGreaterThanOrEqual,
    TResult Function(double value)? numberLessThanOrEqual,
    TResult Function()? numberIsEmpty,
    TResult Function()? numberIsNotEmpty,
    TResult Function(bool value)? checkboxEquals,
    TResult Function(String value)? selectEquals,
    TResult Function(String value)? selectDoesNotEqual,
    TResult Function()? selectIsEmpty,
    TResult Function()? selectIsNotEmpty,
    TResult Function(String value)? multiSelectContains,
    TResult Function(String value)? multiSelectDoesNotContain,
    TResult Function()? multiSelectIsEmpty,
    TResult Function()? multiSelectIsNotEmpty,
    TResult Function(String date)? dateEquals,
    TResult Function(String date)? dateBefore,
    TResult Function(String date)? dateAfter,
    TResult Function(String date)? dateOnOrBefore,
    TResult Function(String date)? dateOnOrAfter,
    TResult Function()? dateIsEmpty,
    TResult Function()? dateIsNotEmpty,
    TResult Function()? datePastWeek,
    TResult Function()? datePastMonth,
    TResult Function()? datePastYear,
    TResult Function()? dateNextWeek,
    TResult Function()? dateNextMonth,
    TResult Function()? dateNextYear,
    TResult Function(String userId)? peopleContains,
    TResult Function(String userId)? peopleDoesNotContain,
    TResult Function()? peopleIsEmpty,
    TResult Function()? peopleIsNotEmpty,
    TResult Function()? filesIsEmpty,
    TResult Function()? filesIsNotEmpty,
    TResult Function(String pageId)? relationContains,
    TResult Function(String pageId)? relationDoesNotContain,
    TResult Function()? relationIsEmpty,
    TResult Function()? relationIsNotEmpty,
    required TResult orElse(),
  }) {
    if (textStartsWith != null) {
      return textStartsWith(value);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(TextEqualsFilter value) textEquals,
    required TResult Function(TextDoesNotEqualFilter value) textDoesNotEqual,
    required TResult Function(TextContainsFilter value) textContains,
    required TResult Function(TextDoesNotContainFilter value)
        textDoesNotContain,
    required TResult Function(TextStartsWithFilter value) textStartsWith,
    required TResult Function(TextEndsWithFilter value) textEndsWith,
    required TResult Function(TextIsEmptyFilter value) textIsEmpty,
    required TResult Function(TextIsNotEmptyFilter value) textIsNotEmpty,
    required TResult Function(NumberEqualsFilter value) numberEquals,
    required TResult Function(NumberDoesNotEqualFilter value)
        numberDoesNotEqual,
    required TResult Function(NumberGreaterThanFilter value) numberGreaterThan,
    required TResult Function(NumberLessThanFilter value) numberLessThan,
    required TResult Function(NumberGreaterThanOrEqualFilter value)
        numberGreaterThanOrEqual,
    required TResult Function(NumberLessThanOrEqualFilter value)
        numberLessThanOrEqual,
    required TResult Function(NumberIsEmptyFilter value) numberIsEmpty,
    required TResult Function(NumberIsNotEmptyFilter value) numberIsNotEmpty,
    required TResult Function(CheckboxEqualsFilter value) checkboxEquals,
    required TResult Function(SelectEqualsFilter value) selectEquals,
    required TResult Function(SelectDoesNotEqualFilter value)
        selectDoesNotEqual,
    required TResult Function(SelectIsEmptyFilter value) selectIsEmpty,
    required TResult Function(SelectIsNotEmptyFilter value) selectIsNotEmpty,
    required TResult Function(MultiSelectContainsFilter value)
        multiSelectContains,
    required TResult Function(MultiSelectDoesNotContainFilter value)
        multiSelectDoesNotContain,
    required TResult Function(MultiSelectIsEmptyFilter value)
        multiSelectIsEmpty,
    required TResult Function(MultiSelectIsNotEmptyFilter value)
        multiSelectIsNotEmpty,
    required TResult Function(DateEqualsFilter value) dateEquals,
    required TResult Function(DateBeforeFilter value) dateBefore,
    required TResult Function(DateAfterFilter value) dateAfter,
    required TResult Function(DateOnOrBeforeFilter value) dateOnOrBefore,
    required TResult Function(DateOnOrAfterFilter value) dateOnOrAfter,
    required TResult Function(DateIsEmptyFilter value) dateIsEmpty,
    required TResult Function(DateIsNotEmptyFilter value) dateIsNotEmpty,
    required TResult Function(DatePastWeekFilter value) datePastWeek,
    required TResult Function(DatePastMonthFilter value) datePastMonth,
    required TResult Function(DatePastYearFilter value) datePastYear,
    required TResult Function(DateNextWeekFilter value) dateNextWeek,
    required TResult Function(DateNextMonthFilter value) dateNextMonth,
    required TResult Function(DateNextYearFilter value) dateNextYear,
    required TResult Function(PeopleContainsFilter value) peopleContains,
    required TResult Function(PeopleDoesNotContainFilter value)
        peopleDoesNotContain,
    required TResult Function(PeopleIsEmptyFilter value) peopleIsEmpty,
    required TResult Function(PeopleIsNotEmptyFilter value) peopleIsNotEmpty,
    required TResult Function(FilesIsEmptyFilter value) filesIsEmpty,
    required TResult Function(FilesIsNotEmptyFilter value) filesIsNotEmpty,
    required TResult Function(RelationContainsFilter value) relationContains,
    required TResult Function(RelationDoesNotContainFilter value)
        relationDoesNotContain,
    required TResult Function(RelationIsEmptyFilter value) relationIsEmpty,
    required TResult Function(RelationIsNotEmptyFilter value)
        relationIsNotEmpty,
  }) {
    return textStartsWith(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(TextEqualsFilter value)? textEquals,
    TResult? Function(TextDoesNotEqualFilter value)? textDoesNotEqual,
    TResult? Function(TextContainsFilter value)? textContains,
    TResult? Function(TextDoesNotContainFilter value)? textDoesNotContain,
    TResult? Function(TextStartsWithFilter value)? textStartsWith,
    TResult? Function(TextEndsWithFilter value)? textEndsWith,
    TResult? Function(TextIsEmptyFilter value)? textIsEmpty,
    TResult? Function(TextIsNotEmptyFilter value)? textIsNotEmpty,
    TResult? Function(NumberEqualsFilter value)? numberEquals,
    TResult? Function(NumberDoesNotEqualFilter value)? numberDoesNotEqual,
    TResult? Function(NumberGreaterThanFilter value)? numberGreaterThan,
    TResult? Function(NumberLessThanFilter value)? numberLessThan,
    TResult? Function(NumberGreaterThanOrEqualFilter value)?
        numberGreaterThanOrEqual,
    TResult? Function(NumberLessThanOrEqualFilter value)? numberLessThanOrEqual,
    TResult? Function(NumberIsEmptyFilter value)? numberIsEmpty,
    TResult? Function(NumberIsNotEmptyFilter value)? numberIsNotEmpty,
    TResult? Function(CheckboxEqualsFilter value)? checkboxEquals,
    TResult? Function(SelectEqualsFilter value)? selectEquals,
    TResult? Function(SelectDoesNotEqualFilter value)? selectDoesNotEqual,
    TResult? Function(SelectIsEmptyFilter value)? selectIsEmpty,
    TResult? Function(SelectIsNotEmptyFilter value)? selectIsNotEmpty,
    TResult? Function(MultiSelectContainsFilter value)? multiSelectContains,
    TResult? Function(MultiSelectDoesNotContainFilter value)?
        multiSelectDoesNotContain,
    TResult? Function(MultiSelectIsEmptyFilter value)? multiSelectIsEmpty,
    TResult? Function(MultiSelectIsNotEmptyFilter value)? multiSelectIsNotEmpty,
    TResult? Function(DateEqualsFilter value)? dateEquals,
    TResult? Function(DateBeforeFilter value)? dateBefore,
    TResult? Function(DateAfterFilter value)? dateAfter,
    TResult? Function(DateOnOrBeforeFilter value)? dateOnOrBefore,
    TResult? Function(DateOnOrAfterFilter value)? dateOnOrAfter,
    TResult? Function(DateIsEmptyFilter value)? dateIsEmpty,
    TResult? Function(DateIsNotEmptyFilter value)? dateIsNotEmpty,
    TResult? Function(DatePastWeekFilter value)? datePastWeek,
    TResult? Function(DatePastMonthFilter value)? datePastMonth,
    TResult? Function(DatePastYearFilter value)? datePastYear,
    TResult? Function(DateNextWeekFilter value)? dateNextWeek,
    TResult? Function(DateNextMonthFilter value)? dateNextMonth,
    TResult? Function(DateNextYearFilter value)? dateNextYear,
    TResult? Function(PeopleContainsFilter value)? peopleContains,
    TResult? Function(PeopleDoesNotContainFilter value)? peopleDoesNotContain,
    TResult? Function(PeopleIsEmptyFilter value)? peopleIsEmpty,
    TResult? Function(PeopleIsNotEmptyFilter value)? peopleIsNotEmpty,
    TResult? Function(FilesIsEmptyFilter value)? filesIsEmpty,
    TResult? Function(FilesIsNotEmptyFilter value)? filesIsNotEmpty,
    TResult? Function(RelationContainsFilter value)? relationContains,
    TResult? Function(RelationDoesNotContainFilter value)?
        relationDoesNotContain,
    TResult? Function(RelationIsEmptyFilter value)? relationIsEmpty,
    TResult? Function(RelationIsNotEmptyFilter value)? relationIsNotEmpty,
  }) {
    return textStartsWith?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(TextEqualsFilter value)? textEquals,
    TResult Function(TextDoesNotEqualFilter value)? textDoesNotEqual,
    TResult Function(TextContainsFilter value)? textContains,
    TResult Function(TextDoesNotContainFilter value)? textDoesNotContain,
    TResult Function(TextStartsWithFilter value)? textStartsWith,
    TResult Function(TextEndsWithFilter value)? textEndsWith,
    TResult Function(TextIsEmptyFilter value)? textIsEmpty,
    TResult Function(TextIsNotEmptyFilter value)? textIsNotEmpty,
    TResult Function(NumberEqualsFilter value)? numberEquals,
    TResult Function(NumberDoesNotEqualFilter value)? numberDoesNotEqual,
    TResult Function(NumberGreaterThanFilter value)? numberGreaterThan,
    TResult Function(NumberLessThanFilter value)? numberLessThan,
    TResult Function(NumberGreaterThanOrEqualFilter value)?
        numberGreaterThanOrEqual,
    TResult Function(NumberLessThanOrEqualFilter value)? numberLessThanOrEqual,
    TResult Function(NumberIsEmptyFilter value)? numberIsEmpty,
    TResult Function(NumberIsNotEmptyFilter value)? numberIsNotEmpty,
    TResult Function(CheckboxEqualsFilter value)? checkboxEquals,
    TResult Function(SelectEqualsFilter value)? selectEquals,
    TResult Function(SelectDoesNotEqualFilter value)? selectDoesNotEqual,
    TResult Function(SelectIsEmptyFilter value)? selectIsEmpty,
    TResult Function(SelectIsNotEmptyFilter value)? selectIsNotEmpty,
    TResult Function(MultiSelectContainsFilter value)? multiSelectContains,
    TResult Function(MultiSelectDoesNotContainFilter value)?
        multiSelectDoesNotContain,
    TResult Function(MultiSelectIsEmptyFilter value)? multiSelectIsEmpty,
    TResult Function(MultiSelectIsNotEmptyFilter value)? multiSelectIsNotEmpty,
    TResult Function(DateEqualsFilter value)? dateEquals,
    TResult Function(DateBeforeFilter value)? dateBefore,
    TResult Function(DateAfterFilter value)? dateAfter,
    TResult Function(DateOnOrBeforeFilter value)? dateOnOrBefore,
    TResult Function(DateOnOrAfterFilter value)? dateOnOrAfter,
    TResult Function(DateIsEmptyFilter value)? dateIsEmpty,
    TResult Function(DateIsNotEmptyFilter value)? dateIsNotEmpty,
    TResult Function(DatePastWeekFilter value)? datePastWeek,
    TResult Function(DatePastMonthFilter value)? datePastMonth,
    TResult Function(DatePastYearFilter value)? datePastYear,
    TResult Function(DateNextWeekFilter value)? dateNextWeek,
    TResult Function(DateNextMonthFilter value)? dateNextMonth,
    TResult Function(DateNextYearFilter value)? dateNextYear,
    TResult Function(PeopleContainsFilter value)? peopleContains,
    TResult Function(PeopleDoesNotContainFilter value)? peopleDoesNotContain,
    TResult Function(PeopleIsEmptyFilter value)? peopleIsEmpty,
    TResult Function(PeopleIsNotEmptyFilter value)? peopleIsNotEmpty,
    TResult Function(FilesIsEmptyFilter value)? filesIsEmpty,
    TResult Function(FilesIsNotEmptyFilter value)? filesIsNotEmpty,
    TResult Function(RelationContainsFilter value)? relationContains,
    TResult Function(RelationDoesNotContainFilter value)?
        relationDoesNotContain,
    TResult Function(RelationIsEmptyFilter value)? relationIsEmpty,
    TResult Function(RelationIsNotEmptyFilter value)? relationIsNotEmpty,
    required TResult orElse(),
  }) {
    if (textStartsWith != null) {
      return textStartsWith(this);
    }
    return orElse();
  }
}

abstract class TextStartsWithFilter extends PropertyFilter {
  const factory TextStartsWithFilter(final String value) =
      _$TextStartsWithFilterImpl;
  const TextStartsWithFilter._() : super._();

  String get value;

  /// Create a copy of PropertyFilter
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  _$$TextStartsWithFilterImplCopyWith<_$TextStartsWithFilterImpl>
      get copyWith => throw _privateConstructorUsedError;
}

/// @nodoc
abstract class _$$TextEndsWithFilterImplCopyWith<$Res> {
  factory _$$TextEndsWithFilterImplCopyWith(_$TextEndsWithFilterImpl value,
          $Res Function(_$TextEndsWithFilterImpl) then) =
      __$$TextEndsWithFilterImplCopyWithImpl<$Res>;
  @useResult
  $Res call({String value});
}

/// @nodoc
class __$$TextEndsWithFilterImplCopyWithImpl<$Res>
    extends _$PropertyFilterCopyWithImpl<$Res, _$TextEndsWithFilterImpl>
    implements _$$TextEndsWithFilterImplCopyWith<$Res> {
  __$$TextEndsWithFilterImplCopyWithImpl(_$TextEndsWithFilterImpl _value,
      $Res Function(_$TextEndsWithFilterImpl) _then)
      : super(_value, _then);

  /// Create a copy of PropertyFilter
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? value = null,
  }) {
    return _then(_$TextEndsWithFilterImpl(
      null == value
          ? _value.value
          : value // ignore: cast_nullable_to_non_nullable
              as String,
    ));
  }
}

/// @nodoc

class _$TextEndsWithFilterImpl extends TextEndsWithFilter {
  const _$TextEndsWithFilterImpl(this.value) : super._();

  @override
  final String value;

  @override
  String toString() {
    return 'PropertyFilter.textEndsWith(value: $value)';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$TextEndsWithFilterImpl &&
            (identical(other.value, value) || other.value == value));
  }

  @override
  int get hashCode => Object.hash(runtimeType, value);

  /// Create a copy of PropertyFilter
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  @pragma('vm:prefer-inline')
  _$$TextEndsWithFilterImplCopyWith<_$TextEndsWithFilterImpl> get copyWith =>
      __$$TextEndsWithFilterImplCopyWithImpl<_$TextEndsWithFilterImpl>(
          this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function(String value) textEquals,
    required TResult Function(String value) textDoesNotEqual,
    required TResult Function(String value) textContains,
    required TResult Function(String value) textDoesNotContain,
    required TResult Function(String value) textStartsWith,
    required TResult Function(String value) textEndsWith,
    required TResult Function() textIsEmpty,
    required TResult Function() textIsNotEmpty,
    required TResult Function(double value) numberEquals,
    required TResult Function(double value) numberDoesNotEqual,
    required TResult Function(double value) numberGreaterThan,
    required TResult Function(double value) numberLessThan,
    required TResult Function(double value) numberGreaterThanOrEqual,
    required TResult Function(double value) numberLessThanOrEqual,
    required TResult Function() numberIsEmpty,
    required TResult Function() numberIsNotEmpty,
    required TResult Function(bool value) checkboxEquals,
    required TResult Function(String value) selectEquals,
    required TResult Function(String value) selectDoesNotEqual,
    required TResult Function() selectIsEmpty,
    required TResult Function() selectIsNotEmpty,
    required TResult Function(String value) multiSelectContains,
    required TResult Function(String value) multiSelectDoesNotContain,
    required TResult Function() multiSelectIsEmpty,
    required TResult Function() multiSelectIsNotEmpty,
    required TResult Function(String date) dateEquals,
    required TResult Function(String date) dateBefore,
    required TResult Function(String date) dateAfter,
    required TResult Function(String date) dateOnOrBefore,
    required TResult Function(String date) dateOnOrAfter,
    required TResult Function() dateIsEmpty,
    required TResult Function() dateIsNotEmpty,
    required TResult Function() datePastWeek,
    required TResult Function() datePastMonth,
    required TResult Function() datePastYear,
    required TResult Function() dateNextWeek,
    required TResult Function() dateNextMonth,
    required TResult Function() dateNextYear,
    required TResult Function(String userId) peopleContains,
    required TResult Function(String userId) peopleDoesNotContain,
    required TResult Function() peopleIsEmpty,
    required TResult Function() peopleIsNotEmpty,
    required TResult Function() filesIsEmpty,
    required TResult Function() filesIsNotEmpty,
    required TResult Function(String pageId) relationContains,
    required TResult Function(String pageId) relationDoesNotContain,
    required TResult Function() relationIsEmpty,
    required TResult Function() relationIsNotEmpty,
  }) {
    return textEndsWith(value);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function(String value)? textEquals,
    TResult? Function(String value)? textDoesNotEqual,
    TResult? Function(String value)? textContains,
    TResult? Function(String value)? textDoesNotContain,
    TResult? Function(String value)? textStartsWith,
    TResult? Function(String value)? textEndsWith,
    TResult? Function()? textIsEmpty,
    TResult? Function()? textIsNotEmpty,
    TResult? Function(double value)? numberEquals,
    TResult? Function(double value)? numberDoesNotEqual,
    TResult? Function(double value)? numberGreaterThan,
    TResult? Function(double value)? numberLessThan,
    TResult? Function(double value)? numberGreaterThanOrEqual,
    TResult? Function(double value)? numberLessThanOrEqual,
    TResult? Function()? numberIsEmpty,
    TResult? Function()? numberIsNotEmpty,
    TResult? Function(bool value)? checkboxEquals,
    TResult? Function(String value)? selectEquals,
    TResult? Function(String value)? selectDoesNotEqual,
    TResult? Function()? selectIsEmpty,
    TResult? Function()? selectIsNotEmpty,
    TResult? Function(String value)? multiSelectContains,
    TResult? Function(String value)? multiSelectDoesNotContain,
    TResult? Function()? multiSelectIsEmpty,
    TResult? Function()? multiSelectIsNotEmpty,
    TResult? Function(String date)? dateEquals,
    TResult? Function(String date)? dateBefore,
    TResult? Function(String date)? dateAfter,
    TResult? Function(String date)? dateOnOrBefore,
    TResult? Function(String date)? dateOnOrAfter,
    TResult? Function()? dateIsEmpty,
    TResult? Function()? dateIsNotEmpty,
    TResult? Function()? datePastWeek,
    TResult? Function()? datePastMonth,
    TResult? Function()? datePastYear,
    TResult? Function()? dateNextWeek,
    TResult? Function()? dateNextMonth,
    TResult? Function()? dateNextYear,
    TResult? Function(String userId)? peopleContains,
    TResult? Function(String userId)? peopleDoesNotContain,
    TResult? Function()? peopleIsEmpty,
    TResult? Function()? peopleIsNotEmpty,
    TResult? Function()? filesIsEmpty,
    TResult? Function()? filesIsNotEmpty,
    TResult? Function(String pageId)? relationContains,
    TResult? Function(String pageId)? relationDoesNotContain,
    TResult? Function()? relationIsEmpty,
    TResult? Function()? relationIsNotEmpty,
  }) {
    return textEndsWith?.call(value);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function(String value)? textEquals,
    TResult Function(String value)? textDoesNotEqual,
    TResult Function(String value)? textContains,
    TResult Function(String value)? textDoesNotContain,
    TResult Function(String value)? textStartsWith,
    TResult Function(String value)? textEndsWith,
    TResult Function()? textIsEmpty,
    TResult Function()? textIsNotEmpty,
    TResult Function(double value)? numberEquals,
    TResult Function(double value)? numberDoesNotEqual,
    TResult Function(double value)? numberGreaterThan,
    TResult Function(double value)? numberLessThan,
    TResult Function(double value)? numberGreaterThanOrEqual,
    TResult Function(double value)? numberLessThanOrEqual,
    TResult Function()? numberIsEmpty,
    TResult Function()? numberIsNotEmpty,
    TResult Function(bool value)? checkboxEquals,
    TResult Function(String value)? selectEquals,
    TResult Function(String value)? selectDoesNotEqual,
    TResult Function()? selectIsEmpty,
    TResult Function()? selectIsNotEmpty,
    TResult Function(String value)? multiSelectContains,
    TResult Function(String value)? multiSelectDoesNotContain,
    TResult Function()? multiSelectIsEmpty,
    TResult Function()? multiSelectIsNotEmpty,
    TResult Function(String date)? dateEquals,
    TResult Function(String date)? dateBefore,
    TResult Function(String date)? dateAfter,
    TResult Function(String date)? dateOnOrBefore,
    TResult Function(String date)? dateOnOrAfter,
    TResult Function()? dateIsEmpty,
    TResult Function()? dateIsNotEmpty,
    TResult Function()? datePastWeek,
    TResult Function()? datePastMonth,
    TResult Function()? datePastYear,
    TResult Function()? dateNextWeek,
    TResult Function()? dateNextMonth,
    TResult Function()? dateNextYear,
    TResult Function(String userId)? peopleContains,
    TResult Function(String userId)? peopleDoesNotContain,
    TResult Function()? peopleIsEmpty,
    TResult Function()? peopleIsNotEmpty,
    TResult Function()? filesIsEmpty,
    TResult Function()? filesIsNotEmpty,
    TResult Function(String pageId)? relationContains,
    TResult Function(String pageId)? relationDoesNotContain,
    TResult Function()? relationIsEmpty,
    TResult Function()? relationIsNotEmpty,
    required TResult orElse(),
  }) {
    if (textEndsWith != null) {
      return textEndsWith(value);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(TextEqualsFilter value) textEquals,
    required TResult Function(TextDoesNotEqualFilter value) textDoesNotEqual,
    required TResult Function(TextContainsFilter value) textContains,
    required TResult Function(TextDoesNotContainFilter value)
        textDoesNotContain,
    required TResult Function(TextStartsWithFilter value) textStartsWith,
    required TResult Function(TextEndsWithFilter value) textEndsWith,
    required TResult Function(TextIsEmptyFilter value) textIsEmpty,
    required TResult Function(TextIsNotEmptyFilter value) textIsNotEmpty,
    required TResult Function(NumberEqualsFilter value) numberEquals,
    required TResult Function(NumberDoesNotEqualFilter value)
        numberDoesNotEqual,
    required TResult Function(NumberGreaterThanFilter value) numberGreaterThan,
    required TResult Function(NumberLessThanFilter value) numberLessThan,
    required TResult Function(NumberGreaterThanOrEqualFilter value)
        numberGreaterThanOrEqual,
    required TResult Function(NumberLessThanOrEqualFilter value)
        numberLessThanOrEqual,
    required TResult Function(NumberIsEmptyFilter value) numberIsEmpty,
    required TResult Function(NumberIsNotEmptyFilter value) numberIsNotEmpty,
    required TResult Function(CheckboxEqualsFilter value) checkboxEquals,
    required TResult Function(SelectEqualsFilter value) selectEquals,
    required TResult Function(SelectDoesNotEqualFilter value)
        selectDoesNotEqual,
    required TResult Function(SelectIsEmptyFilter value) selectIsEmpty,
    required TResult Function(SelectIsNotEmptyFilter value) selectIsNotEmpty,
    required TResult Function(MultiSelectContainsFilter value)
        multiSelectContains,
    required TResult Function(MultiSelectDoesNotContainFilter value)
        multiSelectDoesNotContain,
    required TResult Function(MultiSelectIsEmptyFilter value)
        multiSelectIsEmpty,
    required TResult Function(MultiSelectIsNotEmptyFilter value)
        multiSelectIsNotEmpty,
    required TResult Function(DateEqualsFilter value) dateEquals,
    required TResult Function(DateBeforeFilter value) dateBefore,
    required TResult Function(DateAfterFilter value) dateAfter,
    required TResult Function(DateOnOrBeforeFilter value) dateOnOrBefore,
    required TResult Function(DateOnOrAfterFilter value) dateOnOrAfter,
    required TResult Function(DateIsEmptyFilter value) dateIsEmpty,
    required TResult Function(DateIsNotEmptyFilter value) dateIsNotEmpty,
    required TResult Function(DatePastWeekFilter value) datePastWeek,
    required TResult Function(DatePastMonthFilter value) datePastMonth,
    required TResult Function(DatePastYearFilter value) datePastYear,
    required TResult Function(DateNextWeekFilter value) dateNextWeek,
    required TResult Function(DateNextMonthFilter value) dateNextMonth,
    required TResult Function(DateNextYearFilter value) dateNextYear,
    required TResult Function(PeopleContainsFilter value) peopleContains,
    required TResult Function(PeopleDoesNotContainFilter value)
        peopleDoesNotContain,
    required TResult Function(PeopleIsEmptyFilter value) peopleIsEmpty,
    required TResult Function(PeopleIsNotEmptyFilter value) peopleIsNotEmpty,
    required TResult Function(FilesIsEmptyFilter value) filesIsEmpty,
    required TResult Function(FilesIsNotEmptyFilter value) filesIsNotEmpty,
    required TResult Function(RelationContainsFilter value) relationContains,
    required TResult Function(RelationDoesNotContainFilter value)
        relationDoesNotContain,
    required TResult Function(RelationIsEmptyFilter value) relationIsEmpty,
    required TResult Function(RelationIsNotEmptyFilter value)
        relationIsNotEmpty,
  }) {
    return textEndsWith(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(TextEqualsFilter value)? textEquals,
    TResult? Function(TextDoesNotEqualFilter value)? textDoesNotEqual,
    TResult? Function(TextContainsFilter value)? textContains,
    TResult? Function(TextDoesNotContainFilter value)? textDoesNotContain,
    TResult? Function(TextStartsWithFilter value)? textStartsWith,
    TResult? Function(TextEndsWithFilter value)? textEndsWith,
    TResult? Function(TextIsEmptyFilter value)? textIsEmpty,
    TResult? Function(TextIsNotEmptyFilter value)? textIsNotEmpty,
    TResult? Function(NumberEqualsFilter value)? numberEquals,
    TResult? Function(NumberDoesNotEqualFilter value)? numberDoesNotEqual,
    TResult? Function(NumberGreaterThanFilter value)? numberGreaterThan,
    TResult? Function(NumberLessThanFilter value)? numberLessThan,
    TResult? Function(NumberGreaterThanOrEqualFilter value)?
        numberGreaterThanOrEqual,
    TResult? Function(NumberLessThanOrEqualFilter value)? numberLessThanOrEqual,
    TResult? Function(NumberIsEmptyFilter value)? numberIsEmpty,
    TResult? Function(NumberIsNotEmptyFilter value)? numberIsNotEmpty,
    TResult? Function(CheckboxEqualsFilter value)? checkboxEquals,
    TResult? Function(SelectEqualsFilter value)? selectEquals,
    TResult? Function(SelectDoesNotEqualFilter value)? selectDoesNotEqual,
    TResult? Function(SelectIsEmptyFilter value)? selectIsEmpty,
    TResult? Function(SelectIsNotEmptyFilter value)? selectIsNotEmpty,
    TResult? Function(MultiSelectContainsFilter value)? multiSelectContains,
    TResult? Function(MultiSelectDoesNotContainFilter value)?
        multiSelectDoesNotContain,
    TResult? Function(MultiSelectIsEmptyFilter value)? multiSelectIsEmpty,
    TResult? Function(MultiSelectIsNotEmptyFilter value)? multiSelectIsNotEmpty,
    TResult? Function(DateEqualsFilter value)? dateEquals,
    TResult? Function(DateBeforeFilter value)? dateBefore,
    TResult? Function(DateAfterFilter value)? dateAfter,
    TResult? Function(DateOnOrBeforeFilter value)? dateOnOrBefore,
    TResult? Function(DateOnOrAfterFilter value)? dateOnOrAfter,
    TResult? Function(DateIsEmptyFilter value)? dateIsEmpty,
    TResult? Function(DateIsNotEmptyFilter value)? dateIsNotEmpty,
    TResult? Function(DatePastWeekFilter value)? datePastWeek,
    TResult? Function(DatePastMonthFilter value)? datePastMonth,
    TResult? Function(DatePastYearFilter value)? datePastYear,
    TResult? Function(DateNextWeekFilter value)? dateNextWeek,
    TResult? Function(DateNextMonthFilter value)? dateNextMonth,
    TResult? Function(DateNextYearFilter value)? dateNextYear,
    TResult? Function(PeopleContainsFilter value)? peopleContains,
    TResult? Function(PeopleDoesNotContainFilter value)? peopleDoesNotContain,
    TResult? Function(PeopleIsEmptyFilter value)? peopleIsEmpty,
    TResult? Function(PeopleIsNotEmptyFilter value)? peopleIsNotEmpty,
    TResult? Function(FilesIsEmptyFilter value)? filesIsEmpty,
    TResult? Function(FilesIsNotEmptyFilter value)? filesIsNotEmpty,
    TResult? Function(RelationContainsFilter value)? relationContains,
    TResult? Function(RelationDoesNotContainFilter value)?
        relationDoesNotContain,
    TResult? Function(RelationIsEmptyFilter value)? relationIsEmpty,
    TResult? Function(RelationIsNotEmptyFilter value)? relationIsNotEmpty,
  }) {
    return textEndsWith?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(TextEqualsFilter value)? textEquals,
    TResult Function(TextDoesNotEqualFilter value)? textDoesNotEqual,
    TResult Function(TextContainsFilter value)? textContains,
    TResult Function(TextDoesNotContainFilter value)? textDoesNotContain,
    TResult Function(TextStartsWithFilter value)? textStartsWith,
    TResult Function(TextEndsWithFilter value)? textEndsWith,
    TResult Function(TextIsEmptyFilter value)? textIsEmpty,
    TResult Function(TextIsNotEmptyFilter value)? textIsNotEmpty,
    TResult Function(NumberEqualsFilter value)? numberEquals,
    TResult Function(NumberDoesNotEqualFilter value)? numberDoesNotEqual,
    TResult Function(NumberGreaterThanFilter value)? numberGreaterThan,
    TResult Function(NumberLessThanFilter value)? numberLessThan,
    TResult Function(NumberGreaterThanOrEqualFilter value)?
        numberGreaterThanOrEqual,
    TResult Function(NumberLessThanOrEqualFilter value)? numberLessThanOrEqual,
    TResult Function(NumberIsEmptyFilter value)? numberIsEmpty,
    TResult Function(NumberIsNotEmptyFilter value)? numberIsNotEmpty,
    TResult Function(CheckboxEqualsFilter value)? checkboxEquals,
    TResult Function(SelectEqualsFilter value)? selectEquals,
    TResult Function(SelectDoesNotEqualFilter value)? selectDoesNotEqual,
    TResult Function(SelectIsEmptyFilter value)? selectIsEmpty,
    TResult Function(SelectIsNotEmptyFilter value)? selectIsNotEmpty,
    TResult Function(MultiSelectContainsFilter value)? multiSelectContains,
    TResult Function(MultiSelectDoesNotContainFilter value)?
        multiSelectDoesNotContain,
    TResult Function(MultiSelectIsEmptyFilter value)? multiSelectIsEmpty,
    TResult Function(MultiSelectIsNotEmptyFilter value)? multiSelectIsNotEmpty,
    TResult Function(DateEqualsFilter value)? dateEquals,
    TResult Function(DateBeforeFilter value)? dateBefore,
    TResult Function(DateAfterFilter value)? dateAfter,
    TResult Function(DateOnOrBeforeFilter value)? dateOnOrBefore,
    TResult Function(DateOnOrAfterFilter value)? dateOnOrAfter,
    TResult Function(DateIsEmptyFilter value)? dateIsEmpty,
    TResult Function(DateIsNotEmptyFilter value)? dateIsNotEmpty,
    TResult Function(DatePastWeekFilter value)? datePastWeek,
    TResult Function(DatePastMonthFilter value)? datePastMonth,
    TResult Function(DatePastYearFilter value)? datePastYear,
    TResult Function(DateNextWeekFilter value)? dateNextWeek,
    TResult Function(DateNextMonthFilter value)? dateNextMonth,
    TResult Function(DateNextYearFilter value)? dateNextYear,
    TResult Function(PeopleContainsFilter value)? peopleContains,
    TResult Function(PeopleDoesNotContainFilter value)? peopleDoesNotContain,
    TResult Function(PeopleIsEmptyFilter value)? peopleIsEmpty,
    TResult Function(PeopleIsNotEmptyFilter value)? peopleIsNotEmpty,
    TResult Function(FilesIsEmptyFilter value)? filesIsEmpty,
    TResult Function(FilesIsNotEmptyFilter value)? filesIsNotEmpty,
    TResult Function(RelationContainsFilter value)? relationContains,
    TResult Function(RelationDoesNotContainFilter value)?
        relationDoesNotContain,
    TResult Function(RelationIsEmptyFilter value)? relationIsEmpty,
    TResult Function(RelationIsNotEmptyFilter value)? relationIsNotEmpty,
    required TResult orElse(),
  }) {
    if (textEndsWith != null) {
      return textEndsWith(this);
    }
    return orElse();
  }
}

abstract class TextEndsWithFilter extends PropertyFilter {
  const factory TextEndsWithFilter(final String value) =
      _$TextEndsWithFilterImpl;
  const TextEndsWithFilter._() : super._();

  String get value;

  /// Create a copy of PropertyFilter
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  _$$TextEndsWithFilterImplCopyWith<_$TextEndsWithFilterImpl> get copyWith =>
      throw _privateConstructorUsedError;
}

/// @nodoc
abstract class _$$TextIsEmptyFilterImplCopyWith<$Res> {
  factory _$$TextIsEmptyFilterImplCopyWith(_$TextIsEmptyFilterImpl value,
          $Res Function(_$TextIsEmptyFilterImpl) then) =
      __$$TextIsEmptyFilterImplCopyWithImpl<$Res>;
}

/// @nodoc
class __$$TextIsEmptyFilterImplCopyWithImpl<$Res>
    extends _$PropertyFilterCopyWithImpl<$Res, _$TextIsEmptyFilterImpl>
    implements _$$TextIsEmptyFilterImplCopyWith<$Res> {
  __$$TextIsEmptyFilterImplCopyWithImpl(_$TextIsEmptyFilterImpl _value,
      $Res Function(_$TextIsEmptyFilterImpl) _then)
      : super(_value, _then);

  /// Create a copy of PropertyFilter
  /// with the given fields replaced by the non-null parameter values.
}

/// @nodoc

class _$TextIsEmptyFilterImpl extends TextIsEmptyFilter {
  const _$TextIsEmptyFilterImpl() : super._();

  @override
  String toString() {
    return 'PropertyFilter.textIsEmpty()';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType && other is _$TextIsEmptyFilterImpl);
  }

  @override
  int get hashCode => runtimeType.hashCode;

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function(String value) textEquals,
    required TResult Function(String value) textDoesNotEqual,
    required TResult Function(String value) textContains,
    required TResult Function(String value) textDoesNotContain,
    required TResult Function(String value) textStartsWith,
    required TResult Function(String value) textEndsWith,
    required TResult Function() textIsEmpty,
    required TResult Function() textIsNotEmpty,
    required TResult Function(double value) numberEquals,
    required TResult Function(double value) numberDoesNotEqual,
    required TResult Function(double value) numberGreaterThan,
    required TResult Function(double value) numberLessThan,
    required TResult Function(double value) numberGreaterThanOrEqual,
    required TResult Function(double value) numberLessThanOrEqual,
    required TResult Function() numberIsEmpty,
    required TResult Function() numberIsNotEmpty,
    required TResult Function(bool value) checkboxEquals,
    required TResult Function(String value) selectEquals,
    required TResult Function(String value) selectDoesNotEqual,
    required TResult Function() selectIsEmpty,
    required TResult Function() selectIsNotEmpty,
    required TResult Function(String value) multiSelectContains,
    required TResult Function(String value) multiSelectDoesNotContain,
    required TResult Function() multiSelectIsEmpty,
    required TResult Function() multiSelectIsNotEmpty,
    required TResult Function(String date) dateEquals,
    required TResult Function(String date) dateBefore,
    required TResult Function(String date) dateAfter,
    required TResult Function(String date) dateOnOrBefore,
    required TResult Function(String date) dateOnOrAfter,
    required TResult Function() dateIsEmpty,
    required TResult Function() dateIsNotEmpty,
    required TResult Function() datePastWeek,
    required TResult Function() datePastMonth,
    required TResult Function() datePastYear,
    required TResult Function() dateNextWeek,
    required TResult Function() dateNextMonth,
    required TResult Function() dateNextYear,
    required TResult Function(String userId) peopleContains,
    required TResult Function(String userId) peopleDoesNotContain,
    required TResult Function() peopleIsEmpty,
    required TResult Function() peopleIsNotEmpty,
    required TResult Function() filesIsEmpty,
    required TResult Function() filesIsNotEmpty,
    required TResult Function(String pageId) relationContains,
    required TResult Function(String pageId) relationDoesNotContain,
    required TResult Function() relationIsEmpty,
    required TResult Function() relationIsNotEmpty,
  }) {
    return textIsEmpty();
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function(String value)? textEquals,
    TResult? Function(String value)? textDoesNotEqual,
    TResult? Function(String value)? textContains,
    TResult? Function(String value)? textDoesNotContain,
    TResult? Function(String value)? textStartsWith,
    TResult? Function(String value)? textEndsWith,
    TResult? Function()? textIsEmpty,
    TResult? Function()? textIsNotEmpty,
    TResult? Function(double value)? numberEquals,
    TResult? Function(double value)? numberDoesNotEqual,
    TResult? Function(double value)? numberGreaterThan,
    TResult? Function(double value)? numberLessThan,
    TResult? Function(double value)? numberGreaterThanOrEqual,
    TResult? Function(double value)? numberLessThanOrEqual,
    TResult? Function()? numberIsEmpty,
    TResult? Function()? numberIsNotEmpty,
    TResult? Function(bool value)? checkboxEquals,
    TResult? Function(String value)? selectEquals,
    TResult? Function(String value)? selectDoesNotEqual,
    TResult? Function()? selectIsEmpty,
    TResult? Function()? selectIsNotEmpty,
    TResult? Function(String value)? multiSelectContains,
    TResult? Function(String value)? multiSelectDoesNotContain,
    TResult? Function()? multiSelectIsEmpty,
    TResult? Function()? multiSelectIsNotEmpty,
    TResult? Function(String date)? dateEquals,
    TResult? Function(String date)? dateBefore,
    TResult? Function(String date)? dateAfter,
    TResult? Function(String date)? dateOnOrBefore,
    TResult? Function(String date)? dateOnOrAfter,
    TResult? Function()? dateIsEmpty,
    TResult? Function()? dateIsNotEmpty,
    TResult? Function()? datePastWeek,
    TResult? Function()? datePastMonth,
    TResult? Function()? datePastYear,
    TResult? Function()? dateNextWeek,
    TResult? Function()? dateNextMonth,
    TResult? Function()? dateNextYear,
    TResult? Function(String userId)? peopleContains,
    TResult? Function(String userId)? peopleDoesNotContain,
    TResult? Function()? peopleIsEmpty,
    TResult? Function()? peopleIsNotEmpty,
    TResult? Function()? filesIsEmpty,
    TResult? Function()? filesIsNotEmpty,
    TResult? Function(String pageId)? relationContains,
    TResult? Function(String pageId)? relationDoesNotContain,
    TResult? Function()? relationIsEmpty,
    TResult? Function()? relationIsNotEmpty,
  }) {
    return textIsEmpty?.call();
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function(String value)? textEquals,
    TResult Function(String value)? textDoesNotEqual,
    TResult Function(String value)? textContains,
    TResult Function(String value)? textDoesNotContain,
    TResult Function(String value)? textStartsWith,
    TResult Function(String value)? textEndsWith,
    TResult Function()? textIsEmpty,
    TResult Function()? textIsNotEmpty,
    TResult Function(double value)? numberEquals,
    TResult Function(double value)? numberDoesNotEqual,
    TResult Function(double value)? numberGreaterThan,
    TResult Function(double value)? numberLessThan,
    TResult Function(double value)? numberGreaterThanOrEqual,
    TResult Function(double value)? numberLessThanOrEqual,
    TResult Function()? numberIsEmpty,
    TResult Function()? numberIsNotEmpty,
    TResult Function(bool value)? checkboxEquals,
    TResult Function(String value)? selectEquals,
    TResult Function(String value)? selectDoesNotEqual,
    TResult Function()? selectIsEmpty,
    TResult Function()? selectIsNotEmpty,
    TResult Function(String value)? multiSelectContains,
    TResult Function(String value)? multiSelectDoesNotContain,
    TResult Function()? multiSelectIsEmpty,
    TResult Function()? multiSelectIsNotEmpty,
    TResult Function(String date)? dateEquals,
    TResult Function(String date)? dateBefore,
    TResult Function(String date)? dateAfter,
    TResult Function(String date)? dateOnOrBefore,
    TResult Function(String date)? dateOnOrAfter,
    TResult Function()? dateIsEmpty,
    TResult Function()? dateIsNotEmpty,
    TResult Function()? datePastWeek,
    TResult Function()? datePastMonth,
    TResult Function()? datePastYear,
    TResult Function()? dateNextWeek,
    TResult Function()? dateNextMonth,
    TResult Function()? dateNextYear,
    TResult Function(String userId)? peopleContains,
    TResult Function(String userId)? peopleDoesNotContain,
    TResult Function()? peopleIsEmpty,
    TResult Function()? peopleIsNotEmpty,
    TResult Function()? filesIsEmpty,
    TResult Function()? filesIsNotEmpty,
    TResult Function(String pageId)? relationContains,
    TResult Function(String pageId)? relationDoesNotContain,
    TResult Function()? relationIsEmpty,
    TResult Function()? relationIsNotEmpty,
    required TResult orElse(),
  }) {
    if (textIsEmpty != null) {
      return textIsEmpty();
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(TextEqualsFilter value) textEquals,
    required TResult Function(TextDoesNotEqualFilter value) textDoesNotEqual,
    required TResult Function(TextContainsFilter value) textContains,
    required TResult Function(TextDoesNotContainFilter value)
        textDoesNotContain,
    required TResult Function(TextStartsWithFilter value) textStartsWith,
    required TResult Function(TextEndsWithFilter value) textEndsWith,
    required TResult Function(TextIsEmptyFilter value) textIsEmpty,
    required TResult Function(TextIsNotEmptyFilter value) textIsNotEmpty,
    required TResult Function(NumberEqualsFilter value) numberEquals,
    required TResult Function(NumberDoesNotEqualFilter value)
        numberDoesNotEqual,
    required TResult Function(NumberGreaterThanFilter value) numberGreaterThan,
    required TResult Function(NumberLessThanFilter value) numberLessThan,
    required TResult Function(NumberGreaterThanOrEqualFilter value)
        numberGreaterThanOrEqual,
    required TResult Function(NumberLessThanOrEqualFilter value)
        numberLessThanOrEqual,
    required TResult Function(NumberIsEmptyFilter value) numberIsEmpty,
    required TResult Function(NumberIsNotEmptyFilter value) numberIsNotEmpty,
    required TResult Function(CheckboxEqualsFilter value) checkboxEquals,
    required TResult Function(SelectEqualsFilter value) selectEquals,
    required TResult Function(SelectDoesNotEqualFilter value)
        selectDoesNotEqual,
    required TResult Function(SelectIsEmptyFilter value) selectIsEmpty,
    required TResult Function(SelectIsNotEmptyFilter value) selectIsNotEmpty,
    required TResult Function(MultiSelectContainsFilter value)
        multiSelectContains,
    required TResult Function(MultiSelectDoesNotContainFilter value)
        multiSelectDoesNotContain,
    required TResult Function(MultiSelectIsEmptyFilter value)
        multiSelectIsEmpty,
    required TResult Function(MultiSelectIsNotEmptyFilter value)
        multiSelectIsNotEmpty,
    required TResult Function(DateEqualsFilter value) dateEquals,
    required TResult Function(DateBeforeFilter value) dateBefore,
    required TResult Function(DateAfterFilter value) dateAfter,
    required TResult Function(DateOnOrBeforeFilter value) dateOnOrBefore,
    required TResult Function(DateOnOrAfterFilter value) dateOnOrAfter,
    required TResult Function(DateIsEmptyFilter value) dateIsEmpty,
    required TResult Function(DateIsNotEmptyFilter value) dateIsNotEmpty,
    required TResult Function(DatePastWeekFilter value) datePastWeek,
    required TResult Function(DatePastMonthFilter value) datePastMonth,
    required TResult Function(DatePastYearFilter value) datePastYear,
    required TResult Function(DateNextWeekFilter value) dateNextWeek,
    required TResult Function(DateNextMonthFilter value) dateNextMonth,
    required TResult Function(DateNextYearFilter value) dateNextYear,
    required TResult Function(PeopleContainsFilter value) peopleContains,
    required TResult Function(PeopleDoesNotContainFilter value)
        peopleDoesNotContain,
    required TResult Function(PeopleIsEmptyFilter value) peopleIsEmpty,
    required TResult Function(PeopleIsNotEmptyFilter value) peopleIsNotEmpty,
    required TResult Function(FilesIsEmptyFilter value) filesIsEmpty,
    required TResult Function(FilesIsNotEmptyFilter value) filesIsNotEmpty,
    required TResult Function(RelationContainsFilter value) relationContains,
    required TResult Function(RelationDoesNotContainFilter value)
        relationDoesNotContain,
    required TResult Function(RelationIsEmptyFilter value) relationIsEmpty,
    required TResult Function(RelationIsNotEmptyFilter value)
        relationIsNotEmpty,
  }) {
    return textIsEmpty(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(TextEqualsFilter value)? textEquals,
    TResult? Function(TextDoesNotEqualFilter value)? textDoesNotEqual,
    TResult? Function(TextContainsFilter value)? textContains,
    TResult? Function(TextDoesNotContainFilter value)? textDoesNotContain,
    TResult? Function(TextStartsWithFilter value)? textStartsWith,
    TResult? Function(TextEndsWithFilter value)? textEndsWith,
    TResult? Function(TextIsEmptyFilter value)? textIsEmpty,
    TResult? Function(TextIsNotEmptyFilter value)? textIsNotEmpty,
    TResult? Function(NumberEqualsFilter value)? numberEquals,
    TResult? Function(NumberDoesNotEqualFilter value)? numberDoesNotEqual,
    TResult? Function(NumberGreaterThanFilter value)? numberGreaterThan,
    TResult? Function(NumberLessThanFilter value)? numberLessThan,
    TResult? Function(NumberGreaterThanOrEqualFilter value)?
        numberGreaterThanOrEqual,
    TResult? Function(NumberLessThanOrEqualFilter value)? numberLessThanOrEqual,
    TResult? Function(NumberIsEmptyFilter value)? numberIsEmpty,
    TResult? Function(NumberIsNotEmptyFilter value)? numberIsNotEmpty,
    TResult? Function(CheckboxEqualsFilter value)? checkboxEquals,
    TResult? Function(SelectEqualsFilter value)? selectEquals,
    TResult? Function(SelectDoesNotEqualFilter value)? selectDoesNotEqual,
    TResult? Function(SelectIsEmptyFilter value)? selectIsEmpty,
    TResult? Function(SelectIsNotEmptyFilter value)? selectIsNotEmpty,
    TResult? Function(MultiSelectContainsFilter value)? multiSelectContains,
    TResult? Function(MultiSelectDoesNotContainFilter value)?
        multiSelectDoesNotContain,
    TResult? Function(MultiSelectIsEmptyFilter value)? multiSelectIsEmpty,
    TResult? Function(MultiSelectIsNotEmptyFilter value)? multiSelectIsNotEmpty,
    TResult? Function(DateEqualsFilter value)? dateEquals,
    TResult? Function(DateBeforeFilter value)? dateBefore,
    TResult? Function(DateAfterFilter value)? dateAfter,
    TResult? Function(DateOnOrBeforeFilter value)? dateOnOrBefore,
    TResult? Function(DateOnOrAfterFilter value)? dateOnOrAfter,
    TResult? Function(DateIsEmptyFilter value)? dateIsEmpty,
    TResult? Function(DateIsNotEmptyFilter value)? dateIsNotEmpty,
    TResult? Function(DatePastWeekFilter value)? datePastWeek,
    TResult? Function(DatePastMonthFilter value)? datePastMonth,
    TResult? Function(DatePastYearFilter value)? datePastYear,
    TResult? Function(DateNextWeekFilter value)? dateNextWeek,
    TResult? Function(DateNextMonthFilter value)? dateNextMonth,
    TResult? Function(DateNextYearFilter value)? dateNextYear,
    TResult? Function(PeopleContainsFilter value)? peopleContains,
    TResult? Function(PeopleDoesNotContainFilter value)? peopleDoesNotContain,
    TResult? Function(PeopleIsEmptyFilter value)? peopleIsEmpty,
    TResult? Function(PeopleIsNotEmptyFilter value)? peopleIsNotEmpty,
    TResult? Function(FilesIsEmptyFilter value)? filesIsEmpty,
    TResult? Function(FilesIsNotEmptyFilter value)? filesIsNotEmpty,
    TResult? Function(RelationContainsFilter value)? relationContains,
    TResult? Function(RelationDoesNotContainFilter value)?
        relationDoesNotContain,
    TResult? Function(RelationIsEmptyFilter value)? relationIsEmpty,
    TResult? Function(RelationIsNotEmptyFilter value)? relationIsNotEmpty,
  }) {
    return textIsEmpty?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(TextEqualsFilter value)? textEquals,
    TResult Function(TextDoesNotEqualFilter value)? textDoesNotEqual,
    TResult Function(TextContainsFilter value)? textContains,
    TResult Function(TextDoesNotContainFilter value)? textDoesNotContain,
    TResult Function(TextStartsWithFilter value)? textStartsWith,
    TResult Function(TextEndsWithFilter value)? textEndsWith,
    TResult Function(TextIsEmptyFilter value)? textIsEmpty,
    TResult Function(TextIsNotEmptyFilter value)? textIsNotEmpty,
    TResult Function(NumberEqualsFilter value)? numberEquals,
    TResult Function(NumberDoesNotEqualFilter value)? numberDoesNotEqual,
    TResult Function(NumberGreaterThanFilter value)? numberGreaterThan,
    TResult Function(NumberLessThanFilter value)? numberLessThan,
    TResult Function(NumberGreaterThanOrEqualFilter value)?
        numberGreaterThanOrEqual,
    TResult Function(NumberLessThanOrEqualFilter value)? numberLessThanOrEqual,
    TResult Function(NumberIsEmptyFilter value)? numberIsEmpty,
    TResult Function(NumberIsNotEmptyFilter value)? numberIsNotEmpty,
    TResult Function(CheckboxEqualsFilter value)? checkboxEquals,
    TResult Function(SelectEqualsFilter value)? selectEquals,
    TResult Function(SelectDoesNotEqualFilter value)? selectDoesNotEqual,
    TResult Function(SelectIsEmptyFilter value)? selectIsEmpty,
    TResult Function(SelectIsNotEmptyFilter value)? selectIsNotEmpty,
    TResult Function(MultiSelectContainsFilter value)? multiSelectContains,
    TResult Function(MultiSelectDoesNotContainFilter value)?
        multiSelectDoesNotContain,
    TResult Function(MultiSelectIsEmptyFilter value)? multiSelectIsEmpty,
    TResult Function(MultiSelectIsNotEmptyFilter value)? multiSelectIsNotEmpty,
    TResult Function(DateEqualsFilter value)? dateEquals,
    TResult Function(DateBeforeFilter value)? dateBefore,
    TResult Function(DateAfterFilter value)? dateAfter,
    TResult Function(DateOnOrBeforeFilter value)? dateOnOrBefore,
    TResult Function(DateOnOrAfterFilter value)? dateOnOrAfter,
    TResult Function(DateIsEmptyFilter value)? dateIsEmpty,
    TResult Function(DateIsNotEmptyFilter value)? dateIsNotEmpty,
    TResult Function(DatePastWeekFilter value)? datePastWeek,
    TResult Function(DatePastMonthFilter value)? datePastMonth,
    TResult Function(DatePastYearFilter value)? datePastYear,
    TResult Function(DateNextWeekFilter value)? dateNextWeek,
    TResult Function(DateNextMonthFilter value)? dateNextMonth,
    TResult Function(DateNextYearFilter value)? dateNextYear,
    TResult Function(PeopleContainsFilter value)? peopleContains,
    TResult Function(PeopleDoesNotContainFilter value)? peopleDoesNotContain,
    TResult Function(PeopleIsEmptyFilter value)? peopleIsEmpty,
    TResult Function(PeopleIsNotEmptyFilter value)? peopleIsNotEmpty,
    TResult Function(FilesIsEmptyFilter value)? filesIsEmpty,
    TResult Function(FilesIsNotEmptyFilter value)? filesIsNotEmpty,
    TResult Function(RelationContainsFilter value)? relationContains,
    TResult Function(RelationDoesNotContainFilter value)?
        relationDoesNotContain,
    TResult Function(RelationIsEmptyFilter value)? relationIsEmpty,
    TResult Function(RelationIsNotEmptyFilter value)? relationIsNotEmpty,
    required TResult orElse(),
  }) {
    if (textIsEmpty != null) {
      return textIsEmpty(this);
    }
    return orElse();
  }
}

abstract class TextIsEmptyFilter extends PropertyFilter {
  const factory TextIsEmptyFilter() = _$TextIsEmptyFilterImpl;
  const TextIsEmptyFilter._() : super._();
}

/// @nodoc
abstract class _$$TextIsNotEmptyFilterImplCopyWith<$Res> {
  factory _$$TextIsNotEmptyFilterImplCopyWith(_$TextIsNotEmptyFilterImpl value,
          $Res Function(_$TextIsNotEmptyFilterImpl) then) =
      __$$TextIsNotEmptyFilterImplCopyWithImpl<$Res>;
}

/// @nodoc
class __$$TextIsNotEmptyFilterImplCopyWithImpl<$Res>
    extends _$PropertyFilterCopyWithImpl<$Res, _$TextIsNotEmptyFilterImpl>
    implements _$$TextIsNotEmptyFilterImplCopyWith<$Res> {
  __$$TextIsNotEmptyFilterImplCopyWithImpl(_$TextIsNotEmptyFilterImpl _value,
      $Res Function(_$TextIsNotEmptyFilterImpl) _then)
      : super(_value, _then);

  /// Create a copy of PropertyFilter
  /// with the given fields replaced by the non-null parameter values.
}

/// @nodoc

class _$TextIsNotEmptyFilterImpl extends TextIsNotEmptyFilter {
  const _$TextIsNotEmptyFilterImpl() : super._();

  @override
  String toString() {
    return 'PropertyFilter.textIsNotEmpty()';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$TextIsNotEmptyFilterImpl);
  }

  @override
  int get hashCode => runtimeType.hashCode;

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function(String value) textEquals,
    required TResult Function(String value) textDoesNotEqual,
    required TResult Function(String value) textContains,
    required TResult Function(String value) textDoesNotContain,
    required TResult Function(String value) textStartsWith,
    required TResult Function(String value) textEndsWith,
    required TResult Function() textIsEmpty,
    required TResult Function() textIsNotEmpty,
    required TResult Function(double value) numberEquals,
    required TResult Function(double value) numberDoesNotEqual,
    required TResult Function(double value) numberGreaterThan,
    required TResult Function(double value) numberLessThan,
    required TResult Function(double value) numberGreaterThanOrEqual,
    required TResult Function(double value) numberLessThanOrEqual,
    required TResult Function() numberIsEmpty,
    required TResult Function() numberIsNotEmpty,
    required TResult Function(bool value) checkboxEquals,
    required TResult Function(String value) selectEquals,
    required TResult Function(String value) selectDoesNotEqual,
    required TResult Function() selectIsEmpty,
    required TResult Function() selectIsNotEmpty,
    required TResult Function(String value) multiSelectContains,
    required TResult Function(String value) multiSelectDoesNotContain,
    required TResult Function() multiSelectIsEmpty,
    required TResult Function() multiSelectIsNotEmpty,
    required TResult Function(String date) dateEquals,
    required TResult Function(String date) dateBefore,
    required TResult Function(String date) dateAfter,
    required TResult Function(String date) dateOnOrBefore,
    required TResult Function(String date) dateOnOrAfter,
    required TResult Function() dateIsEmpty,
    required TResult Function() dateIsNotEmpty,
    required TResult Function() datePastWeek,
    required TResult Function() datePastMonth,
    required TResult Function() datePastYear,
    required TResult Function() dateNextWeek,
    required TResult Function() dateNextMonth,
    required TResult Function() dateNextYear,
    required TResult Function(String userId) peopleContains,
    required TResult Function(String userId) peopleDoesNotContain,
    required TResult Function() peopleIsEmpty,
    required TResult Function() peopleIsNotEmpty,
    required TResult Function() filesIsEmpty,
    required TResult Function() filesIsNotEmpty,
    required TResult Function(String pageId) relationContains,
    required TResult Function(String pageId) relationDoesNotContain,
    required TResult Function() relationIsEmpty,
    required TResult Function() relationIsNotEmpty,
  }) {
    return textIsNotEmpty();
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function(String value)? textEquals,
    TResult? Function(String value)? textDoesNotEqual,
    TResult? Function(String value)? textContains,
    TResult? Function(String value)? textDoesNotContain,
    TResult? Function(String value)? textStartsWith,
    TResult? Function(String value)? textEndsWith,
    TResult? Function()? textIsEmpty,
    TResult? Function()? textIsNotEmpty,
    TResult? Function(double value)? numberEquals,
    TResult? Function(double value)? numberDoesNotEqual,
    TResult? Function(double value)? numberGreaterThan,
    TResult? Function(double value)? numberLessThan,
    TResult? Function(double value)? numberGreaterThanOrEqual,
    TResult? Function(double value)? numberLessThanOrEqual,
    TResult? Function()? numberIsEmpty,
    TResult? Function()? numberIsNotEmpty,
    TResult? Function(bool value)? checkboxEquals,
    TResult? Function(String value)? selectEquals,
    TResult? Function(String value)? selectDoesNotEqual,
    TResult? Function()? selectIsEmpty,
    TResult? Function()? selectIsNotEmpty,
    TResult? Function(String value)? multiSelectContains,
    TResult? Function(String value)? multiSelectDoesNotContain,
    TResult? Function()? multiSelectIsEmpty,
    TResult? Function()? multiSelectIsNotEmpty,
    TResult? Function(String date)? dateEquals,
    TResult? Function(String date)? dateBefore,
    TResult? Function(String date)? dateAfter,
    TResult? Function(String date)? dateOnOrBefore,
    TResult? Function(String date)? dateOnOrAfter,
    TResult? Function()? dateIsEmpty,
    TResult? Function()? dateIsNotEmpty,
    TResult? Function()? datePastWeek,
    TResult? Function()? datePastMonth,
    TResult? Function()? datePastYear,
    TResult? Function()? dateNextWeek,
    TResult? Function()? dateNextMonth,
    TResult? Function()? dateNextYear,
    TResult? Function(String userId)? peopleContains,
    TResult? Function(String userId)? peopleDoesNotContain,
    TResult? Function()? peopleIsEmpty,
    TResult? Function()? peopleIsNotEmpty,
    TResult? Function()? filesIsEmpty,
    TResult? Function()? filesIsNotEmpty,
    TResult? Function(String pageId)? relationContains,
    TResult? Function(String pageId)? relationDoesNotContain,
    TResult? Function()? relationIsEmpty,
    TResult? Function()? relationIsNotEmpty,
  }) {
    return textIsNotEmpty?.call();
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function(String value)? textEquals,
    TResult Function(String value)? textDoesNotEqual,
    TResult Function(String value)? textContains,
    TResult Function(String value)? textDoesNotContain,
    TResult Function(String value)? textStartsWith,
    TResult Function(String value)? textEndsWith,
    TResult Function()? textIsEmpty,
    TResult Function()? textIsNotEmpty,
    TResult Function(double value)? numberEquals,
    TResult Function(double value)? numberDoesNotEqual,
    TResult Function(double value)? numberGreaterThan,
    TResult Function(double value)? numberLessThan,
    TResult Function(double value)? numberGreaterThanOrEqual,
    TResult Function(double value)? numberLessThanOrEqual,
    TResult Function()? numberIsEmpty,
    TResult Function()? numberIsNotEmpty,
    TResult Function(bool value)? checkboxEquals,
    TResult Function(String value)? selectEquals,
    TResult Function(String value)? selectDoesNotEqual,
    TResult Function()? selectIsEmpty,
    TResult Function()? selectIsNotEmpty,
    TResult Function(String value)? multiSelectContains,
    TResult Function(String value)? multiSelectDoesNotContain,
    TResult Function()? multiSelectIsEmpty,
    TResult Function()? multiSelectIsNotEmpty,
    TResult Function(String date)? dateEquals,
    TResult Function(String date)? dateBefore,
    TResult Function(String date)? dateAfter,
    TResult Function(String date)? dateOnOrBefore,
    TResult Function(String date)? dateOnOrAfter,
    TResult Function()? dateIsEmpty,
    TResult Function()? dateIsNotEmpty,
    TResult Function()? datePastWeek,
    TResult Function()? datePastMonth,
    TResult Function()? datePastYear,
    TResult Function()? dateNextWeek,
    TResult Function()? dateNextMonth,
    TResult Function()? dateNextYear,
    TResult Function(String userId)? peopleContains,
    TResult Function(String userId)? peopleDoesNotContain,
    TResult Function()? peopleIsEmpty,
    TResult Function()? peopleIsNotEmpty,
    TResult Function()? filesIsEmpty,
    TResult Function()? filesIsNotEmpty,
    TResult Function(String pageId)? relationContains,
    TResult Function(String pageId)? relationDoesNotContain,
    TResult Function()? relationIsEmpty,
    TResult Function()? relationIsNotEmpty,
    required TResult orElse(),
  }) {
    if (textIsNotEmpty != null) {
      return textIsNotEmpty();
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(TextEqualsFilter value) textEquals,
    required TResult Function(TextDoesNotEqualFilter value) textDoesNotEqual,
    required TResult Function(TextContainsFilter value) textContains,
    required TResult Function(TextDoesNotContainFilter value)
        textDoesNotContain,
    required TResult Function(TextStartsWithFilter value) textStartsWith,
    required TResult Function(TextEndsWithFilter value) textEndsWith,
    required TResult Function(TextIsEmptyFilter value) textIsEmpty,
    required TResult Function(TextIsNotEmptyFilter value) textIsNotEmpty,
    required TResult Function(NumberEqualsFilter value) numberEquals,
    required TResult Function(NumberDoesNotEqualFilter value)
        numberDoesNotEqual,
    required TResult Function(NumberGreaterThanFilter value) numberGreaterThan,
    required TResult Function(NumberLessThanFilter value) numberLessThan,
    required TResult Function(NumberGreaterThanOrEqualFilter value)
        numberGreaterThanOrEqual,
    required TResult Function(NumberLessThanOrEqualFilter value)
        numberLessThanOrEqual,
    required TResult Function(NumberIsEmptyFilter value) numberIsEmpty,
    required TResult Function(NumberIsNotEmptyFilter value) numberIsNotEmpty,
    required TResult Function(CheckboxEqualsFilter value) checkboxEquals,
    required TResult Function(SelectEqualsFilter value) selectEquals,
    required TResult Function(SelectDoesNotEqualFilter value)
        selectDoesNotEqual,
    required TResult Function(SelectIsEmptyFilter value) selectIsEmpty,
    required TResult Function(SelectIsNotEmptyFilter value) selectIsNotEmpty,
    required TResult Function(MultiSelectContainsFilter value)
        multiSelectContains,
    required TResult Function(MultiSelectDoesNotContainFilter value)
        multiSelectDoesNotContain,
    required TResult Function(MultiSelectIsEmptyFilter value)
        multiSelectIsEmpty,
    required TResult Function(MultiSelectIsNotEmptyFilter value)
        multiSelectIsNotEmpty,
    required TResult Function(DateEqualsFilter value) dateEquals,
    required TResult Function(DateBeforeFilter value) dateBefore,
    required TResult Function(DateAfterFilter value) dateAfter,
    required TResult Function(DateOnOrBeforeFilter value) dateOnOrBefore,
    required TResult Function(DateOnOrAfterFilter value) dateOnOrAfter,
    required TResult Function(DateIsEmptyFilter value) dateIsEmpty,
    required TResult Function(DateIsNotEmptyFilter value) dateIsNotEmpty,
    required TResult Function(DatePastWeekFilter value) datePastWeek,
    required TResult Function(DatePastMonthFilter value) datePastMonth,
    required TResult Function(DatePastYearFilter value) datePastYear,
    required TResult Function(DateNextWeekFilter value) dateNextWeek,
    required TResult Function(DateNextMonthFilter value) dateNextMonth,
    required TResult Function(DateNextYearFilter value) dateNextYear,
    required TResult Function(PeopleContainsFilter value) peopleContains,
    required TResult Function(PeopleDoesNotContainFilter value)
        peopleDoesNotContain,
    required TResult Function(PeopleIsEmptyFilter value) peopleIsEmpty,
    required TResult Function(PeopleIsNotEmptyFilter value) peopleIsNotEmpty,
    required TResult Function(FilesIsEmptyFilter value) filesIsEmpty,
    required TResult Function(FilesIsNotEmptyFilter value) filesIsNotEmpty,
    required TResult Function(RelationContainsFilter value) relationContains,
    required TResult Function(RelationDoesNotContainFilter value)
        relationDoesNotContain,
    required TResult Function(RelationIsEmptyFilter value) relationIsEmpty,
    required TResult Function(RelationIsNotEmptyFilter value)
        relationIsNotEmpty,
  }) {
    return textIsNotEmpty(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(TextEqualsFilter value)? textEquals,
    TResult? Function(TextDoesNotEqualFilter value)? textDoesNotEqual,
    TResult? Function(TextContainsFilter value)? textContains,
    TResult? Function(TextDoesNotContainFilter value)? textDoesNotContain,
    TResult? Function(TextStartsWithFilter value)? textStartsWith,
    TResult? Function(TextEndsWithFilter value)? textEndsWith,
    TResult? Function(TextIsEmptyFilter value)? textIsEmpty,
    TResult? Function(TextIsNotEmptyFilter value)? textIsNotEmpty,
    TResult? Function(NumberEqualsFilter value)? numberEquals,
    TResult? Function(NumberDoesNotEqualFilter value)? numberDoesNotEqual,
    TResult? Function(NumberGreaterThanFilter value)? numberGreaterThan,
    TResult? Function(NumberLessThanFilter value)? numberLessThan,
    TResult? Function(NumberGreaterThanOrEqualFilter value)?
        numberGreaterThanOrEqual,
    TResult? Function(NumberLessThanOrEqualFilter value)? numberLessThanOrEqual,
    TResult? Function(NumberIsEmptyFilter value)? numberIsEmpty,
    TResult? Function(NumberIsNotEmptyFilter value)? numberIsNotEmpty,
    TResult? Function(CheckboxEqualsFilter value)? checkboxEquals,
    TResult? Function(SelectEqualsFilter value)? selectEquals,
    TResult? Function(SelectDoesNotEqualFilter value)? selectDoesNotEqual,
    TResult? Function(SelectIsEmptyFilter value)? selectIsEmpty,
    TResult? Function(SelectIsNotEmptyFilter value)? selectIsNotEmpty,
    TResult? Function(MultiSelectContainsFilter value)? multiSelectContains,
    TResult? Function(MultiSelectDoesNotContainFilter value)?
        multiSelectDoesNotContain,
    TResult? Function(MultiSelectIsEmptyFilter value)? multiSelectIsEmpty,
    TResult? Function(MultiSelectIsNotEmptyFilter value)? multiSelectIsNotEmpty,
    TResult? Function(DateEqualsFilter value)? dateEquals,
    TResult? Function(DateBeforeFilter value)? dateBefore,
    TResult? Function(DateAfterFilter value)? dateAfter,
    TResult? Function(DateOnOrBeforeFilter value)? dateOnOrBefore,
    TResult? Function(DateOnOrAfterFilter value)? dateOnOrAfter,
    TResult? Function(DateIsEmptyFilter value)? dateIsEmpty,
    TResult? Function(DateIsNotEmptyFilter value)? dateIsNotEmpty,
    TResult? Function(DatePastWeekFilter value)? datePastWeek,
    TResult? Function(DatePastMonthFilter value)? datePastMonth,
    TResult? Function(DatePastYearFilter value)? datePastYear,
    TResult? Function(DateNextWeekFilter value)? dateNextWeek,
    TResult? Function(DateNextMonthFilter value)? dateNextMonth,
    TResult? Function(DateNextYearFilter value)? dateNextYear,
    TResult? Function(PeopleContainsFilter value)? peopleContains,
    TResult? Function(PeopleDoesNotContainFilter value)? peopleDoesNotContain,
    TResult? Function(PeopleIsEmptyFilter value)? peopleIsEmpty,
    TResult? Function(PeopleIsNotEmptyFilter value)? peopleIsNotEmpty,
    TResult? Function(FilesIsEmptyFilter value)? filesIsEmpty,
    TResult? Function(FilesIsNotEmptyFilter value)? filesIsNotEmpty,
    TResult? Function(RelationContainsFilter value)? relationContains,
    TResult? Function(RelationDoesNotContainFilter value)?
        relationDoesNotContain,
    TResult? Function(RelationIsEmptyFilter value)? relationIsEmpty,
    TResult? Function(RelationIsNotEmptyFilter value)? relationIsNotEmpty,
  }) {
    return textIsNotEmpty?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(TextEqualsFilter value)? textEquals,
    TResult Function(TextDoesNotEqualFilter value)? textDoesNotEqual,
    TResult Function(TextContainsFilter value)? textContains,
    TResult Function(TextDoesNotContainFilter value)? textDoesNotContain,
    TResult Function(TextStartsWithFilter value)? textStartsWith,
    TResult Function(TextEndsWithFilter value)? textEndsWith,
    TResult Function(TextIsEmptyFilter value)? textIsEmpty,
    TResult Function(TextIsNotEmptyFilter value)? textIsNotEmpty,
    TResult Function(NumberEqualsFilter value)? numberEquals,
    TResult Function(NumberDoesNotEqualFilter value)? numberDoesNotEqual,
    TResult Function(NumberGreaterThanFilter value)? numberGreaterThan,
    TResult Function(NumberLessThanFilter value)? numberLessThan,
    TResult Function(NumberGreaterThanOrEqualFilter value)?
        numberGreaterThanOrEqual,
    TResult Function(NumberLessThanOrEqualFilter value)? numberLessThanOrEqual,
    TResult Function(NumberIsEmptyFilter value)? numberIsEmpty,
    TResult Function(NumberIsNotEmptyFilter value)? numberIsNotEmpty,
    TResult Function(CheckboxEqualsFilter value)? checkboxEquals,
    TResult Function(SelectEqualsFilter value)? selectEquals,
    TResult Function(SelectDoesNotEqualFilter value)? selectDoesNotEqual,
    TResult Function(SelectIsEmptyFilter value)? selectIsEmpty,
    TResult Function(SelectIsNotEmptyFilter value)? selectIsNotEmpty,
    TResult Function(MultiSelectContainsFilter value)? multiSelectContains,
    TResult Function(MultiSelectDoesNotContainFilter value)?
        multiSelectDoesNotContain,
    TResult Function(MultiSelectIsEmptyFilter value)? multiSelectIsEmpty,
    TResult Function(MultiSelectIsNotEmptyFilter value)? multiSelectIsNotEmpty,
    TResult Function(DateEqualsFilter value)? dateEquals,
    TResult Function(DateBeforeFilter value)? dateBefore,
    TResult Function(DateAfterFilter value)? dateAfter,
    TResult Function(DateOnOrBeforeFilter value)? dateOnOrBefore,
    TResult Function(DateOnOrAfterFilter value)? dateOnOrAfter,
    TResult Function(DateIsEmptyFilter value)? dateIsEmpty,
    TResult Function(DateIsNotEmptyFilter value)? dateIsNotEmpty,
    TResult Function(DatePastWeekFilter value)? datePastWeek,
    TResult Function(DatePastMonthFilter value)? datePastMonth,
    TResult Function(DatePastYearFilter value)? datePastYear,
    TResult Function(DateNextWeekFilter value)? dateNextWeek,
    TResult Function(DateNextMonthFilter value)? dateNextMonth,
    TResult Function(DateNextYearFilter value)? dateNextYear,
    TResult Function(PeopleContainsFilter value)? peopleContains,
    TResult Function(PeopleDoesNotContainFilter value)? peopleDoesNotContain,
    TResult Function(PeopleIsEmptyFilter value)? peopleIsEmpty,
    TResult Function(PeopleIsNotEmptyFilter value)? peopleIsNotEmpty,
    TResult Function(FilesIsEmptyFilter value)? filesIsEmpty,
    TResult Function(FilesIsNotEmptyFilter value)? filesIsNotEmpty,
    TResult Function(RelationContainsFilter value)? relationContains,
    TResult Function(RelationDoesNotContainFilter value)?
        relationDoesNotContain,
    TResult Function(RelationIsEmptyFilter value)? relationIsEmpty,
    TResult Function(RelationIsNotEmptyFilter value)? relationIsNotEmpty,
    required TResult orElse(),
  }) {
    if (textIsNotEmpty != null) {
      return textIsNotEmpty(this);
    }
    return orElse();
  }
}

abstract class TextIsNotEmptyFilter extends PropertyFilter {
  const factory TextIsNotEmptyFilter() = _$TextIsNotEmptyFilterImpl;
  const TextIsNotEmptyFilter._() : super._();
}

/// @nodoc
abstract class _$$NumberEqualsFilterImplCopyWith<$Res> {
  factory _$$NumberEqualsFilterImplCopyWith(_$NumberEqualsFilterImpl value,
          $Res Function(_$NumberEqualsFilterImpl) then) =
      __$$NumberEqualsFilterImplCopyWithImpl<$Res>;
  @useResult
  $Res call({double value});
}

/// @nodoc
class __$$NumberEqualsFilterImplCopyWithImpl<$Res>
    extends _$PropertyFilterCopyWithImpl<$Res, _$NumberEqualsFilterImpl>
    implements _$$NumberEqualsFilterImplCopyWith<$Res> {
  __$$NumberEqualsFilterImplCopyWithImpl(_$NumberEqualsFilterImpl _value,
      $Res Function(_$NumberEqualsFilterImpl) _then)
      : super(_value, _then);

  /// Create a copy of PropertyFilter
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? value = null,
  }) {
    return _then(_$NumberEqualsFilterImpl(
      null == value
          ? _value.value
          : value // ignore: cast_nullable_to_non_nullable
              as double,
    ));
  }
}

/// @nodoc

class _$NumberEqualsFilterImpl extends NumberEqualsFilter {
  const _$NumberEqualsFilterImpl(this.value) : super._();

  @override
  final double value;

  @override
  String toString() {
    return 'PropertyFilter.numberEquals(value: $value)';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$NumberEqualsFilterImpl &&
            (identical(other.value, value) || other.value == value));
  }

  @override
  int get hashCode => Object.hash(runtimeType, value);

  /// Create a copy of PropertyFilter
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  @pragma('vm:prefer-inline')
  _$$NumberEqualsFilterImplCopyWith<_$NumberEqualsFilterImpl> get copyWith =>
      __$$NumberEqualsFilterImplCopyWithImpl<_$NumberEqualsFilterImpl>(
          this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function(String value) textEquals,
    required TResult Function(String value) textDoesNotEqual,
    required TResult Function(String value) textContains,
    required TResult Function(String value) textDoesNotContain,
    required TResult Function(String value) textStartsWith,
    required TResult Function(String value) textEndsWith,
    required TResult Function() textIsEmpty,
    required TResult Function() textIsNotEmpty,
    required TResult Function(double value) numberEquals,
    required TResult Function(double value) numberDoesNotEqual,
    required TResult Function(double value) numberGreaterThan,
    required TResult Function(double value) numberLessThan,
    required TResult Function(double value) numberGreaterThanOrEqual,
    required TResult Function(double value) numberLessThanOrEqual,
    required TResult Function() numberIsEmpty,
    required TResult Function() numberIsNotEmpty,
    required TResult Function(bool value) checkboxEquals,
    required TResult Function(String value) selectEquals,
    required TResult Function(String value) selectDoesNotEqual,
    required TResult Function() selectIsEmpty,
    required TResult Function() selectIsNotEmpty,
    required TResult Function(String value) multiSelectContains,
    required TResult Function(String value) multiSelectDoesNotContain,
    required TResult Function() multiSelectIsEmpty,
    required TResult Function() multiSelectIsNotEmpty,
    required TResult Function(String date) dateEquals,
    required TResult Function(String date) dateBefore,
    required TResult Function(String date) dateAfter,
    required TResult Function(String date) dateOnOrBefore,
    required TResult Function(String date) dateOnOrAfter,
    required TResult Function() dateIsEmpty,
    required TResult Function() dateIsNotEmpty,
    required TResult Function() datePastWeek,
    required TResult Function() datePastMonth,
    required TResult Function() datePastYear,
    required TResult Function() dateNextWeek,
    required TResult Function() dateNextMonth,
    required TResult Function() dateNextYear,
    required TResult Function(String userId) peopleContains,
    required TResult Function(String userId) peopleDoesNotContain,
    required TResult Function() peopleIsEmpty,
    required TResult Function() peopleIsNotEmpty,
    required TResult Function() filesIsEmpty,
    required TResult Function() filesIsNotEmpty,
    required TResult Function(String pageId) relationContains,
    required TResult Function(String pageId) relationDoesNotContain,
    required TResult Function() relationIsEmpty,
    required TResult Function() relationIsNotEmpty,
  }) {
    return numberEquals(value);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function(String value)? textEquals,
    TResult? Function(String value)? textDoesNotEqual,
    TResult? Function(String value)? textContains,
    TResult? Function(String value)? textDoesNotContain,
    TResult? Function(String value)? textStartsWith,
    TResult? Function(String value)? textEndsWith,
    TResult? Function()? textIsEmpty,
    TResult? Function()? textIsNotEmpty,
    TResult? Function(double value)? numberEquals,
    TResult? Function(double value)? numberDoesNotEqual,
    TResult? Function(double value)? numberGreaterThan,
    TResult? Function(double value)? numberLessThan,
    TResult? Function(double value)? numberGreaterThanOrEqual,
    TResult? Function(double value)? numberLessThanOrEqual,
    TResult? Function()? numberIsEmpty,
    TResult? Function()? numberIsNotEmpty,
    TResult? Function(bool value)? checkboxEquals,
    TResult? Function(String value)? selectEquals,
    TResult? Function(String value)? selectDoesNotEqual,
    TResult? Function()? selectIsEmpty,
    TResult? Function()? selectIsNotEmpty,
    TResult? Function(String value)? multiSelectContains,
    TResult? Function(String value)? multiSelectDoesNotContain,
    TResult? Function()? multiSelectIsEmpty,
    TResult? Function()? multiSelectIsNotEmpty,
    TResult? Function(String date)? dateEquals,
    TResult? Function(String date)? dateBefore,
    TResult? Function(String date)? dateAfter,
    TResult? Function(String date)? dateOnOrBefore,
    TResult? Function(String date)? dateOnOrAfter,
    TResult? Function()? dateIsEmpty,
    TResult? Function()? dateIsNotEmpty,
    TResult? Function()? datePastWeek,
    TResult? Function()? datePastMonth,
    TResult? Function()? datePastYear,
    TResult? Function()? dateNextWeek,
    TResult? Function()? dateNextMonth,
    TResult? Function()? dateNextYear,
    TResult? Function(String userId)? peopleContains,
    TResult? Function(String userId)? peopleDoesNotContain,
    TResult? Function()? peopleIsEmpty,
    TResult? Function()? peopleIsNotEmpty,
    TResult? Function()? filesIsEmpty,
    TResult? Function()? filesIsNotEmpty,
    TResult? Function(String pageId)? relationContains,
    TResult? Function(String pageId)? relationDoesNotContain,
    TResult? Function()? relationIsEmpty,
    TResult? Function()? relationIsNotEmpty,
  }) {
    return numberEquals?.call(value);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function(String value)? textEquals,
    TResult Function(String value)? textDoesNotEqual,
    TResult Function(String value)? textContains,
    TResult Function(String value)? textDoesNotContain,
    TResult Function(String value)? textStartsWith,
    TResult Function(String value)? textEndsWith,
    TResult Function()? textIsEmpty,
    TResult Function()? textIsNotEmpty,
    TResult Function(double value)? numberEquals,
    TResult Function(double value)? numberDoesNotEqual,
    TResult Function(double value)? numberGreaterThan,
    TResult Function(double value)? numberLessThan,
    TResult Function(double value)? numberGreaterThanOrEqual,
    TResult Function(double value)? numberLessThanOrEqual,
    TResult Function()? numberIsEmpty,
    TResult Function()? numberIsNotEmpty,
    TResult Function(bool value)? checkboxEquals,
    TResult Function(String value)? selectEquals,
    TResult Function(String value)? selectDoesNotEqual,
    TResult Function()? selectIsEmpty,
    TResult Function()? selectIsNotEmpty,
    TResult Function(String value)? multiSelectContains,
    TResult Function(String value)? multiSelectDoesNotContain,
    TResult Function()? multiSelectIsEmpty,
    TResult Function()? multiSelectIsNotEmpty,
    TResult Function(String date)? dateEquals,
    TResult Function(String date)? dateBefore,
    TResult Function(String date)? dateAfter,
    TResult Function(String date)? dateOnOrBefore,
    TResult Function(String date)? dateOnOrAfter,
    TResult Function()? dateIsEmpty,
    TResult Function()? dateIsNotEmpty,
    TResult Function()? datePastWeek,
    TResult Function()? datePastMonth,
    TResult Function()? datePastYear,
    TResult Function()? dateNextWeek,
    TResult Function()? dateNextMonth,
    TResult Function()? dateNextYear,
    TResult Function(String userId)? peopleContains,
    TResult Function(String userId)? peopleDoesNotContain,
    TResult Function()? peopleIsEmpty,
    TResult Function()? peopleIsNotEmpty,
    TResult Function()? filesIsEmpty,
    TResult Function()? filesIsNotEmpty,
    TResult Function(String pageId)? relationContains,
    TResult Function(String pageId)? relationDoesNotContain,
    TResult Function()? relationIsEmpty,
    TResult Function()? relationIsNotEmpty,
    required TResult orElse(),
  }) {
    if (numberEquals != null) {
      return numberEquals(value);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(TextEqualsFilter value) textEquals,
    required TResult Function(TextDoesNotEqualFilter value) textDoesNotEqual,
    required TResult Function(TextContainsFilter value) textContains,
    required TResult Function(TextDoesNotContainFilter value)
        textDoesNotContain,
    required TResult Function(TextStartsWithFilter value) textStartsWith,
    required TResult Function(TextEndsWithFilter value) textEndsWith,
    required TResult Function(TextIsEmptyFilter value) textIsEmpty,
    required TResult Function(TextIsNotEmptyFilter value) textIsNotEmpty,
    required TResult Function(NumberEqualsFilter value) numberEquals,
    required TResult Function(NumberDoesNotEqualFilter value)
        numberDoesNotEqual,
    required TResult Function(NumberGreaterThanFilter value) numberGreaterThan,
    required TResult Function(NumberLessThanFilter value) numberLessThan,
    required TResult Function(NumberGreaterThanOrEqualFilter value)
        numberGreaterThanOrEqual,
    required TResult Function(NumberLessThanOrEqualFilter value)
        numberLessThanOrEqual,
    required TResult Function(NumberIsEmptyFilter value) numberIsEmpty,
    required TResult Function(NumberIsNotEmptyFilter value) numberIsNotEmpty,
    required TResult Function(CheckboxEqualsFilter value) checkboxEquals,
    required TResult Function(SelectEqualsFilter value) selectEquals,
    required TResult Function(SelectDoesNotEqualFilter value)
        selectDoesNotEqual,
    required TResult Function(SelectIsEmptyFilter value) selectIsEmpty,
    required TResult Function(SelectIsNotEmptyFilter value) selectIsNotEmpty,
    required TResult Function(MultiSelectContainsFilter value)
        multiSelectContains,
    required TResult Function(MultiSelectDoesNotContainFilter value)
        multiSelectDoesNotContain,
    required TResult Function(MultiSelectIsEmptyFilter value)
        multiSelectIsEmpty,
    required TResult Function(MultiSelectIsNotEmptyFilter value)
        multiSelectIsNotEmpty,
    required TResult Function(DateEqualsFilter value) dateEquals,
    required TResult Function(DateBeforeFilter value) dateBefore,
    required TResult Function(DateAfterFilter value) dateAfter,
    required TResult Function(DateOnOrBeforeFilter value) dateOnOrBefore,
    required TResult Function(DateOnOrAfterFilter value) dateOnOrAfter,
    required TResult Function(DateIsEmptyFilter value) dateIsEmpty,
    required TResult Function(DateIsNotEmptyFilter value) dateIsNotEmpty,
    required TResult Function(DatePastWeekFilter value) datePastWeek,
    required TResult Function(DatePastMonthFilter value) datePastMonth,
    required TResult Function(DatePastYearFilter value) datePastYear,
    required TResult Function(DateNextWeekFilter value) dateNextWeek,
    required TResult Function(DateNextMonthFilter value) dateNextMonth,
    required TResult Function(DateNextYearFilter value) dateNextYear,
    required TResult Function(PeopleContainsFilter value) peopleContains,
    required TResult Function(PeopleDoesNotContainFilter value)
        peopleDoesNotContain,
    required TResult Function(PeopleIsEmptyFilter value) peopleIsEmpty,
    required TResult Function(PeopleIsNotEmptyFilter value) peopleIsNotEmpty,
    required TResult Function(FilesIsEmptyFilter value) filesIsEmpty,
    required TResult Function(FilesIsNotEmptyFilter value) filesIsNotEmpty,
    required TResult Function(RelationContainsFilter value) relationContains,
    required TResult Function(RelationDoesNotContainFilter value)
        relationDoesNotContain,
    required TResult Function(RelationIsEmptyFilter value) relationIsEmpty,
    required TResult Function(RelationIsNotEmptyFilter value)
        relationIsNotEmpty,
  }) {
    return numberEquals(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(TextEqualsFilter value)? textEquals,
    TResult? Function(TextDoesNotEqualFilter value)? textDoesNotEqual,
    TResult? Function(TextContainsFilter value)? textContains,
    TResult? Function(TextDoesNotContainFilter value)? textDoesNotContain,
    TResult? Function(TextStartsWithFilter value)? textStartsWith,
    TResult? Function(TextEndsWithFilter value)? textEndsWith,
    TResult? Function(TextIsEmptyFilter value)? textIsEmpty,
    TResult? Function(TextIsNotEmptyFilter value)? textIsNotEmpty,
    TResult? Function(NumberEqualsFilter value)? numberEquals,
    TResult? Function(NumberDoesNotEqualFilter value)? numberDoesNotEqual,
    TResult? Function(NumberGreaterThanFilter value)? numberGreaterThan,
    TResult? Function(NumberLessThanFilter value)? numberLessThan,
    TResult? Function(NumberGreaterThanOrEqualFilter value)?
        numberGreaterThanOrEqual,
    TResult? Function(NumberLessThanOrEqualFilter value)? numberLessThanOrEqual,
    TResult? Function(NumberIsEmptyFilter value)? numberIsEmpty,
    TResult? Function(NumberIsNotEmptyFilter value)? numberIsNotEmpty,
    TResult? Function(CheckboxEqualsFilter value)? checkboxEquals,
    TResult? Function(SelectEqualsFilter value)? selectEquals,
    TResult? Function(SelectDoesNotEqualFilter value)? selectDoesNotEqual,
    TResult? Function(SelectIsEmptyFilter value)? selectIsEmpty,
    TResult? Function(SelectIsNotEmptyFilter value)? selectIsNotEmpty,
    TResult? Function(MultiSelectContainsFilter value)? multiSelectContains,
    TResult? Function(MultiSelectDoesNotContainFilter value)?
        multiSelectDoesNotContain,
    TResult? Function(MultiSelectIsEmptyFilter value)? multiSelectIsEmpty,
    TResult? Function(MultiSelectIsNotEmptyFilter value)? multiSelectIsNotEmpty,
    TResult? Function(DateEqualsFilter value)? dateEquals,
    TResult? Function(DateBeforeFilter value)? dateBefore,
    TResult? Function(DateAfterFilter value)? dateAfter,
    TResult? Function(DateOnOrBeforeFilter value)? dateOnOrBefore,
    TResult? Function(DateOnOrAfterFilter value)? dateOnOrAfter,
    TResult? Function(DateIsEmptyFilter value)? dateIsEmpty,
    TResult? Function(DateIsNotEmptyFilter value)? dateIsNotEmpty,
    TResult? Function(DatePastWeekFilter value)? datePastWeek,
    TResult? Function(DatePastMonthFilter value)? datePastMonth,
    TResult? Function(DatePastYearFilter value)? datePastYear,
    TResult? Function(DateNextWeekFilter value)? dateNextWeek,
    TResult? Function(DateNextMonthFilter value)? dateNextMonth,
    TResult? Function(DateNextYearFilter value)? dateNextYear,
    TResult? Function(PeopleContainsFilter value)? peopleContains,
    TResult? Function(PeopleDoesNotContainFilter value)? peopleDoesNotContain,
    TResult? Function(PeopleIsEmptyFilter value)? peopleIsEmpty,
    TResult? Function(PeopleIsNotEmptyFilter value)? peopleIsNotEmpty,
    TResult? Function(FilesIsEmptyFilter value)? filesIsEmpty,
    TResult? Function(FilesIsNotEmptyFilter value)? filesIsNotEmpty,
    TResult? Function(RelationContainsFilter value)? relationContains,
    TResult? Function(RelationDoesNotContainFilter value)?
        relationDoesNotContain,
    TResult? Function(RelationIsEmptyFilter value)? relationIsEmpty,
    TResult? Function(RelationIsNotEmptyFilter value)? relationIsNotEmpty,
  }) {
    return numberEquals?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(TextEqualsFilter value)? textEquals,
    TResult Function(TextDoesNotEqualFilter value)? textDoesNotEqual,
    TResult Function(TextContainsFilter value)? textContains,
    TResult Function(TextDoesNotContainFilter value)? textDoesNotContain,
    TResult Function(TextStartsWithFilter value)? textStartsWith,
    TResult Function(TextEndsWithFilter value)? textEndsWith,
    TResult Function(TextIsEmptyFilter value)? textIsEmpty,
    TResult Function(TextIsNotEmptyFilter value)? textIsNotEmpty,
    TResult Function(NumberEqualsFilter value)? numberEquals,
    TResult Function(NumberDoesNotEqualFilter value)? numberDoesNotEqual,
    TResult Function(NumberGreaterThanFilter value)? numberGreaterThan,
    TResult Function(NumberLessThanFilter value)? numberLessThan,
    TResult Function(NumberGreaterThanOrEqualFilter value)?
        numberGreaterThanOrEqual,
    TResult Function(NumberLessThanOrEqualFilter value)? numberLessThanOrEqual,
    TResult Function(NumberIsEmptyFilter value)? numberIsEmpty,
    TResult Function(NumberIsNotEmptyFilter value)? numberIsNotEmpty,
    TResult Function(CheckboxEqualsFilter value)? checkboxEquals,
    TResult Function(SelectEqualsFilter value)? selectEquals,
    TResult Function(SelectDoesNotEqualFilter value)? selectDoesNotEqual,
    TResult Function(SelectIsEmptyFilter value)? selectIsEmpty,
    TResult Function(SelectIsNotEmptyFilter value)? selectIsNotEmpty,
    TResult Function(MultiSelectContainsFilter value)? multiSelectContains,
    TResult Function(MultiSelectDoesNotContainFilter value)?
        multiSelectDoesNotContain,
    TResult Function(MultiSelectIsEmptyFilter value)? multiSelectIsEmpty,
    TResult Function(MultiSelectIsNotEmptyFilter value)? multiSelectIsNotEmpty,
    TResult Function(DateEqualsFilter value)? dateEquals,
    TResult Function(DateBeforeFilter value)? dateBefore,
    TResult Function(DateAfterFilter value)? dateAfter,
    TResult Function(DateOnOrBeforeFilter value)? dateOnOrBefore,
    TResult Function(DateOnOrAfterFilter value)? dateOnOrAfter,
    TResult Function(DateIsEmptyFilter value)? dateIsEmpty,
    TResult Function(DateIsNotEmptyFilter value)? dateIsNotEmpty,
    TResult Function(DatePastWeekFilter value)? datePastWeek,
    TResult Function(DatePastMonthFilter value)? datePastMonth,
    TResult Function(DatePastYearFilter value)? datePastYear,
    TResult Function(DateNextWeekFilter value)? dateNextWeek,
    TResult Function(DateNextMonthFilter value)? dateNextMonth,
    TResult Function(DateNextYearFilter value)? dateNextYear,
    TResult Function(PeopleContainsFilter value)? peopleContains,
    TResult Function(PeopleDoesNotContainFilter value)? peopleDoesNotContain,
    TResult Function(PeopleIsEmptyFilter value)? peopleIsEmpty,
    TResult Function(PeopleIsNotEmptyFilter value)? peopleIsNotEmpty,
    TResult Function(FilesIsEmptyFilter value)? filesIsEmpty,
    TResult Function(FilesIsNotEmptyFilter value)? filesIsNotEmpty,
    TResult Function(RelationContainsFilter value)? relationContains,
    TResult Function(RelationDoesNotContainFilter value)?
        relationDoesNotContain,
    TResult Function(RelationIsEmptyFilter value)? relationIsEmpty,
    TResult Function(RelationIsNotEmptyFilter value)? relationIsNotEmpty,
    required TResult orElse(),
  }) {
    if (numberEquals != null) {
      return numberEquals(this);
    }
    return orElse();
  }
}

abstract class NumberEqualsFilter extends PropertyFilter {
  const factory NumberEqualsFilter(final double value) =
      _$NumberEqualsFilterImpl;
  const NumberEqualsFilter._() : super._();

  double get value;

  /// Create a copy of PropertyFilter
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  _$$NumberEqualsFilterImplCopyWith<_$NumberEqualsFilterImpl> get copyWith =>
      throw _privateConstructorUsedError;
}

/// @nodoc
abstract class _$$NumberDoesNotEqualFilterImplCopyWith<$Res> {
  factory _$$NumberDoesNotEqualFilterImplCopyWith(
          _$NumberDoesNotEqualFilterImpl value,
          $Res Function(_$NumberDoesNotEqualFilterImpl) then) =
      __$$NumberDoesNotEqualFilterImplCopyWithImpl<$Res>;
  @useResult
  $Res call({double value});
}

/// @nodoc
class __$$NumberDoesNotEqualFilterImplCopyWithImpl<$Res>
    extends _$PropertyFilterCopyWithImpl<$Res, _$NumberDoesNotEqualFilterImpl>
    implements _$$NumberDoesNotEqualFilterImplCopyWith<$Res> {
  __$$NumberDoesNotEqualFilterImplCopyWithImpl(
      _$NumberDoesNotEqualFilterImpl _value,
      $Res Function(_$NumberDoesNotEqualFilterImpl) _then)
      : super(_value, _then);

  /// Create a copy of PropertyFilter
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? value = null,
  }) {
    return _then(_$NumberDoesNotEqualFilterImpl(
      null == value
          ? _value.value
          : value // ignore: cast_nullable_to_non_nullable
              as double,
    ));
  }
}

/// @nodoc

class _$NumberDoesNotEqualFilterImpl extends NumberDoesNotEqualFilter {
  const _$NumberDoesNotEqualFilterImpl(this.value) : super._();

  @override
  final double value;

  @override
  String toString() {
    return 'PropertyFilter.numberDoesNotEqual(value: $value)';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$NumberDoesNotEqualFilterImpl &&
            (identical(other.value, value) || other.value == value));
  }

  @override
  int get hashCode => Object.hash(runtimeType, value);

  /// Create a copy of PropertyFilter
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  @pragma('vm:prefer-inline')
  _$$NumberDoesNotEqualFilterImplCopyWith<_$NumberDoesNotEqualFilterImpl>
      get copyWith => __$$NumberDoesNotEqualFilterImplCopyWithImpl<
          _$NumberDoesNotEqualFilterImpl>(this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function(String value) textEquals,
    required TResult Function(String value) textDoesNotEqual,
    required TResult Function(String value) textContains,
    required TResult Function(String value) textDoesNotContain,
    required TResult Function(String value) textStartsWith,
    required TResult Function(String value) textEndsWith,
    required TResult Function() textIsEmpty,
    required TResult Function() textIsNotEmpty,
    required TResult Function(double value) numberEquals,
    required TResult Function(double value) numberDoesNotEqual,
    required TResult Function(double value) numberGreaterThan,
    required TResult Function(double value) numberLessThan,
    required TResult Function(double value) numberGreaterThanOrEqual,
    required TResult Function(double value) numberLessThanOrEqual,
    required TResult Function() numberIsEmpty,
    required TResult Function() numberIsNotEmpty,
    required TResult Function(bool value) checkboxEquals,
    required TResult Function(String value) selectEquals,
    required TResult Function(String value) selectDoesNotEqual,
    required TResult Function() selectIsEmpty,
    required TResult Function() selectIsNotEmpty,
    required TResult Function(String value) multiSelectContains,
    required TResult Function(String value) multiSelectDoesNotContain,
    required TResult Function() multiSelectIsEmpty,
    required TResult Function() multiSelectIsNotEmpty,
    required TResult Function(String date) dateEquals,
    required TResult Function(String date) dateBefore,
    required TResult Function(String date) dateAfter,
    required TResult Function(String date) dateOnOrBefore,
    required TResult Function(String date) dateOnOrAfter,
    required TResult Function() dateIsEmpty,
    required TResult Function() dateIsNotEmpty,
    required TResult Function() datePastWeek,
    required TResult Function() datePastMonth,
    required TResult Function() datePastYear,
    required TResult Function() dateNextWeek,
    required TResult Function() dateNextMonth,
    required TResult Function() dateNextYear,
    required TResult Function(String userId) peopleContains,
    required TResult Function(String userId) peopleDoesNotContain,
    required TResult Function() peopleIsEmpty,
    required TResult Function() peopleIsNotEmpty,
    required TResult Function() filesIsEmpty,
    required TResult Function() filesIsNotEmpty,
    required TResult Function(String pageId) relationContains,
    required TResult Function(String pageId) relationDoesNotContain,
    required TResult Function() relationIsEmpty,
    required TResult Function() relationIsNotEmpty,
  }) {
    return numberDoesNotEqual(value);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function(String value)? textEquals,
    TResult? Function(String value)? textDoesNotEqual,
    TResult? Function(String value)? textContains,
    TResult? Function(String value)? textDoesNotContain,
    TResult? Function(String value)? textStartsWith,
    TResult? Function(String value)? textEndsWith,
    TResult? Function()? textIsEmpty,
    TResult? Function()? textIsNotEmpty,
    TResult? Function(double value)? numberEquals,
    TResult? Function(double value)? numberDoesNotEqual,
    TResult? Function(double value)? numberGreaterThan,
    TResult? Function(double value)? numberLessThan,
    TResult? Function(double value)? numberGreaterThanOrEqual,
    TResult? Function(double value)? numberLessThanOrEqual,
    TResult? Function()? numberIsEmpty,
    TResult? Function()? numberIsNotEmpty,
    TResult? Function(bool value)? checkboxEquals,
    TResult? Function(String value)? selectEquals,
    TResult? Function(String value)? selectDoesNotEqual,
    TResult? Function()? selectIsEmpty,
    TResult? Function()? selectIsNotEmpty,
    TResult? Function(String value)? multiSelectContains,
    TResult? Function(String value)? multiSelectDoesNotContain,
    TResult? Function()? multiSelectIsEmpty,
    TResult? Function()? multiSelectIsNotEmpty,
    TResult? Function(String date)? dateEquals,
    TResult? Function(String date)? dateBefore,
    TResult? Function(String date)? dateAfter,
    TResult? Function(String date)? dateOnOrBefore,
    TResult? Function(String date)? dateOnOrAfter,
    TResult? Function()? dateIsEmpty,
    TResult? Function()? dateIsNotEmpty,
    TResult? Function()? datePastWeek,
    TResult? Function()? datePastMonth,
    TResult? Function()? datePastYear,
    TResult? Function()? dateNextWeek,
    TResult? Function()? dateNextMonth,
    TResult? Function()? dateNextYear,
    TResult? Function(String userId)? peopleContains,
    TResult? Function(String userId)? peopleDoesNotContain,
    TResult? Function()? peopleIsEmpty,
    TResult? Function()? peopleIsNotEmpty,
    TResult? Function()? filesIsEmpty,
    TResult? Function()? filesIsNotEmpty,
    TResult? Function(String pageId)? relationContains,
    TResult? Function(String pageId)? relationDoesNotContain,
    TResult? Function()? relationIsEmpty,
    TResult? Function()? relationIsNotEmpty,
  }) {
    return numberDoesNotEqual?.call(value);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function(String value)? textEquals,
    TResult Function(String value)? textDoesNotEqual,
    TResult Function(String value)? textContains,
    TResult Function(String value)? textDoesNotContain,
    TResult Function(String value)? textStartsWith,
    TResult Function(String value)? textEndsWith,
    TResult Function()? textIsEmpty,
    TResult Function()? textIsNotEmpty,
    TResult Function(double value)? numberEquals,
    TResult Function(double value)? numberDoesNotEqual,
    TResult Function(double value)? numberGreaterThan,
    TResult Function(double value)? numberLessThan,
    TResult Function(double value)? numberGreaterThanOrEqual,
    TResult Function(double value)? numberLessThanOrEqual,
    TResult Function()? numberIsEmpty,
    TResult Function()? numberIsNotEmpty,
    TResult Function(bool value)? checkboxEquals,
    TResult Function(String value)? selectEquals,
    TResult Function(String value)? selectDoesNotEqual,
    TResult Function()? selectIsEmpty,
    TResult Function()? selectIsNotEmpty,
    TResult Function(String value)? multiSelectContains,
    TResult Function(String value)? multiSelectDoesNotContain,
    TResult Function()? multiSelectIsEmpty,
    TResult Function()? multiSelectIsNotEmpty,
    TResult Function(String date)? dateEquals,
    TResult Function(String date)? dateBefore,
    TResult Function(String date)? dateAfter,
    TResult Function(String date)? dateOnOrBefore,
    TResult Function(String date)? dateOnOrAfter,
    TResult Function()? dateIsEmpty,
    TResult Function()? dateIsNotEmpty,
    TResult Function()? datePastWeek,
    TResult Function()? datePastMonth,
    TResult Function()? datePastYear,
    TResult Function()? dateNextWeek,
    TResult Function()? dateNextMonth,
    TResult Function()? dateNextYear,
    TResult Function(String userId)? peopleContains,
    TResult Function(String userId)? peopleDoesNotContain,
    TResult Function()? peopleIsEmpty,
    TResult Function()? peopleIsNotEmpty,
    TResult Function()? filesIsEmpty,
    TResult Function()? filesIsNotEmpty,
    TResult Function(String pageId)? relationContains,
    TResult Function(String pageId)? relationDoesNotContain,
    TResult Function()? relationIsEmpty,
    TResult Function()? relationIsNotEmpty,
    required TResult orElse(),
  }) {
    if (numberDoesNotEqual != null) {
      return numberDoesNotEqual(value);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(TextEqualsFilter value) textEquals,
    required TResult Function(TextDoesNotEqualFilter value) textDoesNotEqual,
    required TResult Function(TextContainsFilter value) textContains,
    required TResult Function(TextDoesNotContainFilter value)
        textDoesNotContain,
    required TResult Function(TextStartsWithFilter value) textStartsWith,
    required TResult Function(TextEndsWithFilter value) textEndsWith,
    required TResult Function(TextIsEmptyFilter value) textIsEmpty,
    required TResult Function(TextIsNotEmptyFilter value) textIsNotEmpty,
    required TResult Function(NumberEqualsFilter value) numberEquals,
    required TResult Function(NumberDoesNotEqualFilter value)
        numberDoesNotEqual,
    required TResult Function(NumberGreaterThanFilter value) numberGreaterThan,
    required TResult Function(NumberLessThanFilter value) numberLessThan,
    required TResult Function(NumberGreaterThanOrEqualFilter value)
        numberGreaterThanOrEqual,
    required TResult Function(NumberLessThanOrEqualFilter value)
        numberLessThanOrEqual,
    required TResult Function(NumberIsEmptyFilter value) numberIsEmpty,
    required TResult Function(NumberIsNotEmptyFilter value) numberIsNotEmpty,
    required TResult Function(CheckboxEqualsFilter value) checkboxEquals,
    required TResult Function(SelectEqualsFilter value) selectEquals,
    required TResult Function(SelectDoesNotEqualFilter value)
        selectDoesNotEqual,
    required TResult Function(SelectIsEmptyFilter value) selectIsEmpty,
    required TResult Function(SelectIsNotEmptyFilter value) selectIsNotEmpty,
    required TResult Function(MultiSelectContainsFilter value)
        multiSelectContains,
    required TResult Function(MultiSelectDoesNotContainFilter value)
        multiSelectDoesNotContain,
    required TResult Function(MultiSelectIsEmptyFilter value)
        multiSelectIsEmpty,
    required TResult Function(MultiSelectIsNotEmptyFilter value)
        multiSelectIsNotEmpty,
    required TResult Function(DateEqualsFilter value) dateEquals,
    required TResult Function(DateBeforeFilter value) dateBefore,
    required TResult Function(DateAfterFilter value) dateAfter,
    required TResult Function(DateOnOrBeforeFilter value) dateOnOrBefore,
    required TResult Function(DateOnOrAfterFilter value) dateOnOrAfter,
    required TResult Function(DateIsEmptyFilter value) dateIsEmpty,
    required TResult Function(DateIsNotEmptyFilter value) dateIsNotEmpty,
    required TResult Function(DatePastWeekFilter value) datePastWeek,
    required TResult Function(DatePastMonthFilter value) datePastMonth,
    required TResult Function(DatePastYearFilter value) datePastYear,
    required TResult Function(DateNextWeekFilter value) dateNextWeek,
    required TResult Function(DateNextMonthFilter value) dateNextMonth,
    required TResult Function(DateNextYearFilter value) dateNextYear,
    required TResult Function(PeopleContainsFilter value) peopleContains,
    required TResult Function(PeopleDoesNotContainFilter value)
        peopleDoesNotContain,
    required TResult Function(PeopleIsEmptyFilter value) peopleIsEmpty,
    required TResult Function(PeopleIsNotEmptyFilter value) peopleIsNotEmpty,
    required TResult Function(FilesIsEmptyFilter value) filesIsEmpty,
    required TResult Function(FilesIsNotEmptyFilter value) filesIsNotEmpty,
    required TResult Function(RelationContainsFilter value) relationContains,
    required TResult Function(RelationDoesNotContainFilter value)
        relationDoesNotContain,
    required TResult Function(RelationIsEmptyFilter value) relationIsEmpty,
    required TResult Function(RelationIsNotEmptyFilter value)
        relationIsNotEmpty,
  }) {
    return numberDoesNotEqual(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(TextEqualsFilter value)? textEquals,
    TResult? Function(TextDoesNotEqualFilter value)? textDoesNotEqual,
    TResult? Function(TextContainsFilter value)? textContains,
    TResult? Function(TextDoesNotContainFilter value)? textDoesNotContain,
    TResult? Function(TextStartsWithFilter value)? textStartsWith,
    TResult? Function(TextEndsWithFilter value)? textEndsWith,
    TResult? Function(TextIsEmptyFilter value)? textIsEmpty,
    TResult? Function(TextIsNotEmptyFilter value)? textIsNotEmpty,
    TResult? Function(NumberEqualsFilter value)? numberEquals,
    TResult? Function(NumberDoesNotEqualFilter value)? numberDoesNotEqual,
    TResult? Function(NumberGreaterThanFilter value)? numberGreaterThan,
    TResult? Function(NumberLessThanFilter value)? numberLessThan,
    TResult? Function(NumberGreaterThanOrEqualFilter value)?
        numberGreaterThanOrEqual,
    TResult? Function(NumberLessThanOrEqualFilter value)? numberLessThanOrEqual,
    TResult? Function(NumberIsEmptyFilter value)? numberIsEmpty,
    TResult? Function(NumberIsNotEmptyFilter value)? numberIsNotEmpty,
    TResult? Function(CheckboxEqualsFilter value)? checkboxEquals,
    TResult? Function(SelectEqualsFilter value)? selectEquals,
    TResult? Function(SelectDoesNotEqualFilter value)? selectDoesNotEqual,
    TResult? Function(SelectIsEmptyFilter value)? selectIsEmpty,
    TResult? Function(SelectIsNotEmptyFilter value)? selectIsNotEmpty,
    TResult? Function(MultiSelectContainsFilter value)? multiSelectContains,
    TResult? Function(MultiSelectDoesNotContainFilter value)?
        multiSelectDoesNotContain,
    TResult? Function(MultiSelectIsEmptyFilter value)? multiSelectIsEmpty,
    TResult? Function(MultiSelectIsNotEmptyFilter value)? multiSelectIsNotEmpty,
    TResult? Function(DateEqualsFilter value)? dateEquals,
    TResult? Function(DateBeforeFilter value)? dateBefore,
    TResult? Function(DateAfterFilter value)? dateAfter,
    TResult? Function(DateOnOrBeforeFilter value)? dateOnOrBefore,
    TResult? Function(DateOnOrAfterFilter value)? dateOnOrAfter,
    TResult? Function(DateIsEmptyFilter value)? dateIsEmpty,
    TResult? Function(DateIsNotEmptyFilter value)? dateIsNotEmpty,
    TResult? Function(DatePastWeekFilter value)? datePastWeek,
    TResult? Function(DatePastMonthFilter value)? datePastMonth,
    TResult? Function(DatePastYearFilter value)? datePastYear,
    TResult? Function(DateNextWeekFilter value)? dateNextWeek,
    TResult? Function(DateNextMonthFilter value)? dateNextMonth,
    TResult? Function(DateNextYearFilter value)? dateNextYear,
    TResult? Function(PeopleContainsFilter value)? peopleContains,
    TResult? Function(PeopleDoesNotContainFilter value)? peopleDoesNotContain,
    TResult? Function(PeopleIsEmptyFilter value)? peopleIsEmpty,
    TResult? Function(PeopleIsNotEmptyFilter value)? peopleIsNotEmpty,
    TResult? Function(FilesIsEmptyFilter value)? filesIsEmpty,
    TResult? Function(FilesIsNotEmptyFilter value)? filesIsNotEmpty,
    TResult? Function(RelationContainsFilter value)? relationContains,
    TResult? Function(RelationDoesNotContainFilter value)?
        relationDoesNotContain,
    TResult? Function(RelationIsEmptyFilter value)? relationIsEmpty,
    TResult? Function(RelationIsNotEmptyFilter value)? relationIsNotEmpty,
  }) {
    return numberDoesNotEqual?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(TextEqualsFilter value)? textEquals,
    TResult Function(TextDoesNotEqualFilter value)? textDoesNotEqual,
    TResult Function(TextContainsFilter value)? textContains,
    TResult Function(TextDoesNotContainFilter value)? textDoesNotContain,
    TResult Function(TextStartsWithFilter value)? textStartsWith,
    TResult Function(TextEndsWithFilter value)? textEndsWith,
    TResult Function(TextIsEmptyFilter value)? textIsEmpty,
    TResult Function(TextIsNotEmptyFilter value)? textIsNotEmpty,
    TResult Function(NumberEqualsFilter value)? numberEquals,
    TResult Function(NumberDoesNotEqualFilter value)? numberDoesNotEqual,
    TResult Function(NumberGreaterThanFilter value)? numberGreaterThan,
    TResult Function(NumberLessThanFilter value)? numberLessThan,
    TResult Function(NumberGreaterThanOrEqualFilter value)?
        numberGreaterThanOrEqual,
    TResult Function(NumberLessThanOrEqualFilter value)? numberLessThanOrEqual,
    TResult Function(NumberIsEmptyFilter value)? numberIsEmpty,
    TResult Function(NumberIsNotEmptyFilter value)? numberIsNotEmpty,
    TResult Function(CheckboxEqualsFilter value)? checkboxEquals,
    TResult Function(SelectEqualsFilter value)? selectEquals,
    TResult Function(SelectDoesNotEqualFilter value)? selectDoesNotEqual,
    TResult Function(SelectIsEmptyFilter value)? selectIsEmpty,
    TResult Function(SelectIsNotEmptyFilter value)? selectIsNotEmpty,
    TResult Function(MultiSelectContainsFilter value)? multiSelectContains,
    TResult Function(MultiSelectDoesNotContainFilter value)?
        multiSelectDoesNotContain,
    TResult Function(MultiSelectIsEmptyFilter value)? multiSelectIsEmpty,
    TResult Function(MultiSelectIsNotEmptyFilter value)? multiSelectIsNotEmpty,
    TResult Function(DateEqualsFilter value)? dateEquals,
    TResult Function(DateBeforeFilter value)? dateBefore,
    TResult Function(DateAfterFilter value)? dateAfter,
    TResult Function(DateOnOrBeforeFilter value)? dateOnOrBefore,
    TResult Function(DateOnOrAfterFilter value)? dateOnOrAfter,
    TResult Function(DateIsEmptyFilter value)? dateIsEmpty,
    TResult Function(DateIsNotEmptyFilter value)? dateIsNotEmpty,
    TResult Function(DatePastWeekFilter value)? datePastWeek,
    TResult Function(DatePastMonthFilter value)? datePastMonth,
    TResult Function(DatePastYearFilter value)? datePastYear,
    TResult Function(DateNextWeekFilter value)? dateNextWeek,
    TResult Function(DateNextMonthFilter value)? dateNextMonth,
    TResult Function(DateNextYearFilter value)? dateNextYear,
    TResult Function(PeopleContainsFilter value)? peopleContains,
    TResult Function(PeopleDoesNotContainFilter value)? peopleDoesNotContain,
    TResult Function(PeopleIsEmptyFilter value)? peopleIsEmpty,
    TResult Function(PeopleIsNotEmptyFilter value)? peopleIsNotEmpty,
    TResult Function(FilesIsEmptyFilter value)? filesIsEmpty,
    TResult Function(FilesIsNotEmptyFilter value)? filesIsNotEmpty,
    TResult Function(RelationContainsFilter value)? relationContains,
    TResult Function(RelationDoesNotContainFilter value)?
        relationDoesNotContain,
    TResult Function(RelationIsEmptyFilter value)? relationIsEmpty,
    TResult Function(RelationIsNotEmptyFilter value)? relationIsNotEmpty,
    required TResult orElse(),
  }) {
    if (numberDoesNotEqual != null) {
      return numberDoesNotEqual(this);
    }
    return orElse();
  }
}

abstract class NumberDoesNotEqualFilter extends PropertyFilter {
  const factory NumberDoesNotEqualFilter(final double value) =
      _$NumberDoesNotEqualFilterImpl;
  const NumberDoesNotEqualFilter._() : super._();

  double get value;

  /// Create a copy of PropertyFilter
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  _$$NumberDoesNotEqualFilterImplCopyWith<_$NumberDoesNotEqualFilterImpl>
      get copyWith => throw _privateConstructorUsedError;
}

/// @nodoc
abstract class _$$NumberGreaterThanFilterImplCopyWith<$Res> {
  factory _$$NumberGreaterThanFilterImplCopyWith(
          _$NumberGreaterThanFilterImpl value,
          $Res Function(_$NumberGreaterThanFilterImpl) then) =
      __$$NumberGreaterThanFilterImplCopyWithImpl<$Res>;
  @useResult
  $Res call({double value});
}

/// @nodoc
class __$$NumberGreaterThanFilterImplCopyWithImpl<$Res>
    extends _$PropertyFilterCopyWithImpl<$Res, _$NumberGreaterThanFilterImpl>
    implements _$$NumberGreaterThanFilterImplCopyWith<$Res> {
  __$$NumberGreaterThanFilterImplCopyWithImpl(
      _$NumberGreaterThanFilterImpl _value,
      $Res Function(_$NumberGreaterThanFilterImpl) _then)
      : super(_value, _then);

  /// Create a copy of PropertyFilter
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? value = null,
  }) {
    return _then(_$NumberGreaterThanFilterImpl(
      null == value
          ? _value.value
          : value // ignore: cast_nullable_to_non_nullable
              as double,
    ));
  }
}

/// @nodoc

class _$NumberGreaterThanFilterImpl extends NumberGreaterThanFilter {
  const _$NumberGreaterThanFilterImpl(this.value) : super._();

  @override
  final double value;

  @override
  String toString() {
    return 'PropertyFilter.numberGreaterThan(value: $value)';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$NumberGreaterThanFilterImpl &&
            (identical(other.value, value) || other.value == value));
  }

  @override
  int get hashCode => Object.hash(runtimeType, value);

  /// Create a copy of PropertyFilter
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  @pragma('vm:prefer-inline')
  _$$NumberGreaterThanFilterImplCopyWith<_$NumberGreaterThanFilterImpl>
      get copyWith => __$$NumberGreaterThanFilterImplCopyWithImpl<
          _$NumberGreaterThanFilterImpl>(this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function(String value) textEquals,
    required TResult Function(String value) textDoesNotEqual,
    required TResult Function(String value) textContains,
    required TResult Function(String value) textDoesNotContain,
    required TResult Function(String value) textStartsWith,
    required TResult Function(String value) textEndsWith,
    required TResult Function() textIsEmpty,
    required TResult Function() textIsNotEmpty,
    required TResult Function(double value) numberEquals,
    required TResult Function(double value) numberDoesNotEqual,
    required TResult Function(double value) numberGreaterThan,
    required TResult Function(double value) numberLessThan,
    required TResult Function(double value) numberGreaterThanOrEqual,
    required TResult Function(double value) numberLessThanOrEqual,
    required TResult Function() numberIsEmpty,
    required TResult Function() numberIsNotEmpty,
    required TResult Function(bool value) checkboxEquals,
    required TResult Function(String value) selectEquals,
    required TResult Function(String value) selectDoesNotEqual,
    required TResult Function() selectIsEmpty,
    required TResult Function() selectIsNotEmpty,
    required TResult Function(String value) multiSelectContains,
    required TResult Function(String value) multiSelectDoesNotContain,
    required TResult Function() multiSelectIsEmpty,
    required TResult Function() multiSelectIsNotEmpty,
    required TResult Function(String date) dateEquals,
    required TResult Function(String date) dateBefore,
    required TResult Function(String date) dateAfter,
    required TResult Function(String date) dateOnOrBefore,
    required TResult Function(String date) dateOnOrAfter,
    required TResult Function() dateIsEmpty,
    required TResult Function() dateIsNotEmpty,
    required TResult Function() datePastWeek,
    required TResult Function() datePastMonth,
    required TResult Function() datePastYear,
    required TResult Function() dateNextWeek,
    required TResult Function() dateNextMonth,
    required TResult Function() dateNextYear,
    required TResult Function(String userId) peopleContains,
    required TResult Function(String userId) peopleDoesNotContain,
    required TResult Function() peopleIsEmpty,
    required TResult Function() peopleIsNotEmpty,
    required TResult Function() filesIsEmpty,
    required TResult Function() filesIsNotEmpty,
    required TResult Function(String pageId) relationContains,
    required TResult Function(String pageId) relationDoesNotContain,
    required TResult Function() relationIsEmpty,
    required TResult Function() relationIsNotEmpty,
  }) {
    return numberGreaterThan(value);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function(String value)? textEquals,
    TResult? Function(String value)? textDoesNotEqual,
    TResult? Function(String value)? textContains,
    TResult? Function(String value)? textDoesNotContain,
    TResult? Function(String value)? textStartsWith,
    TResult? Function(String value)? textEndsWith,
    TResult? Function()? textIsEmpty,
    TResult? Function()? textIsNotEmpty,
    TResult? Function(double value)? numberEquals,
    TResult? Function(double value)? numberDoesNotEqual,
    TResult? Function(double value)? numberGreaterThan,
    TResult? Function(double value)? numberLessThan,
    TResult? Function(double value)? numberGreaterThanOrEqual,
    TResult? Function(double value)? numberLessThanOrEqual,
    TResult? Function()? numberIsEmpty,
    TResult? Function()? numberIsNotEmpty,
    TResult? Function(bool value)? checkboxEquals,
    TResult? Function(String value)? selectEquals,
    TResult? Function(String value)? selectDoesNotEqual,
    TResult? Function()? selectIsEmpty,
    TResult? Function()? selectIsNotEmpty,
    TResult? Function(String value)? multiSelectContains,
    TResult? Function(String value)? multiSelectDoesNotContain,
    TResult? Function()? multiSelectIsEmpty,
    TResult? Function()? multiSelectIsNotEmpty,
    TResult? Function(String date)? dateEquals,
    TResult? Function(String date)? dateBefore,
    TResult? Function(String date)? dateAfter,
    TResult? Function(String date)? dateOnOrBefore,
    TResult? Function(String date)? dateOnOrAfter,
    TResult? Function()? dateIsEmpty,
    TResult? Function()? dateIsNotEmpty,
    TResult? Function()? datePastWeek,
    TResult? Function()? datePastMonth,
    TResult? Function()? datePastYear,
    TResult? Function()? dateNextWeek,
    TResult? Function()? dateNextMonth,
    TResult? Function()? dateNextYear,
    TResult? Function(String userId)? peopleContains,
    TResult? Function(String userId)? peopleDoesNotContain,
    TResult? Function()? peopleIsEmpty,
    TResult? Function()? peopleIsNotEmpty,
    TResult? Function()? filesIsEmpty,
    TResult? Function()? filesIsNotEmpty,
    TResult? Function(String pageId)? relationContains,
    TResult? Function(String pageId)? relationDoesNotContain,
    TResult? Function()? relationIsEmpty,
    TResult? Function()? relationIsNotEmpty,
  }) {
    return numberGreaterThan?.call(value);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function(String value)? textEquals,
    TResult Function(String value)? textDoesNotEqual,
    TResult Function(String value)? textContains,
    TResult Function(String value)? textDoesNotContain,
    TResult Function(String value)? textStartsWith,
    TResult Function(String value)? textEndsWith,
    TResult Function()? textIsEmpty,
    TResult Function()? textIsNotEmpty,
    TResult Function(double value)? numberEquals,
    TResult Function(double value)? numberDoesNotEqual,
    TResult Function(double value)? numberGreaterThan,
    TResult Function(double value)? numberLessThan,
    TResult Function(double value)? numberGreaterThanOrEqual,
    TResult Function(double value)? numberLessThanOrEqual,
    TResult Function()? numberIsEmpty,
    TResult Function()? numberIsNotEmpty,
    TResult Function(bool value)? checkboxEquals,
    TResult Function(String value)? selectEquals,
    TResult Function(String value)? selectDoesNotEqual,
    TResult Function()? selectIsEmpty,
    TResult Function()? selectIsNotEmpty,
    TResult Function(String value)? multiSelectContains,
    TResult Function(String value)? multiSelectDoesNotContain,
    TResult Function()? multiSelectIsEmpty,
    TResult Function()? multiSelectIsNotEmpty,
    TResult Function(String date)? dateEquals,
    TResult Function(String date)? dateBefore,
    TResult Function(String date)? dateAfter,
    TResult Function(String date)? dateOnOrBefore,
    TResult Function(String date)? dateOnOrAfter,
    TResult Function()? dateIsEmpty,
    TResult Function()? dateIsNotEmpty,
    TResult Function()? datePastWeek,
    TResult Function()? datePastMonth,
    TResult Function()? datePastYear,
    TResult Function()? dateNextWeek,
    TResult Function()? dateNextMonth,
    TResult Function()? dateNextYear,
    TResult Function(String userId)? peopleContains,
    TResult Function(String userId)? peopleDoesNotContain,
    TResult Function()? peopleIsEmpty,
    TResult Function()? peopleIsNotEmpty,
    TResult Function()? filesIsEmpty,
    TResult Function()? filesIsNotEmpty,
    TResult Function(String pageId)? relationContains,
    TResult Function(String pageId)? relationDoesNotContain,
    TResult Function()? relationIsEmpty,
    TResult Function()? relationIsNotEmpty,
    required TResult orElse(),
  }) {
    if (numberGreaterThan != null) {
      return numberGreaterThan(value);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(TextEqualsFilter value) textEquals,
    required TResult Function(TextDoesNotEqualFilter value) textDoesNotEqual,
    required TResult Function(TextContainsFilter value) textContains,
    required TResult Function(TextDoesNotContainFilter value)
        textDoesNotContain,
    required TResult Function(TextStartsWithFilter value) textStartsWith,
    required TResult Function(TextEndsWithFilter value) textEndsWith,
    required TResult Function(TextIsEmptyFilter value) textIsEmpty,
    required TResult Function(TextIsNotEmptyFilter value) textIsNotEmpty,
    required TResult Function(NumberEqualsFilter value) numberEquals,
    required TResult Function(NumberDoesNotEqualFilter value)
        numberDoesNotEqual,
    required TResult Function(NumberGreaterThanFilter value) numberGreaterThan,
    required TResult Function(NumberLessThanFilter value) numberLessThan,
    required TResult Function(NumberGreaterThanOrEqualFilter value)
        numberGreaterThanOrEqual,
    required TResult Function(NumberLessThanOrEqualFilter value)
        numberLessThanOrEqual,
    required TResult Function(NumberIsEmptyFilter value) numberIsEmpty,
    required TResult Function(NumberIsNotEmptyFilter value) numberIsNotEmpty,
    required TResult Function(CheckboxEqualsFilter value) checkboxEquals,
    required TResult Function(SelectEqualsFilter value) selectEquals,
    required TResult Function(SelectDoesNotEqualFilter value)
        selectDoesNotEqual,
    required TResult Function(SelectIsEmptyFilter value) selectIsEmpty,
    required TResult Function(SelectIsNotEmptyFilter value) selectIsNotEmpty,
    required TResult Function(MultiSelectContainsFilter value)
        multiSelectContains,
    required TResult Function(MultiSelectDoesNotContainFilter value)
        multiSelectDoesNotContain,
    required TResult Function(MultiSelectIsEmptyFilter value)
        multiSelectIsEmpty,
    required TResult Function(MultiSelectIsNotEmptyFilter value)
        multiSelectIsNotEmpty,
    required TResult Function(DateEqualsFilter value) dateEquals,
    required TResult Function(DateBeforeFilter value) dateBefore,
    required TResult Function(DateAfterFilter value) dateAfter,
    required TResult Function(DateOnOrBeforeFilter value) dateOnOrBefore,
    required TResult Function(DateOnOrAfterFilter value) dateOnOrAfter,
    required TResult Function(DateIsEmptyFilter value) dateIsEmpty,
    required TResult Function(DateIsNotEmptyFilter value) dateIsNotEmpty,
    required TResult Function(DatePastWeekFilter value) datePastWeek,
    required TResult Function(DatePastMonthFilter value) datePastMonth,
    required TResult Function(DatePastYearFilter value) datePastYear,
    required TResult Function(DateNextWeekFilter value) dateNextWeek,
    required TResult Function(DateNextMonthFilter value) dateNextMonth,
    required TResult Function(DateNextYearFilter value) dateNextYear,
    required TResult Function(PeopleContainsFilter value) peopleContains,
    required TResult Function(PeopleDoesNotContainFilter value)
        peopleDoesNotContain,
    required TResult Function(PeopleIsEmptyFilter value) peopleIsEmpty,
    required TResult Function(PeopleIsNotEmptyFilter value) peopleIsNotEmpty,
    required TResult Function(FilesIsEmptyFilter value) filesIsEmpty,
    required TResult Function(FilesIsNotEmptyFilter value) filesIsNotEmpty,
    required TResult Function(RelationContainsFilter value) relationContains,
    required TResult Function(RelationDoesNotContainFilter value)
        relationDoesNotContain,
    required TResult Function(RelationIsEmptyFilter value) relationIsEmpty,
    required TResult Function(RelationIsNotEmptyFilter value)
        relationIsNotEmpty,
  }) {
    return numberGreaterThan(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(TextEqualsFilter value)? textEquals,
    TResult? Function(TextDoesNotEqualFilter value)? textDoesNotEqual,
    TResult? Function(TextContainsFilter value)? textContains,
    TResult? Function(TextDoesNotContainFilter value)? textDoesNotContain,
    TResult? Function(TextStartsWithFilter value)? textStartsWith,
    TResult? Function(TextEndsWithFilter value)? textEndsWith,
    TResult? Function(TextIsEmptyFilter value)? textIsEmpty,
    TResult? Function(TextIsNotEmptyFilter value)? textIsNotEmpty,
    TResult? Function(NumberEqualsFilter value)? numberEquals,
    TResult? Function(NumberDoesNotEqualFilter value)? numberDoesNotEqual,
    TResult? Function(NumberGreaterThanFilter value)? numberGreaterThan,
    TResult? Function(NumberLessThanFilter value)? numberLessThan,
    TResult? Function(NumberGreaterThanOrEqualFilter value)?
        numberGreaterThanOrEqual,
    TResult? Function(NumberLessThanOrEqualFilter value)? numberLessThanOrEqual,
    TResult? Function(NumberIsEmptyFilter value)? numberIsEmpty,
    TResult? Function(NumberIsNotEmptyFilter value)? numberIsNotEmpty,
    TResult? Function(CheckboxEqualsFilter value)? checkboxEquals,
    TResult? Function(SelectEqualsFilter value)? selectEquals,
    TResult? Function(SelectDoesNotEqualFilter value)? selectDoesNotEqual,
    TResult? Function(SelectIsEmptyFilter value)? selectIsEmpty,
    TResult? Function(SelectIsNotEmptyFilter value)? selectIsNotEmpty,
    TResult? Function(MultiSelectContainsFilter value)? multiSelectContains,
    TResult? Function(MultiSelectDoesNotContainFilter value)?
        multiSelectDoesNotContain,
    TResult? Function(MultiSelectIsEmptyFilter value)? multiSelectIsEmpty,
    TResult? Function(MultiSelectIsNotEmptyFilter value)? multiSelectIsNotEmpty,
    TResult? Function(DateEqualsFilter value)? dateEquals,
    TResult? Function(DateBeforeFilter value)? dateBefore,
    TResult? Function(DateAfterFilter value)? dateAfter,
    TResult? Function(DateOnOrBeforeFilter value)? dateOnOrBefore,
    TResult? Function(DateOnOrAfterFilter value)? dateOnOrAfter,
    TResult? Function(DateIsEmptyFilter value)? dateIsEmpty,
    TResult? Function(DateIsNotEmptyFilter value)? dateIsNotEmpty,
    TResult? Function(DatePastWeekFilter value)? datePastWeek,
    TResult? Function(DatePastMonthFilter value)? datePastMonth,
    TResult? Function(DatePastYearFilter value)? datePastYear,
    TResult? Function(DateNextWeekFilter value)? dateNextWeek,
    TResult? Function(DateNextMonthFilter value)? dateNextMonth,
    TResult? Function(DateNextYearFilter value)? dateNextYear,
    TResult? Function(PeopleContainsFilter value)? peopleContains,
    TResult? Function(PeopleDoesNotContainFilter value)? peopleDoesNotContain,
    TResult? Function(PeopleIsEmptyFilter value)? peopleIsEmpty,
    TResult? Function(PeopleIsNotEmptyFilter value)? peopleIsNotEmpty,
    TResult? Function(FilesIsEmptyFilter value)? filesIsEmpty,
    TResult? Function(FilesIsNotEmptyFilter value)? filesIsNotEmpty,
    TResult? Function(RelationContainsFilter value)? relationContains,
    TResult? Function(RelationDoesNotContainFilter value)?
        relationDoesNotContain,
    TResult? Function(RelationIsEmptyFilter value)? relationIsEmpty,
    TResult? Function(RelationIsNotEmptyFilter value)? relationIsNotEmpty,
  }) {
    return numberGreaterThan?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(TextEqualsFilter value)? textEquals,
    TResult Function(TextDoesNotEqualFilter value)? textDoesNotEqual,
    TResult Function(TextContainsFilter value)? textContains,
    TResult Function(TextDoesNotContainFilter value)? textDoesNotContain,
    TResult Function(TextStartsWithFilter value)? textStartsWith,
    TResult Function(TextEndsWithFilter value)? textEndsWith,
    TResult Function(TextIsEmptyFilter value)? textIsEmpty,
    TResult Function(TextIsNotEmptyFilter value)? textIsNotEmpty,
    TResult Function(NumberEqualsFilter value)? numberEquals,
    TResult Function(NumberDoesNotEqualFilter value)? numberDoesNotEqual,
    TResult Function(NumberGreaterThanFilter value)? numberGreaterThan,
    TResult Function(NumberLessThanFilter value)? numberLessThan,
    TResult Function(NumberGreaterThanOrEqualFilter value)?
        numberGreaterThanOrEqual,
    TResult Function(NumberLessThanOrEqualFilter value)? numberLessThanOrEqual,
    TResult Function(NumberIsEmptyFilter value)? numberIsEmpty,
    TResult Function(NumberIsNotEmptyFilter value)? numberIsNotEmpty,
    TResult Function(CheckboxEqualsFilter value)? checkboxEquals,
    TResult Function(SelectEqualsFilter value)? selectEquals,
    TResult Function(SelectDoesNotEqualFilter value)? selectDoesNotEqual,
    TResult Function(SelectIsEmptyFilter value)? selectIsEmpty,
    TResult Function(SelectIsNotEmptyFilter value)? selectIsNotEmpty,
    TResult Function(MultiSelectContainsFilter value)? multiSelectContains,
    TResult Function(MultiSelectDoesNotContainFilter value)?
        multiSelectDoesNotContain,
    TResult Function(MultiSelectIsEmptyFilter value)? multiSelectIsEmpty,
    TResult Function(MultiSelectIsNotEmptyFilter value)? multiSelectIsNotEmpty,
    TResult Function(DateEqualsFilter value)? dateEquals,
    TResult Function(DateBeforeFilter value)? dateBefore,
    TResult Function(DateAfterFilter value)? dateAfter,
    TResult Function(DateOnOrBeforeFilter value)? dateOnOrBefore,
    TResult Function(DateOnOrAfterFilter value)? dateOnOrAfter,
    TResult Function(DateIsEmptyFilter value)? dateIsEmpty,
    TResult Function(DateIsNotEmptyFilter value)? dateIsNotEmpty,
    TResult Function(DatePastWeekFilter value)? datePastWeek,
    TResult Function(DatePastMonthFilter value)? datePastMonth,
    TResult Function(DatePastYearFilter value)? datePastYear,
    TResult Function(DateNextWeekFilter value)? dateNextWeek,
    TResult Function(DateNextMonthFilter value)? dateNextMonth,
    TResult Function(DateNextYearFilter value)? dateNextYear,
    TResult Function(PeopleContainsFilter value)? peopleContains,
    TResult Function(PeopleDoesNotContainFilter value)? peopleDoesNotContain,
    TResult Function(PeopleIsEmptyFilter value)? peopleIsEmpty,
    TResult Function(PeopleIsNotEmptyFilter value)? peopleIsNotEmpty,
    TResult Function(FilesIsEmptyFilter value)? filesIsEmpty,
    TResult Function(FilesIsNotEmptyFilter value)? filesIsNotEmpty,
    TResult Function(RelationContainsFilter value)? relationContains,
    TResult Function(RelationDoesNotContainFilter value)?
        relationDoesNotContain,
    TResult Function(RelationIsEmptyFilter value)? relationIsEmpty,
    TResult Function(RelationIsNotEmptyFilter value)? relationIsNotEmpty,
    required TResult orElse(),
  }) {
    if (numberGreaterThan != null) {
      return numberGreaterThan(this);
    }
    return orElse();
  }
}

abstract class NumberGreaterThanFilter extends PropertyFilter {
  const factory NumberGreaterThanFilter(final double value) =
      _$NumberGreaterThanFilterImpl;
  const NumberGreaterThanFilter._() : super._();

  double get value;

  /// Create a copy of PropertyFilter
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  _$$NumberGreaterThanFilterImplCopyWith<_$NumberGreaterThanFilterImpl>
      get copyWith => throw _privateConstructorUsedError;
}

/// @nodoc
abstract class _$$NumberLessThanFilterImplCopyWith<$Res> {
  factory _$$NumberLessThanFilterImplCopyWith(_$NumberLessThanFilterImpl value,
          $Res Function(_$NumberLessThanFilterImpl) then) =
      __$$NumberLessThanFilterImplCopyWithImpl<$Res>;
  @useResult
  $Res call({double value});
}

/// @nodoc
class __$$NumberLessThanFilterImplCopyWithImpl<$Res>
    extends _$PropertyFilterCopyWithImpl<$Res, _$NumberLessThanFilterImpl>
    implements _$$NumberLessThanFilterImplCopyWith<$Res> {
  __$$NumberLessThanFilterImplCopyWithImpl(_$NumberLessThanFilterImpl _value,
      $Res Function(_$NumberLessThanFilterImpl) _then)
      : super(_value, _then);

  /// Create a copy of PropertyFilter
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? value = null,
  }) {
    return _then(_$NumberLessThanFilterImpl(
      null == value
          ? _value.value
          : value // ignore: cast_nullable_to_non_nullable
              as double,
    ));
  }
}

/// @nodoc

class _$NumberLessThanFilterImpl extends NumberLessThanFilter {
  const _$NumberLessThanFilterImpl(this.value) : super._();

  @override
  final double value;

  @override
  String toString() {
    return 'PropertyFilter.numberLessThan(value: $value)';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$NumberLessThanFilterImpl &&
            (identical(other.value, value) || other.value == value));
  }

  @override
  int get hashCode => Object.hash(runtimeType, value);

  /// Create a copy of PropertyFilter
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  @pragma('vm:prefer-inline')
  _$$NumberLessThanFilterImplCopyWith<_$NumberLessThanFilterImpl>
      get copyWith =>
          __$$NumberLessThanFilterImplCopyWithImpl<_$NumberLessThanFilterImpl>(
              this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function(String value) textEquals,
    required TResult Function(String value) textDoesNotEqual,
    required TResult Function(String value) textContains,
    required TResult Function(String value) textDoesNotContain,
    required TResult Function(String value) textStartsWith,
    required TResult Function(String value) textEndsWith,
    required TResult Function() textIsEmpty,
    required TResult Function() textIsNotEmpty,
    required TResult Function(double value) numberEquals,
    required TResult Function(double value) numberDoesNotEqual,
    required TResult Function(double value) numberGreaterThan,
    required TResult Function(double value) numberLessThan,
    required TResult Function(double value) numberGreaterThanOrEqual,
    required TResult Function(double value) numberLessThanOrEqual,
    required TResult Function() numberIsEmpty,
    required TResult Function() numberIsNotEmpty,
    required TResult Function(bool value) checkboxEquals,
    required TResult Function(String value) selectEquals,
    required TResult Function(String value) selectDoesNotEqual,
    required TResult Function() selectIsEmpty,
    required TResult Function() selectIsNotEmpty,
    required TResult Function(String value) multiSelectContains,
    required TResult Function(String value) multiSelectDoesNotContain,
    required TResult Function() multiSelectIsEmpty,
    required TResult Function() multiSelectIsNotEmpty,
    required TResult Function(String date) dateEquals,
    required TResult Function(String date) dateBefore,
    required TResult Function(String date) dateAfter,
    required TResult Function(String date) dateOnOrBefore,
    required TResult Function(String date) dateOnOrAfter,
    required TResult Function() dateIsEmpty,
    required TResult Function() dateIsNotEmpty,
    required TResult Function() datePastWeek,
    required TResult Function() datePastMonth,
    required TResult Function() datePastYear,
    required TResult Function() dateNextWeek,
    required TResult Function() dateNextMonth,
    required TResult Function() dateNextYear,
    required TResult Function(String userId) peopleContains,
    required TResult Function(String userId) peopleDoesNotContain,
    required TResult Function() peopleIsEmpty,
    required TResult Function() peopleIsNotEmpty,
    required TResult Function() filesIsEmpty,
    required TResult Function() filesIsNotEmpty,
    required TResult Function(String pageId) relationContains,
    required TResult Function(String pageId) relationDoesNotContain,
    required TResult Function() relationIsEmpty,
    required TResult Function() relationIsNotEmpty,
  }) {
    return numberLessThan(value);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function(String value)? textEquals,
    TResult? Function(String value)? textDoesNotEqual,
    TResult? Function(String value)? textContains,
    TResult? Function(String value)? textDoesNotContain,
    TResult? Function(String value)? textStartsWith,
    TResult? Function(String value)? textEndsWith,
    TResult? Function()? textIsEmpty,
    TResult? Function()? textIsNotEmpty,
    TResult? Function(double value)? numberEquals,
    TResult? Function(double value)? numberDoesNotEqual,
    TResult? Function(double value)? numberGreaterThan,
    TResult? Function(double value)? numberLessThan,
    TResult? Function(double value)? numberGreaterThanOrEqual,
    TResult? Function(double value)? numberLessThanOrEqual,
    TResult? Function()? numberIsEmpty,
    TResult? Function()? numberIsNotEmpty,
    TResult? Function(bool value)? checkboxEquals,
    TResult? Function(String value)? selectEquals,
    TResult? Function(String value)? selectDoesNotEqual,
    TResult? Function()? selectIsEmpty,
    TResult? Function()? selectIsNotEmpty,
    TResult? Function(String value)? multiSelectContains,
    TResult? Function(String value)? multiSelectDoesNotContain,
    TResult? Function()? multiSelectIsEmpty,
    TResult? Function()? multiSelectIsNotEmpty,
    TResult? Function(String date)? dateEquals,
    TResult? Function(String date)? dateBefore,
    TResult? Function(String date)? dateAfter,
    TResult? Function(String date)? dateOnOrBefore,
    TResult? Function(String date)? dateOnOrAfter,
    TResult? Function()? dateIsEmpty,
    TResult? Function()? dateIsNotEmpty,
    TResult? Function()? datePastWeek,
    TResult? Function()? datePastMonth,
    TResult? Function()? datePastYear,
    TResult? Function()? dateNextWeek,
    TResult? Function()? dateNextMonth,
    TResult? Function()? dateNextYear,
    TResult? Function(String userId)? peopleContains,
    TResult? Function(String userId)? peopleDoesNotContain,
    TResult? Function()? peopleIsEmpty,
    TResult? Function()? peopleIsNotEmpty,
    TResult? Function()? filesIsEmpty,
    TResult? Function()? filesIsNotEmpty,
    TResult? Function(String pageId)? relationContains,
    TResult? Function(String pageId)? relationDoesNotContain,
    TResult? Function()? relationIsEmpty,
    TResult? Function()? relationIsNotEmpty,
  }) {
    return numberLessThan?.call(value);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function(String value)? textEquals,
    TResult Function(String value)? textDoesNotEqual,
    TResult Function(String value)? textContains,
    TResult Function(String value)? textDoesNotContain,
    TResult Function(String value)? textStartsWith,
    TResult Function(String value)? textEndsWith,
    TResult Function()? textIsEmpty,
    TResult Function()? textIsNotEmpty,
    TResult Function(double value)? numberEquals,
    TResult Function(double value)? numberDoesNotEqual,
    TResult Function(double value)? numberGreaterThan,
    TResult Function(double value)? numberLessThan,
    TResult Function(double value)? numberGreaterThanOrEqual,
    TResult Function(double value)? numberLessThanOrEqual,
    TResult Function()? numberIsEmpty,
    TResult Function()? numberIsNotEmpty,
    TResult Function(bool value)? checkboxEquals,
    TResult Function(String value)? selectEquals,
    TResult Function(String value)? selectDoesNotEqual,
    TResult Function()? selectIsEmpty,
    TResult Function()? selectIsNotEmpty,
    TResult Function(String value)? multiSelectContains,
    TResult Function(String value)? multiSelectDoesNotContain,
    TResult Function()? multiSelectIsEmpty,
    TResult Function()? multiSelectIsNotEmpty,
    TResult Function(String date)? dateEquals,
    TResult Function(String date)? dateBefore,
    TResult Function(String date)? dateAfter,
    TResult Function(String date)? dateOnOrBefore,
    TResult Function(String date)? dateOnOrAfter,
    TResult Function()? dateIsEmpty,
    TResult Function()? dateIsNotEmpty,
    TResult Function()? datePastWeek,
    TResult Function()? datePastMonth,
    TResult Function()? datePastYear,
    TResult Function()? dateNextWeek,
    TResult Function()? dateNextMonth,
    TResult Function()? dateNextYear,
    TResult Function(String userId)? peopleContains,
    TResult Function(String userId)? peopleDoesNotContain,
    TResult Function()? peopleIsEmpty,
    TResult Function()? peopleIsNotEmpty,
    TResult Function()? filesIsEmpty,
    TResult Function()? filesIsNotEmpty,
    TResult Function(String pageId)? relationContains,
    TResult Function(String pageId)? relationDoesNotContain,
    TResult Function()? relationIsEmpty,
    TResult Function()? relationIsNotEmpty,
    required TResult orElse(),
  }) {
    if (numberLessThan != null) {
      return numberLessThan(value);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(TextEqualsFilter value) textEquals,
    required TResult Function(TextDoesNotEqualFilter value) textDoesNotEqual,
    required TResult Function(TextContainsFilter value) textContains,
    required TResult Function(TextDoesNotContainFilter value)
        textDoesNotContain,
    required TResult Function(TextStartsWithFilter value) textStartsWith,
    required TResult Function(TextEndsWithFilter value) textEndsWith,
    required TResult Function(TextIsEmptyFilter value) textIsEmpty,
    required TResult Function(TextIsNotEmptyFilter value) textIsNotEmpty,
    required TResult Function(NumberEqualsFilter value) numberEquals,
    required TResult Function(NumberDoesNotEqualFilter value)
        numberDoesNotEqual,
    required TResult Function(NumberGreaterThanFilter value) numberGreaterThan,
    required TResult Function(NumberLessThanFilter value) numberLessThan,
    required TResult Function(NumberGreaterThanOrEqualFilter value)
        numberGreaterThanOrEqual,
    required TResult Function(NumberLessThanOrEqualFilter value)
        numberLessThanOrEqual,
    required TResult Function(NumberIsEmptyFilter value) numberIsEmpty,
    required TResult Function(NumberIsNotEmptyFilter value) numberIsNotEmpty,
    required TResult Function(CheckboxEqualsFilter value) checkboxEquals,
    required TResult Function(SelectEqualsFilter value) selectEquals,
    required TResult Function(SelectDoesNotEqualFilter value)
        selectDoesNotEqual,
    required TResult Function(SelectIsEmptyFilter value) selectIsEmpty,
    required TResult Function(SelectIsNotEmptyFilter value) selectIsNotEmpty,
    required TResult Function(MultiSelectContainsFilter value)
        multiSelectContains,
    required TResult Function(MultiSelectDoesNotContainFilter value)
        multiSelectDoesNotContain,
    required TResult Function(MultiSelectIsEmptyFilter value)
        multiSelectIsEmpty,
    required TResult Function(MultiSelectIsNotEmptyFilter value)
        multiSelectIsNotEmpty,
    required TResult Function(DateEqualsFilter value) dateEquals,
    required TResult Function(DateBeforeFilter value) dateBefore,
    required TResult Function(DateAfterFilter value) dateAfter,
    required TResult Function(DateOnOrBeforeFilter value) dateOnOrBefore,
    required TResult Function(DateOnOrAfterFilter value) dateOnOrAfter,
    required TResult Function(DateIsEmptyFilter value) dateIsEmpty,
    required TResult Function(DateIsNotEmptyFilter value) dateIsNotEmpty,
    required TResult Function(DatePastWeekFilter value) datePastWeek,
    required TResult Function(DatePastMonthFilter value) datePastMonth,
    required TResult Function(DatePastYearFilter value) datePastYear,
    required TResult Function(DateNextWeekFilter value) dateNextWeek,
    required TResult Function(DateNextMonthFilter value) dateNextMonth,
    required TResult Function(DateNextYearFilter value) dateNextYear,
    required TResult Function(PeopleContainsFilter value) peopleContains,
    required TResult Function(PeopleDoesNotContainFilter value)
        peopleDoesNotContain,
    required TResult Function(PeopleIsEmptyFilter value) peopleIsEmpty,
    required TResult Function(PeopleIsNotEmptyFilter value) peopleIsNotEmpty,
    required TResult Function(FilesIsEmptyFilter value) filesIsEmpty,
    required TResult Function(FilesIsNotEmptyFilter value) filesIsNotEmpty,
    required TResult Function(RelationContainsFilter value) relationContains,
    required TResult Function(RelationDoesNotContainFilter value)
        relationDoesNotContain,
    required TResult Function(RelationIsEmptyFilter value) relationIsEmpty,
    required TResult Function(RelationIsNotEmptyFilter value)
        relationIsNotEmpty,
  }) {
    return numberLessThan(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(TextEqualsFilter value)? textEquals,
    TResult? Function(TextDoesNotEqualFilter value)? textDoesNotEqual,
    TResult? Function(TextContainsFilter value)? textContains,
    TResult? Function(TextDoesNotContainFilter value)? textDoesNotContain,
    TResult? Function(TextStartsWithFilter value)? textStartsWith,
    TResult? Function(TextEndsWithFilter value)? textEndsWith,
    TResult? Function(TextIsEmptyFilter value)? textIsEmpty,
    TResult? Function(TextIsNotEmptyFilter value)? textIsNotEmpty,
    TResult? Function(NumberEqualsFilter value)? numberEquals,
    TResult? Function(NumberDoesNotEqualFilter value)? numberDoesNotEqual,
    TResult? Function(NumberGreaterThanFilter value)? numberGreaterThan,
    TResult? Function(NumberLessThanFilter value)? numberLessThan,
    TResult? Function(NumberGreaterThanOrEqualFilter value)?
        numberGreaterThanOrEqual,
    TResult? Function(NumberLessThanOrEqualFilter value)? numberLessThanOrEqual,
    TResult? Function(NumberIsEmptyFilter value)? numberIsEmpty,
    TResult? Function(NumberIsNotEmptyFilter value)? numberIsNotEmpty,
    TResult? Function(CheckboxEqualsFilter value)? checkboxEquals,
    TResult? Function(SelectEqualsFilter value)? selectEquals,
    TResult? Function(SelectDoesNotEqualFilter value)? selectDoesNotEqual,
    TResult? Function(SelectIsEmptyFilter value)? selectIsEmpty,
    TResult? Function(SelectIsNotEmptyFilter value)? selectIsNotEmpty,
    TResult? Function(MultiSelectContainsFilter value)? multiSelectContains,
    TResult? Function(MultiSelectDoesNotContainFilter value)?
        multiSelectDoesNotContain,
    TResult? Function(MultiSelectIsEmptyFilter value)? multiSelectIsEmpty,
    TResult? Function(MultiSelectIsNotEmptyFilter value)? multiSelectIsNotEmpty,
    TResult? Function(DateEqualsFilter value)? dateEquals,
    TResult? Function(DateBeforeFilter value)? dateBefore,
    TResult? Function(DateAfterFilter value)? dateAfter,
    TResult? Function(DateOnOrBeforeFilter value)? dateOnOrBefore,
    TResult? Function(DateOnOrAfterFilter value)? dateOnOrAfter,
    TResult? Function(DateIsEmptyFilter value)? dateIsEmpty,
    TResult? Function(DateIsNotEmptyFilter value)? dateIsNotEmpty,
    TResult? Function(DatePastWeekFilter value)? datePastWeek,
    TResult? Function(DatePastMonthFilter value)? datePastMonth,
    TResult? Function(DatePastYearFilter value)? datePastYear,
    TResult? Function(DateNextWeekFilter value)? dateNextWeek,
    TResult? Function(DateNextMonthFilter value)? dateNextMonth,
    TResult? Function(DateNextYearFilter value)? dateNextYear,
    TResult? Function(PeopleContainsFilter value)? peopleContains,
    TResult? Function(PeopleDoesNotContainFilter value)? peopleDoesNotContain,
    TResult? Function(PeopleIsEmptyFilter value)? peopleIsEmpty,
    TResult? Function(PeopleIsNotEmptyFilter value)? peopleIsNotEmpty,
    TResult? Function(FilesIsEmptyFilter value)? filesIsEmpty,
    TResult? Function(FilesIsNotEmptyFilter value)? filesIsNotEmpty,
    TResult? Function(RelationContainsFilter value)? relationContains,
    TResult? Function(RelationDoesNotContainFilter value)?
        relationDoesNotContain,
    TResult? Function(RelationIsEmptyFilter value)? relationIsEmpty,
    TResult? Function(RelationIsNotEmptyFilter value)? relationIsNotEmpty,
  }) {
    return numberLessThan?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(TextEqualsFilter value)? textEquals,
    TResult Function(TextDoesNotEqualFilter value)? textDoesNotEqual,
    TResult Function(TextContainsFilter value)? textContains,
    TResult Function(TextDoesNotContainFilter value)? textDoesNotContain,
    TResult Function(TextStartsWithFilter value)? textStartsWith,
    TResult Function(TextEndsWithFilter value)? textEndsWith,
    TResult Function(TextIsEmptyFilter value)? textIsEmpty,
    TResult Function(TextIsNotEmptyFilter value)? textIsNotEmpty,
    TResult Function(NumberEqualsFilter value)? numberEquals,
    TResult Function(NumberDoesNotEqualFilter value)? numberDoesNotEqual,
    TResult Function(NumberGreaterThanFilter value)? numberGreaterThan,
    TResult Function(NumberLessThanFilter value)? numberLessThan,
    TResult Function(NumberGreaterThanOrEqualFilter value)?
        numberGreaterThanOrEqual,
    TResult Function(NumberLessThanOrEqualFilter value)? numberLessThanOrEqual,
    TResult Function(NumberIsEmptyFilter value)? numberIsEmpty,
    TResult Function(NumberIsNotEmptyFilter value)? numberIsNotEmpty,
    TResult Function(CheckboxEqualsFilter value)? checkboxEquals,
    TResult Function(SelectEqualsFilter value)? selectEquals,
    TResult Function(SelectDoesNotEqualFilter value)? selectDoesNotEqual,
    TResult Function(SelectIsEmptyFilter value)? selectIsEmpty,
    TResult Function(SelectIsNotEmptyFilter value)? selectIsNotEmpty,
    TResult Function(MultiSelectContainsFilter value)? multiSelectContains,
    TResult Function(MultiSelectDoesNotContainFilter value)?
        multiSelectDoesNotContain,
    TResult Function(MultiSelectIsEmptyFilter value)? multiSelectIsEmpty,
    TResult Function(MultiSelectIsNotEmptyFilter value)? multiSelectIsNotEmpty,
    TResult Function(DateEqualsFilter value)? dateEquals,
    TResult Function(DateBeforeFilter value)? dateBefore,
    TResult Function(DateAfterFilter value)? dateAfter,
    TResult Function(DateOnOrBeforeFilter value)? dateOnOrBefore,
    TResult Function(DateOnOrAfterFilter value)? dateOnOrAfter,
    TResult Function(DateIsEmptyFilter value)? dateIsEmpty,
    TResult Function(DateIsNotEmptyFilter value)? dateIsNotEmpty,
    TResult Function(DatePastWeekFilter value)? datePastWeek,
    TResult Function(DatePastMonthFilter value)? datePastMonth,
    TResult Function(DatePastYearFilter value)? datePastYear,
    TResult Function(DateNextWeekFilter value)? dateNextWeek,
    TResult Function(DateNextMonthFilter value)? dateNextMonth,
    TResult Function(DateNextYearFilter value)? dateNextYear,
    TResult Function(PeopleContainsFilter value)? peopleContains,
    TResult Function(PeopleDoesNotContainFilter value)? peopleDoesNotContain,
    TResult Function(PeopleIsEmptyFilter value)? peopleIsEmpty,
    TResult Function(PeopleIsNotEmptyFilter value)? peopleIsNotEmpty,
    TResult Function(FilesIsEmptyFilter value)? filesIsEmpty,
    TResult Function(FilesIsNotEmptyFilter value)? filesIsNotEmpty,
    TResult Function(RelationContainsFilter value)? relationContains,
    TResult Function(RelationDoesNotContainFilter value)?
        relationDoesNotContain,
    TResult Function(RelationIsEmptyFilter value)? relationIsEmpty,
    TResult Function(RelationIsNotEmptyFilter value)? relationIsNotEmpty,
    required TResult orElse(),
  }) {
    if (numberLessThan != null) {
      return numberLessThan(this);
    }
    return orElse();
  }
}

abstract class NumberLessThanFilter extends PropertyFilter {
  const factory NumberLessThanFilter(final double value) =
      _$NumberLessThanFilterImpl;
  const NumberLessThanFilter._() : super._();

  double get value;

  /// Create a copy of PropertyFilter
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  _$$NumberLessThanFilterImplCopyWith<_$NumberLessThanFilterImpl>
      get copyWith => throw _privateConstructorUsedError;
}

/// @nodoc
abstract class _$$NumberGreaterThanOrEqualFilterImplCopyWith<$Res> {
  factory _$$NumberGreaterThanOrEqualFilterImplCopyWith(
          _$NumberGreaterThanOrEqualFilterImpl value,
          $Res Function(_$NumberGreaterThanOrEqualFilterImpl) then) =
      __$$NumberGreaterThanOrEqualFilterImplCopyWithImpl<$Res>;
  @useResult
  $Res call({double value});
}

/// @nodoc
class __$$NumberGreaterThanOrEqualFilterImplCopyWithImpl<$Res>
    extends _$PropertyFilterCopyWithImpl<$Res,
        _$NumberGreaterThanOrEqualFilterImpl>
    implements _$$NumberGreaterThanOrEqualFilterImplCopyWith<$Res> {
  __$$NumberGreaterThanOrEqualFilterImplCopyWithImpl(
      _$NumberGreaterThanOrEqualFilterImpl _value,
      $Res Function(_$NumberGreaterThanOrEqualFilterImpl) _then)
      : super(_value, _then);

  /// Create a copy of PropertyFilter
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? value = null,
  }) {
    return _then(_$NumberGreaterThanOrEqualFilterImpl(
      null == value
          ? _value.value
          : value // ignore: cast_nullable_to_non_nullable
              as double,
    ));
  }
}

/// @nodoc

class _$NumberGreaterThanOrEqualFilterImpl
    extends NumberGreaterThanOrEqualFilter {
  const _$NumberGreaterThanOrEqualFilterImpl(this.value) : super._();

  @override
  final double value;

  @override
  String toString() {
    return 'PropertyFilter.numberGreaterThanOrEqual(value: $value)';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$NumberGreaterThanOrEqualFilterImpl &&
            (identical(other.value, value) || other.value == value));
  }

  @override
  int get hashCode => Object.hash(runtimeType, value);

  /// Create a copy of PropertyFilter
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  @pragma('vm:prefer-inline')
  _$$NumberGreaterThanOrEqualFilterImplCopyWith<
          _$NumberGreaterThanOrEqualFilterImpl>
      get copyWith => __$$NumberGreaterThanOrEqualFilterImplCopyWithImpl<
          _$NumberGreaterThanOrEqualFilterImpl>(this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function(String value) textEquals,
    required TResult Function(String value) textDoesNotEqual,
    required TResult Function(String value) textContains,
    required TResult Function(String value) textDoesNotContain,
    required TResult Function(String value) textStartsWith,
    required TResult Function(String value) textEndsWith,
    required TResult Function() textIsEmpty,
    required TResult Function() textIsNotEmpty,
    required TResult Function(double value) numberEquals,
    required TResult Function(double value) numberDoesNotEqual,
    required TResult Function(double value) numberGreaterThan,
    required TResult Function(double value) numberLessThan,
    required TResult Function(double value) numberGreaterThanOrEqual,
    required TResult Function(double value) numberLessThanOrEqual,
    required TResult Function() numberIsEmpty,
    required TResult Function() numberIsNotEmpty,
    required TResult Function(bool value) checkboxEquals,
    required TResult Function(String value) selectEquals,
    required TResult Function(String value) selectDoesNotEqual,
    required TResult Function() selectIsEmpty,
    required TResult Function() selectIsNotEmpty,
    required TResult Function(String value) multiSelectContains,
    required TResult Function(String value) multiSelectDoesNotContain,
    required TResult Function() multiSelectIsEmpty,
    required TResult Function() multiSelectIsNotEmpty,
    required TResult Function(String date) dateEquals,
    required TResult Function(String date) dateBefore,
    required TResult Function(String date) dateAfter,
    required TResult Function(String date) dateOnOrBefore,
    required TResult Function(String date) dateOnOrAfter,
    required TResult Function() dateIsEmpty,
    required TResult Function() dateIsNotEmpty,
    required TResult Function() datePastWeek,
    required TResult Function() datePastMonth,
    required TResult Function() datePastYear,
    required TResult Function() dateNextWeek,
    required TResult Function() dateNextMonth,
    required TResult Function() dateNextYear,
    required TResult Function(String userId) peopleContains,
    required TResult Function(String userId) peopleDoesNotContain,
    required TResult Function() peopleIsEmpty,
    required TResult Function() peopleIsNotEmpty,
    required TResult Function() filesIsEmpty,
    required TResult Function() filesIsNotEmpty,
    required TResult Function(String pageId) relationContains,
    required TResult Function(String pageId) relationDoesNotContain,
    required TResult Function() relationIsEmpty,
    required TResult Function() relationIsNotEmpty,
  }) {
    return numberGreaterThanOrEqual(value);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function(String value)? textEquals,
    TResult? Function(String value)? textDoesNotEqual,
    TResult? Function(String value)? textContains,
    TResult? Function(String value)? textDoesNotContain,
    TResult? Function(String value)? textStartsWith,
    TResult? Function(String value)? textEndsWith,
    TResult? Function()? textIsEmpty,
    TResult? Function()? textIsNotEmpty,
    TResult? Function(double value)? numberEquals,
    TResult? Function(double value)? numberDoesNotEqual,
    TResult? Function(double value)? numberGreaterThan,
    TResult? Function(double value)? numberLessThan,
    TResult? Function(double value)? numberGreaterThanOrEqual,
    TResult? Function(double value)? numberLessThanOrEqual,
    TResult? Function()? numberIsEmpty,
    TResult? Function()? numberIsNotEmpty,
    TResult? Function(bool value)? checkboxEquals,
    TResult? Function(String value)? selectEquals,
    TResult? Function(String value)? selectDoesNotEqual,
    TResult? Function()? selectIsEmpty,
    TResult? Function()? selectIsNotEmpty,
    TResult? Function(String value)? multiSelectContains,
    TResult? Function(String value)? multiSelectDoesNotContain,
    TResult? Function()? multiSelectIsEmpty,
    TResult? Function()? multiSelectIsNotEmpty,
    TResult? Function(String date)? dateEquals,
    TResult? Function(String date)? dateBefore,
    TResult? Function(String date)? dateAfter,
    TResult? Function(String date)? dateOnOrBefore,
    TResult? Function(String date)? dateOnOrAfter,
    TResult? Function()? dateIsEmpty,
    TResult? Function()? dateIsNotEmpty,
    TResult? Function()? datePastWeek,
    TResult? Function()? datePastMonth,
    TResult? Function()? datePastYear,
    TResult? Function()? dateNextWeek,
    TResult? Function()? dateNextMonth,
    TResult? Function()? dateNextYear,
    TResult? Function(String userId)? peopleContains,
    TResult? Function(String userId)? peopleDoesNotContain,
    TResult? Function()? peopleIsEmpty,
    TResult? Function()? peopleIsNotEmpty,
    TResult? Function()? filesIsEmpty,
    TResult? Function()? filesIsNotEmpty,
    TResult? Function(String pageId)? relationContains,
    TResult? Function(String pageId)? relationDoesNotContain,
    TResult? Function()? relationIsEmpty,
    TResult? Function()? relationIsNotEmpty,
  }) {
    return numberGreaterThanOrEqual?.call(value);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function(String value)? textEquals,
    TResult Function(String value)? textDoesNotEqual,
    TResult Function(String value)? textContains,
    TResult Function(String value)? textDoesNotContain,
    TResult Function(String value)? textStartsWith,
    TResult Function(String value)? textEndsWith,
    TResult Function()? textIsEmpty,
    TResult Function()? textIsNotEmpty,
    TResult Function(double value)? numberEquals,
    TResult Function(double value)? numberDoesNotEqual,
    TResult Function(double value)? numberGreaterThan,
    TResult Function(double value)? numberLessThan,
    TResult Function(double value)? numberGreaterThanOrEqual,
    TResult Function(double value)? numberLessThanOrEqual,
    TResult Function()? numberIsEmpty,
    TResult Function()? numberIsNotEmpty,
    TResult Function(bool value)? checkboxEquals,
    TResult Function(String value)? selectEquals,
    TResult Function(String value)? selectDoesNotEqual,
    TResult Function()? selectIsEmpty,
    TResult Function()? selectIsNotEmpty,
    TResult Function(String value)? multiSelectContains,
    TResult Function(String value)? multiSelectDoesNotContain,
    TResult Function()? multiSelectIsEmpty,
    TResult Function()? multiSelectIsNotEmpty,
    TResult Function(String date)? dateEquals,
    TResult Function(String date)? dateBefore,
    TResult Function(String date)? dateAfter,
    TResult Function(String date)? dateOnOrBefore,
    TResult Function(String date)? dateOnOrAfter,
    TResult Function()? dateIsEmpty,
    TResult Function()? dateIsNotEmpty,
    TResult Function()? datePastWeek,
    TResult Function()? datePastMonth,
    TResult Function()? datePastYear,
    TResult Function()? dateNextWeek,
    TResult Function()? dateNextMonth,
    TResult Function()? dateNextYear,
    TResult Function(String userId)? peopleContains,
    TResult Function(String userId)? peopleDoesNotContain,
    TResult Function()? peopleIsEmpty,
    TResult Function()? peopleIsNotEmpty,
    TResult Function()? filesIsEmpty,
    TResult Function()? filesIsNotEmpty,
    TResult Function(String pageId)? relationContains,
    TResult Function(String pageId)? relationDoesNotContain,
    TResult Function()? relationIsEmpty,
    TResult Function()? relationIsNotEmpty,
    required TResult orElse(),
  }) {
    if (numberGreaterThanOrEqual != null) {
      return numberGreaterThanOrEqual(value);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(TextEqualsFilter value) textEquals,
    required TResult Function(TextDoesNotEqualFilter value) textDoesNotEqual,
    required TResult Function(TextContainsFilter value) textContains,
    required TResult Function(TextDoesNotContainFilter value)
        textDoesNotContain,
    required TResult Function(TextStartsWithFilter value) textStartsWith,
    required TResult Function(TextEndsWithFilter value) textEndsWith,
    required TResult Function(TextIsEmptyFilter value) textIsEmpty,
    required TResult Function(TextIsNotEmptyFilter value) textIsNotEmpty,
    required TResult Function(NumberEqualsFilter value) numberEquals,
    required TResult Function(NumberDoesNotEqualFilter value)
        numberDoesNotEqual,
    required TResult Function(NumberGreaterThanFilter value) numberGreaterThan,
    required TResult Function(NumberLessThanFilter value) numberLessThan,
    required TResult Function(NumberGreaterThanOrEqualFilter value)
        numberGreaterThanOrEqual,
    required TResult Function(NumberLessThanOrEqualFilter value)
        numberLessThanOrEqual,
    required TResult Function(NumberIsEmptyFilter value) numberIsEmpty,
    required TResult Function(NumberIsNotEmptyFilter value) numberIsNotEmpty,
    required TResult Function(CheckboxEqualsFilter value) checkboxEquals,
    required TResult Function(SelectEqualsFilter value) selectEquals,
    required TResult Function(SelectDoesNotEqualFilter value)
        selectDoesNotEqual,
    required TResult Function(SelectIsEmptyFilter value) selectIsEmpty,
    required TResult Function(SelectIsNotEmptyFilter value) selectIsNotEmpty,
    required TResult Function(MultiSelectContainsFilter value)
        multiSelectContains,
    required TResult Function(MultiSelectDoesNotContainFilter value)
        multiSelectDoesNotContain,
    required TResult Function(MultiSelectIsEmptyFilter value)
        multiSelectIsEmpty,
    required TResult Function(MultiSelectIsNotEmptyFilter value)
        multiSelectIsNotEmpty,
    required TResult Function(DateEqualsFilter value) dateEquals,
    required TResult Function(DateBeforeFilter value) dateBefore,
    required TResult Function(DateAfterFilter value) dateAfter,
    required TResult Function(DateOnOrBeforeFilter value) dateOnOrBefore,
    required TResult Function(DateOnOrAfterFilter value) dateOnOrAfter,
    required TResult Function(DateIsEmptyFilter value) dateIsEmpty,
    required TResult Function(DateIsNotEmptyFilter value) dateIsNotEmpty,
    required TResult Function(DatePastWeekFilter value) datePastWeek,
    required TResult Function(DatePastMonthFilter value) datePastMonth,
    required TResult Function(DatePastYearFilter value) datePastYear,
    required TResult Function(DateNextWeekFilter value) dateNextWeek,
    required TResult Function(DateNextMonthFilter value) dateNextMonth,
    required TResult Function(DateNextYearFilter value) dateNextYear,
    required TResult Function(PeopleContainsFilter value) peopleContains,
    required TResult Function(PeopleDoesNotContainFilter value)
        peopleDoesNotContain,
    required TResult Function(PeopleIsEmptyFilter value) peopleIsEmpty,
    required TResult Function(PeopleIsNotEmptyFilter value) peopleIsNotEmpty,
    required TResult Function(FilesIsEmptyFilter value) filesIsEmpty,
    required TResult Function(FilesIsNotEmptyFilter value) filesIsNotEmpty,
    required TResult Function(RelationContainsFilter value) relationContains,
    required TResult Function(RelationDoesNotContainFilter value)
        relationDoesNotContain,
    required TResult Function(RelationIsEmptyFilter value) relationIsEmpty,
    required TResult Function(RelationIsNotEmptyFilter value)
        relationIsNotEmpty,
  }) {
    return numberGreaterThanOrEqual(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(TextEqualsFilter value)? textEquals,
    TResult? Function(TextDoesNotEqualFilter value)? textDoesNotEqual,
    TResult? Function(TextContainsFilter value)? textContains,
    TResult? Function(TextDoesNotContainFilter value)? textDoesNotContain,
    TResult? Function(TextStartsWithFilter value)? textStartsWith,
    TResult? Function(TextEndsWithFilter value)? textEndsWith,
    TResult? Function(TextIsEmptyFilter value)? textIsEmpty,
    TResult? Function(TextIsNotEmptyFilter value)? textIsNotEmpty,
    TResult? Function(NumberEqualsFilter value)? numberEquals,
    TResult? Function(NumberDoesNotEqualFilter value)? numberDoesNotEqual,
    TResult? Function(NumberGreaterThanFilter value)? numberGreaterThan,
    TResult? Function(NumberLessThanFilter value)? numberLessThan,
    TResult? Function(NumberGreaterThanOrEqualFilter value)?
        numberGreaterThanOrEqual,
    TResult? Function(NumberLessThanOrEqualFilter value)? numberLessThanOrEqual,
    TResult? Function(NumberIsEmptyFilter value)? numberIsEmpty,
    TResult? Function(NumberIsNotEmptyFilter value)? numberIsNotEmpty,
    TResult? Function(CheckboxEqualsFilter value)? checkboxEquals,
    TResult? Function(SelectEqualsFilter value)? selectEquals,
    TResult? Function(SelectDoesNotEqualFilter value)? selectDoesNotEqual,
    TResult? Function(SelectIsEmptyFilter value)? selectIsEmpty,
    TResult? Function(SelectIsNotEmptyFilter value)? selectIsNotEmpty,
    TResult? Function(MultiSelectContainsFilter value)? multiSelectContains,
    TResult? Function(MultiSelectDoesNotContainFilter value)?
        multiSelectDoesNotContain,
    TResult? Function(MultiSelectIsEmptyFilter value)? multiSelectIsEmpty,
    TResult? Function(MultiSelectIsNotEmptyFilter value)? multiSelectIsNotEmpty,
    TResult? Function(DateEqualsFilter value)? dateEquals,
    TResult? Function(DateBeforeFilter value)? dateBefore,
    TResult? Function(DateAfterFilter value)? dateAfter,
    TResult? Function(DateOnOrBeforeFilter value)? dateOnOrBefore,
    TResult? Function(DateOnOrAfterFilter value)? dateOnOrAfter,
    TResult? Function(DateIsEmptyFilter value)? dateIsEmpty,
    TResult? Function(DateIsNotEmptyFilter value)? dateIsNotEmpty,
    TResult? Function(DatePastWeekFilter value)? datePastWeek,
    TResult? Function(DatePastMonthFilter value)? datePastMonth,
    TResult? Function(DatePastYearFilter value)? datePastYear,
    TResult? Function(DateNextWeekFilter value)? dateNextWeek,
    TResult? Function(DateNextMonthFilter value)? dateNextMonth,
    TResult? Function(DateNextYearFilter value)? dateNextYear,
    TResult? Function(PeopleContainsFilter value)? peopleContains,
    TResult? Function(PeopleDoesNotContainFilter value)? peopleDoesNotContain,
    TResult? Function(PeopleIsEmptyFilter value)? peopleIsEmpty,
    TResult? Function(PeopleIsNotEmptyFilter value)? peopleIsNotEmpty,
    TResult? Function(FilesIsEmptyFilter value)? filesIsEmpty,
    TResult? Function(FilesIsNotEmptyFilter value)? filesIsNotEmpty,
    TResult? Function(RelationContainsFilter value)? relationContains,
    TResult? Function(RelationDoesNotContainFilter value)?
        relationDoesNotContain,
    TResult? Function(RelationIsEmptyFilter value)? relationIsEmpty,
    TResult? Function(RelationIsNotEmptyFilter value)? relationIsNotEmpty,
  }) {
    return numberGreaterThanOrEqual?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(TextEqualsFilter value)? textEquals,
    TResult Function(TextDoesNotEqualFilter value)? textDoesNotEqual,
    TResult Function(TextContainsFilter value)? textContains,
    TResult Function(TextDoesNotContainFilter value)? textDoesNotContain,
    TResult Function(TextStartsWithFilter value)? textStartsWith,
    TResult Function(TextEndsWithFilter value)? textEndsWith,
    TResult Function(TextIsEmptyFilter value)? textIsEmpty,
    TResult Function(TextIsNotEmptyFilter value)? textIsNotEmpty,
    TResult Function(NumberEqualsFilter value)? numberEquals,
    TResult Function(NumberDoesNotEqualFilter value)? numberDoesNotEqual,
    TResult Function(NumberGreaterThanFilter value)? numberGreaterThan,
    TResult Function(NumberLessThanFilter value)? numberLessThan,
    TResult Function(NumberGreaterThanOrEqualFilter value)?
        numberGreaterThanOrEqual,
    TResult Function(NumberLessThanOrEqualFilter value)? numberLessThanOrEqual,
    TResult Function(NumberIsEmptyFilter value)? numberIsEmpty,
    TResult Function(NumberIsNotEmptyFilter value)? numberIsNotEmpty,
    TResult Function(CheckboxEqualsFilter value)? checkboxEquals,
    TResult Function(SelectEqualsFilter value)? selectEquals,
    TResult Function(SelectDoesNotEqualFilter value)? selectDoesNotEqual,
    TResult Function(SelectIsEmptyFilter value)? selectIsEmpty,
    TResult Function(SelectIsNotEmptyFilter value)? selectIsNotEmpty,
    TResult Function(MultiSelectContainsFilter value)? multiSelectContains,
    TResult Function(MultiSelectDoesNotContainFilter value)?
        multiSelectDoesNotContain,
    TResult Function(MultiSelectIsEmptyFilter value)? multiSelectIsEmpty,
    TResult Function(MultiSelectIsNotEmptyFilter value)? multiSelectIsNotEmpty,
    TResult Function(DateEqualsFilter value)? dateEquals,
    TResult Function(DateBeforeFilter value)? dateBefore,
    TResult Function(DateAfterFilter value)? dateAfter,
    TResult Function(DateOnOrBeforeFilter value)? dateOnOrBefore,
    TResult Function(DateOnOrAfterFilter value)? dateOnOrAfter,
    TResult Function(DateIsEmptyFilter value)? dateIsEmpty,
    TResult Function(DateIsNotEmptyFilter value)? dateIsNotEmpty,
    TResult Function(DatePastWeekFilter value)? datePastWeek,
    TResult Function(DatePastMonthFilter value)? datePastMonth,
    TResult Function(DatePastYearFilter value)? datePastYear,
    TResult Function(DateNextWeekFilter value)? dateNextWeek,
    TResult Function(DateNextMonthFilter value)? dateNextMonth,
    TResult Function(DateNextYearFilter value)? dateNextYear,
    TResult Function(PeopleContainsFilter value)? peopleContains,
    TResult Function(PeopleDoesNotContainFilter value)? peopleDoesNotContain,
    TResult Function(PeopleIsEmptyFilter value)? peopleIsEmpty,
    TResult Function(PeopleIsNotEmptyFilter value)? peopleIsNotEmpty,
    TResult Function(FilesIsEmptyFilter value)? filesIsEmpty,
    TResult Function(FilesIsNotEmptyFilter value)? filesIsNotEmpty,
    TResult Function(RelationContainsFilter value)? relationContains,
    TResult Function(RelationDoesNotContainFilter value)?
        relationDoesNotContain,
    TResult Function(RelationIsEmptyFilter value)? relationIsEmpty,
    TResult Function(RelationIsNotEmptyFilter value)? relationIsNotEmpty,
    required TResult orElse(),
  }) {
    if (numberGreaterThanOrEqual != null) {
      return numberGreaterThanOrEqual(this);
    }
    return orElse();
  }
}

abstract class NumberGreaterThanOrEqualFilter extends PropertyFilter {
  const factory NumberGreaterThanOrEqualFilter(final double value) =
      _$NumberGreaterThanOrEqualFilterImpl;
  const NumberGreaterThanOrEqualFilter._() : super._();

  double get value;

  /// Create a copy of PropertyFilter
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  _$$NumberGreaterThanOrEqualFilterImplCopyWith<
          _$NumberGreaterThanOrEqualFilterImpl>
      get copyWith => throw _privateConstructorUsedError;
}

/// @nodoc
abstract class _$$NumberLessThanOrEqualFilterImplCopyWith<$Res> {
  factory _$$NumberLessThanOrEqualFilterImplCopyWith(
          _$NumberLessThanOrEqualFilterImpl value,
          $Res Function(_$NumberLessThanOrEqualFilterImpl) then) =
      __$$NumberLessThanOrEqualFilterImplCopyWithImpl<$Res>;
  @useResult
  $Res call({double value});
}

/// @nodoc
class __$$NumberLessThanOrEqualFilterImplCopyWithImpl<$Res>
    extends _$PropertyFilterCopyWithImpl<$Res,
        _$NumberLessThanOrEqualFilterImpl>
    implements _$$NumberLessThanOrEqualFilterImplCopyWith<$Res> {
  __$$NumberLessThanOrEqualFilterImplCopyWithImpl(
      _$NumberLessThanOrEqualFilterImpl _value,
      $Res Function(_$NumberLessThanOrEqualFilterImpl) _then)
      : super(_value, _then);

  /// Create a copy of PropertyFilter
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? value = null,
  }) {
    return _then(_$NumberLessThanOrEqualFilterImpl(
      null == value
          ? _value.value
          : value // ignore: cast_nullable_to_non_nullable
              as double,
    ));
  }
}

/// @nodoc

class _$NumberLessThanOrEqualFilterImpl extends NumberLessThanOrEqualFilter {
  const _$NumberLessThanOrEqualFilterImpl(this.value) : super._();

  @override
  final double value;

  @override
  String toString() {
    return 'PropertyFilter.numberLessThanOrEqual(value: $value)';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$NumberLessThanOrEqualFilterImpl &&
            (identical(other.value, value) || other.value == value));
  }

  @override
  int get hashCode => Object.hash(runtimeType, value);

  /// Create a copy of PropertyFilter
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  @pragma('vm:prefer-inline')
  _$$NumberLessThanOrEqualFilterImplCopyWith<_$NumberLessThanOrEqualFilterImpl>
      get copyWith => __$$NumberLessThanOrEqualFilterImplCopyWithImpl<
          _$NumberLessThanOrEqualFilterImpl>(this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function(String value) textEquals,
    required TResult Function(String value) textDoesNotEqual,
    required TResult Function(String value) textContains,
    required TResult Function(String value) textDoesNotContain,
    required TResult Function(String value) textStartsWith,
    required TResult Function(String value) textEndsWith,
    required TResult Function() textIsEmpty,
    required TResult Function() textIsNotEmpty,
    required TResult Function(double value) numberEquals,
    required TResult Function(double value) numberDoesNotEqual,
    required TResult Function(double value) numberGreaterThan,
    required TResult Function(double value) numberLessThan,
    required TResult Function(double value) numberGreaterThanOrEqual,
    required TResult Function(double value) numberLessThanOrEqual,
    required TResult Function() numberIsEmpty,
    required TResult Function() numberIsNotEmpty,
    required TResult Function(bool value) checkboxEquals,
    required TResult Function(String value) selectEquals,
    required TResult Function(String value) selectDoesNotEqual,
    required TResult Function() selectIsEmpty,
    required TResult Function() selectIsNotEmpty,
    required TResult Function(String value) multiSelectContains,
    required TResult Function(String value) multiSelectDoesNotContain,
    required TResult Function() multiSelectIsEmpty,
    required TResult Function() multiSelectIsNotEmpty,
    required TResult Function(String date) dateEquals,
    required TResult Function(String date) dateBefore,
    required TResult Function(String date) dateAfter,
    required TResult Function(String date) dateOnOrBefore,
    required TResult Function(String date) dateOnOrAfter,
    required TResult Function() dateIsEmpty,
    required TResult Function() dateIsNotEmpty,
    required TResult Function() datePastWeek,
    required TResult Function() datePastMonth,
    required TResult Function() datePastYear,
    required TResult Function() dateNextWeek,
    required TResult Function() dateNextMonth,
    required TResult Function() dateNextYear,
    required TResult Function(String userId) peopleContains,
    required TResult Function(String userId) peopleDoesNotContain,
    required TResult Function() peopleIsEmpty,
    required TResult Function() peopleIsNotEmpty,
    required TResult Function() filesIsEmpty,
    required TResult Function() filesIsNotEmpty,
    required TResult Function(String pageId) relationContains,
    required TResult Function(String pageId) relationDoesNotContain,
    required TResult Function() relationIsEmpty,
    required TResult Function() relationIsNotEmpty,
  }) {
    return numberLessThanOrEqual(value);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function(String value)? textEquals,
    TResult? Function(String value)? textDoesNotEqual,
    TResult? Function(String value)? textContains,
    TResult? Function(String value)? textDoesNotContain,
    TResult? Function(String value)? textStartsWith,
    TResult? Function(String value)? textEndsWith,
    TResult? Function()? textIsEmpty,
    TResult? Function()? textIsNotEmpty,
    TResult? Function(double value)? numberEquals,
    TResult? Function(double value)? numberDoesNotEqual,
    TResult? Function(double value)? numberGreaterThan,
    TResult? Function(double value)? numberLessThan,
    TResult? Function(double value)? numberGreaterThanOrEqual,
    TResult? Function(double value)? numberLessThanOrEqual,
    TResult? Function()? numberIsEmpty,
    TResult? Function()? numberIsNotEmpty,
    TResult? Function(bool value)? checkboxEquals,
    TResult? Function(String value)? selectEquals,
    TResult? Function(String value)? selectDoesNotEqual,
    TResult? Function()? selectIsEmpty,
    TResult? Function()? selectIsNotEmpty,
    TResult? Function(String value)? multiSelectContains,
    TResult? Function(String value)? multiSelectDoesNotContain,
    TResult? Function()? multiSelectIsEmpty,
    TResult? Function()? multiSelectIsNotEmpty,
    TResult? Function(String date)? dateEquals,
    TResult? Function(String date)? dateBefore,
    TResult? Function(String date)? dateAfter,
    TResult? Function(String date)? dateOnOrBefore,
    TResult? Function(String date)? dateOnOrAfter,
    TResult? Function()? dateIsEmpty,
    TResult? Function()? dateIsNotEmpty,
    TResult? Function()? datePastWeek,
    TResult? Function()? datePastMonth,
    TResult? Function()? datePastYear,
    TResult? Function()? dateNextWeek,
    TResult? Function()? dateNextMonth,
    TResult? Function()? dateNextYear,
    TResult? Function(String userId)? peopleContains,
    TResult? Function(String userId)? peopleDoesNotContain,
    TResult? Function()? peopleIsEmpty,
    TResult? Function()? peopleIsNotEmpty,
    TResult? Function()? filesIsEmpty,
    TResult? Function()? filesIsNotEmpty,
    TResult? Function(String pageId)? relationContains,
    TResult? Function(String pageId)? relationDoesNotContain,
    TResult? Function()? relationIsEmpty,
    TResult? Function()? relationIsNotEmpty,
  }) {
    return numberLessThanOrEqual?.call(value);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function(String value)? textEquals,
    TResult Function(String value)? textDoesNotEqual,
    TResult Function(String value)? textContains,
    TResult Function(String value)? textDoesNotContain,
    TResult Function(String value)? textStartsWith,
    TResult Function(String value)? textEndsWith,
    TResult Function()? textIsEmpty,
    TResult Function()? textIsNotEmpty,
    TResult Function(double value)? numberEquals,
    TResult Function(double value)? numberDoesNotEqual,
    TResult Function(double value)? numberGreaterThan,
    TResult Function(double value)? numberLessThan,
    TResult Function(double value)? numberGreaterThanOrEqual,
    TResult Function(double value)? numberLessThanOrEqual,
    TResult Function()? numberIsEmpty,
    TResult Function()? numberIsNotEmpty,
    TResult Function(bool value)? checkboxEquals,
    TResult Function(String value)? selectEquals,
    TResult Function(String value)? selectDoesNotEqual,
    TResult Function()? selectIsEmpty,
    TResult Function()? selectIsNotEmpty,
    TResult Function(String value)? multiSelectContains,
    TResult Function(String value)? multiSelectDoesNotContain,
    TResult Function()? multiSelectIsEmpty,
    TResult Function()? multiSelectIsNotEmpty,
    TResult Function(String date)? dateEquals,
    TResult Function(String date)? dateBefore,
    TResult Function(String date)? dateAfter,
    TResult Function(String date)? dateOnOrBefore,
    TResult Function(String date)? dateOnOrAfter,
    TResult Function()? dateIsEmpty,
    TResult Function()? dateIsNotEmpty,
    TResult Function()? datePastWeek,
    TResult Function()? datePastMonth,
    TResult Function()? datePastYear,
    TResult Function()? dateNextWeek,
    TResult Function()? dateNextMonth,
    TResult Function()? dateNextYear,
    TResult Function(String userId)? peopleContains,
    TResult Function(String userId)? peopleDoesNotContain,
    TResult Function()? peopleIsEmpty,
    TResult Function()? peopleIsNotEmpty,
    TResult Function()? filesIsEmpty,
    TResult Function()? filesIsNotEmpty,
    TResult Function(String pageId)? relationContains,
    TResult Function(String pageId)? relationDoesNotContain,
    TResult Function()? relationIsEmpty,
    TResult Function()? relationIsNotEmpty,
    required TResult orElse(),
  }) {
    if (numberLessThanOrEqual != null) {
      return numberLessThanOrEqual(value);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(TextEqualsFilter value) textEquals,
    required TResult Function(TextDoesNotEqualFilter value) textDoesNotEqual,
    required TResult Function(TextContainsFilter value) textContains,
    required TResult Function(TextDoesNotContainFilter value)
        textDoesNotContain,
    required TResult Function(TextStartsWithFilter value) textStartsWith,
    required TResult Function(TextEndsWithFilter value) textEndsWith,
    required TResult Function(TextIsEmptyFilter value) textIsEmpty,
    required TResult Function(TextIsNotEmptyFilter value) textIsNotEmpty,
    required TResult Function(NumberEqualsFilter value) numberEquals,
    required TResult Function(NumberDoesNotEqualFilter value)
        numberDoesNotEqual,
    required TResult Function(NumberGreaterThanFilter value) numberGreaterThan,
    required TResult Function(NumberLessThanFilter value) numberLessThan,
    required TResult Function(NumberGreaterThanOrEqualFilter value)
        numberGreaterThanOrEqual,
    required TResult Function(NumberLessThanOrEqualFilter value)
        numberLessThanOrEqual,
    required TResult Function(NumberIsEmptyFilter value) numberIsEmpty,
    required TResult Function(NumberIsNotEmptyFilter value) numberIsNotEmpty,
    required TResult Function(CheckboxEqualsFilter value) checkboxEquals,
    required TResult Function(SelectEqualsFilter value) selectEquals,
    required TResult Function(SelectDoesNotEqualFilter value)
        selectDoesNotEqual,
    required TResult Function(SelectIsEmptyFilter value) selectIsEmpty,
    required TResult Function(SelectIsNotEmptyFilter value) selectIsNotEmpty,
    required TResult Function(MultiSelectContainsFilter value)
        multiSelectContains,
    required TResult Function(MultiSelectDoesNotContainFilter value)
        multiSelectDoesNotContain,
    required TResult Function(MultiSelectIsEmptyFilter value)
        multiSelectIsEmpty,
    required TResult Function(MultiSelectIsNotEmptyFilter value)
        multiSelectIsNotEmpty,
    required TResult Function(DateEqualsFilter value) dateEquals,
    required TResult Function(DateBeforeFilter value) dateBefore,
    required TResult Function(DateAfterFilter value) dateAfter,
    required TResult Function(DateOnOrBeforeFilter value) dateOnOrBefore,
    required TResult Function(DateOnOrAfterFilter value) dateOnOrAfter,
    required TResult Function(DateIsEmptyFilter value) dateIsEmpty,
    required TResult Function(DateIsNotEmptyFilter value) dateIsNotEmpty,
    required TResult Function(DatePastWeekFilter value) datePastWeek,
    required TResult Function(DatePastMonthFilter value) datePastMonth,
    required TResult Function(DatePastYearFilter value) datePastYear,
    required TResult Function(DateNextWeekFilter value) dateNextWeek,
    required TResult Function(DateNextMonthFilter value) dateNextMonth,
    required TResult Function(DateNextYearFilter value) dateNextYear,
    required TResult Function(PeopleContainsFilter value) peopleContains,
    required TResult Function(PeopleDoesNotContainFilter value)
        peopleDoesNotContain,
    required TResult Function(PeopleIsEmptyFilter value) peopleIsEmpty,
    required TResult Function(PeopleIsNotEmptyFilter value) peopleIsNotEmpty,
    required TResult Function(FilesIsEmptyFilter value) filesIsEmpty,
    required TResult Function(FilesIsNotEmptyFilter value) filesIsNotEmpty,
    required TResult Function(RelationContainsFilter value) relationContains,
    required TResult Function(RelationDoesNotContainFilter value)
        relationDoesNotContain,
    required TResult Function(RelationIsEmptyFilter value) relationIsEmpty,
    required TResult Function(RelationIsNotEmptyFilter value)
        relationIsNotEmpty,
  }) {
    return numberLessThanOrEqual(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(TextEqualsFilter value)? textEquals,
    TResult? Function(TextDoesNotEqualFilter value)? textDoesNotEqual,
    TResult? Function(TextContainsFilter value)? textContains,
    TResult? Function(TextDoesNotContainFilter value)? textDoesNotContain,
    TResult? Function(TextStartsWithFilter value)? textStartsWith,
    TResult? Function(TextEndsWithFilter value)? textEndsWith,
    TResult? Function(TextIsEmptyFilter value)? textIsEmpty,
    TResult? Function(TextIsNotEmptyFilter value)? textIsNotEmpty,
    TResult? Function(NumberEqualsFilter value)? numberEquals,
    TResult? Function(NumberDoesNotEqualFilter value)? numberDoesNotEqual,
    TResult? Function(NumberGreaterThanFilter value)? numberGreaterThan,
    TResult? Function(NumberLessThanFilter value)? numberLessThan,
    TResult? Function(NumberGreaterThanOrEqualFilter value)?
        numberGreaterThanOrEqual,
    TResult? Function(NumberLessThanOrEqualFilter value)? numberLessThanOrEqual,
    TResult? Function(NumberIsEmptyFilter value)? numberIsEmpty,
    TResult? Function(NumberIsNotEmptyFilter value)? numberIsNotEmpty,
    TResult? Function(CheckboxEqualsFilter value)? checkboxEquals,
    TResult? Function(SelectEqualsFilter value)? selectEquals,
    TResult? Function(SelectDoesNotEqualFilter value)? selectDoesNotEqual,
    TResult? Function(SelectIsEmptyFilter value)? selectIsEmpty,
    TResult? Function(SelectIsNotEmptyFilter value)? selectIsNotEmpty,
    TResult? Function(MultiSelectContainsFilter value)? multiSelectContains,
    TResult? Function(MultiSelectDoesNotContainFilter value)?
        multiSelectDoesNotContain,
    TResult? Function(MultiSelectIsEmptyFilter value)? multiSelectIsEmpty,
    TResult? Function(MultiSelectIsNotEmptyFilter value)? multiSelectIsNotEmpty,
    TResult? Function(DateEqualsFilter value)? dateEquals,
    TResult? Function(DateBeforeFilter value)? dateBefore,
    TResult? Function(DateAfterFilter value)? dateAfter,
    TResult? Function(DateOnOrBeforeFilter value)? dateOnOrBefore,
    TResult? Function(DateOnOrAfterFilter value)? dateOnOrAfter,
    TResult? Function(DateIsEmptyFilter value)? dateIsEmpty,
    TResult? Function(DateIsNotEmptyFilter value)? dateIsNotEmpty,
    TResult? Function(DatePastWeekFilter value)? datePastWeek,
    TResult? Function(DatePastMonthFilter value)? datePastMonth,
    TResult? Function(DatePastYearFilter value)? datePastYear,
    TResult? Function(DateNextWeekFilter value)? dateNextWeek,
    TResult? Function(DateNextMonthFilter value)? dateNextMonth,
    TResult? Function(DateNextYearFilter value)? dateNextYear,
    TResult? Function(PeopleContainsFilter value)? peopleContains,
    TResult? Function(PeopleDoesNotContainFilter value)? peopleDoesNotContain,
    TResult? Function(PeopleIsEmptyFilter value)? peopleIsEmpty,
    TResult? Function(PeopleIsNotEmptyFilter value)? peopleIsNotEmpty,
    TResult? Function(FilesIsEmptyFilter value)? filesIsEmpty,
    TResult? Function(FilesIsNotEmptyFilter value)? filesIsNotEmpty,
    TResult? Function(RelationContainsFilter value)? relationContains,
    TResult? Function(RelationDoesNotContainFilter value)?
        relationDoesNotContain,
    TResult? Function(RelationIsEmptyFilter value)? relationIsEmpty,
    TResult? Function(RelationIsNotEmptyFilter value)? relationIsNotEmpty,
  }) {
    return numberLessThanOrEqual?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(TextEqualsFilter value)? textEquals,
    TResult Function(TextDoesNotEqualFilter value)? textDoesNotEqual,
    TResult Function(TextContainsFilter value)? textContains,
    TResult Function(TextDoesNotContainFilter value)? textDoesNotContain,
    TResult Function(TextStartsWithFilter value)? textStartsWith,
    TResult Function(TextEndsWithFilter value)? textEndsWith,
    TResult Function(TextIsEmptyFilter value)? textIsEmpty,
    TResult Function(TextIsNotEmptyFilter value)? textIsNotEmpty,
    TResult Function(NumberEqualsFilter value)? numberEquals,
    TResult Function(NumberDoesNotEqualFilter value)? numberDoesNotEqual,
    TResult Function(NumberGreaterThanFilter value)? numberGreaterThan,
    TResult Function(NumberLessThanFilter value)? numberLessThan,
    TResult Function(NumberGreaterThanOrEqualFilter value)?
        numberGreaterThanOrEqual,
    TResult Function(NumberLessThanOrEqualFilter value)? numberLessThanOrEqual,
    TResult Function(NumberIsEmptyFilter value)? numberIsEmpty,
    TResult Function(NumberIsNotEmptyFilter value)? numberIsNotEmpty,
    TResult Function(CheckboxEqualsFilter value)? checkboxEquals,
    TResult Function(SelectEqualsFilter value)? selectEquals,
    TResult Function(SelectDoesNotEqualFilter value)? selectDoesNotEqual,
    TResult Function(SelectIsEmptyFilter value)? selectIsEmpty,
    TResult Function(SelectIsNotEmptyFilter value)? selectIsNotEmpty,
    TResult Function(MultiSelectContainsFilter value)? multiSelectContains,
    TResult Function(MultiSelectDoesNotContainFilter value)?
        multiSelectDoesNotContain,
    TResult Function(MultiSelectIsEmptyFilter value)? multiSelectIsEmpty,
    TResult Function(MultiSelectIsNotEmptyFilter value)? multiSelectIsNotEmpty,
    TResult Function(DateEqualsFilter value)? dateEquals,
    TResult Function(DateBeforeFilter value)? dateBefore,
    TResult Function(DateAfterFilter value)? dateAfter,
    TResult Function(DateOnOrBeforeFilter value)? dateOnOrBefore,
    TResult Function(DateOnOrAfterFilter value)? dateOnOrAfter,
    TResult Function(DateIsEmptyFilter value)? dateIsEmpty,
    TResult Function(DateIsNotEmptyFilter value)? dateIsNotEmpty,
    TResult Function(DatePastWeekFilter value)? datePastWeek,
    TResult Function(DatePastMonthFilter value)? datePastMonth,
    TResult Function(DatePastYearFilter value)? datePastYear,
    TResult Function(DateNextWeekFilter value)? dateNextWeek,
    TResult Function(DateNextMonthFilter value)? dateNextMonth,
    TResult Function(DateNextYearFilter value)? dateNextYear,
    TResult Function(PeopleContainsFilter value)? peopleContains,
    TResult Function(PeopleDoesNotContainFilter value)? peopleDoesNotContain,
    TResult Function(PeopleIsEmptyFilter value)? peopleIsEmpty,
    TResult Function(PeopleIsNotEmptyFilter value)? peopleIsNotEmpty,
    TResult Function(FilesIsEmptyFilter value)? filesIsEmpty,
    TResult Function(FilesIsNotEmptyFilter value)? filesIsNotEmpty,
    TResult Function(RelationContainsFilter value)? relationContains,
    TResult Function(RelationDoesNotContainFilter value)?
        relationDoesNotContain,
    TResult Function(RelationIsEmptyFilter value)? relationIsEmpty,
    TResult Function(RelationIsNotEmptyFilter value)? relationIsNotEmpty,
    required TResult orElse(),
  }) {
    if (numberLessThanOrEqual != null) {
      return numberLessThanOrEqual(this);
    }
    return orElse();
  }
}

abstract class NumberLessThanOrEqualFilter extends PropertyFilter {
  const factory NumberLessThanOrEqualFilter(final double value) =
      _$NumberLessThanOrEqualFilterImpl;
  const NumberLessThanOrEqualFilter._() : super._();

  double get value;

  /// Create a copy of PropertyFilter
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  _$$NumberLessThanOrEqualFilterImplCopyWith<_$NumberLessThanOrEqualFilterImpl>
      get copyWith => throw _privateConstructorUsedError;
}

/// @nodoc
abstract class _$$NumberIsEmptyFilterImplCopyWith<$Res> {
  factory _$$NumberIsEmptyFilterImplCopyWith(_$NumberIsEmptyFilterImpl value,
          $Res Function(_$NumberIsEmptyFilterImpl) then) =
      __$$NumberIsEmptyFilterImplCopyWithImpl<$Res>;
}

/// @nodoc
class __$$NumberIsEmptyFilterImplCopyWithImpl<$Res>
    extends _$PropertyFilterCopyWithImpl<$Res, _$NumberIsEmptyFilterImpl>
    implements _$$NumberIsEmptyFilterImplCopyWith<$Res> {
  __$$NumberIsEmptyFilterImplCopyWithImpl(_$NumberIsEmptyFilterImpl _value,
      $Res Function(_$NumberIsEmptyFilterImpl) _then)
      : super(_value, _then);

  /// Create a copy of PropertyFilter
  /// with the given fields replaced by the non-null parameter values.
}

/// @nodoc

class _$NumberIsEmptyFilterImpl extends NumberIsEmptyFilter {
  const _$NumberIsEmptyFilterImpl() : super._();

  @override
  String toString() {
    return 'PropertyFilter.numberIsEmpty()';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$NumberIsEmptyFilterImpl);
  }

  @override
  int get hashCode => runtimeType.hashCode;

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function(String value) textEquals,
    required TResult Function(String value) textDoesNotEqual,
    required TResult Function(String value) textContains,
    required TResult Function(String value) textDoesNotContain,
    required TResult Function(String value) textStartsWith,
    required TResult Function(String value) textEndsWith,
    required TResult Function() textIsEmpty,
    required TResult Function() textIsNotEmpty,
    required TResult Function(double value) numberEquals,
    required TResult Function(double value) numberDoesNotEqual,
    required TResult Function(double value) numberGreaterThan,
    required TResult Function(double value) numberLessThan,
    required TResult Function(double value) numberGreaterThanOrEqual,
    required TResult Function(double value) numberLessThanOrEqual,
    required TResult Function() numberIsEmpty,
    required TResult Function() numberIsNotEmpty,
    required TResult Function(bool value) checkboxEquals,
    required TResult Function(String value) selectEquals,
    required TResult Function(String value) selectDoesNotEqual,
    required TResult Function() selectIsEmpty,
    required TResult Function() selectIsNotEmpty,
    required TResult Function(String value) multiSelectContains,
    required TResult Function(String value) multiSelectDoesNotContain,
    required TResult Function() multiSelectIsEmpty,
    required TResult Function() multiSelectIsNotEmpty,
    required TResult Function(String date) dateEquals,
    required TResult Function(String date) dateBefore,
    required TResult Function(String date) dateAfter,
    required TResult Function(String date) dateOnOrBefore,
    required TResult Function(String date) dateOnOrAfter,
    required TResult Function() dateIsEmpty,
    required TResult Function() dateIsNotEmpty,
    required TResult Function() datePastWeek,
    required TResult Function() datePastMonth,
    required TResult Function() datePastYear,
    required TResult Function() dateNextWeek,
    required TResult Function() dateNextMonth,
    required TResult Function() dateNextYear,
    required TResult Function(String userId) peopleContains,
    required TResult Function(String userId) peopleDoesNotContain,
    required TResult Function() peopleIsEmpty,
    required TResult Function() peopleIsNotEmpty,
    required TResult Function() filesIsEmpty,
    required TResult Function() filesIsNotEmpty,
    required TResult Function(String pageId) relationContains,
    required TResult Function(String pageId) relationDoesNotContain,
    required TResult Function() relationIsEmpty,
    required TResult Function() relationIsNotEmpty,
  }) {
    return numberIsEmpty();
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function(String value)? textEquals,
    TResult? Function(String value)? textDoesNotEqual,
    TResult? Function(String value)? textContains,
    TResult? Function(String value)? textDoesNotContain,
    TResult? Function(String value)? textStartsWith,
    TResult? Function(String value)? textEndsWith,
    TResult? Function()? textIsEmpty,
    TResult? Function()? textIsNotEmpty,
    TResult? Function(double value)? numberEquals,
    TResult? Function(double value)? numberDoesNotEqual,
    TResult? Function(double value)? numberGreaterThan,
    TResult? Function(double value)? numberLessThan,
    TResult? Function(double value)? numberGreaterThanOrEqual,
    TResult? Function(double value)? numberLessThanOrEqual,
    TResult? Function()? numberIsEmpty,
    TResult? Function()? numberIsNotEmpty,
    TResult? Function(bool value)? checkboxEquals,
    TResult? Function(String value)? selectEquals,
    TResult? Function(String value)? selectDoesNotEqual,
    TResult? Function()? selectIsEmpty,
    TResult? Function()? selectIsNotEmpty,
    TResult? Function(String value)? multiSelectContains,
    TResult? Function(String value)? multiSelectDoesNotContain,
    TResult? Function()? multiSelectIsEmpty,
    TResult? Function()? multiSelectIsNotEmpty,
    TResult? Function(String date)? dateEquals,
    TResult? Function(String date)? dateBefore,
    TResult? Function(String date)? dateAfter,
    TResult? Function(String date)? dateOnOrBefore,
    TResult? Function(String date)? dateOnOrAfter,
    TResult? Function()? dateIsEmpty,
    TResult? Function()? dateIsNotEmpty,
    TResult? Function()? datePastWeek,
    TResult? Function()? datePastMonth,
    TResult? Function()? datePastYear,
    TResult? Function()? dateNextWeek,
    TResult? Function()? dateNextMonth,
    TResult? Function()? dateNextYear,
    TResult? Function(String userId)? peopleContains,
    TResult? Function(String userId)? peopleDoesNotContain,
    TResult? Function()? peopleIsEmpty,
    TResult? Function()? peopleIsNotEmpty,
    TResult? Function()? filesIsEmpty,
    TResult? Function()? filesIsNotEmpty,
    TResult? Function(String pageId)? relationContains,
    TResult? Function(String pageId)? relationDoesNotContain,
    TResult? Function()? relationIsEmpty,
    TResult? Function()? relationIsNotEmpty,
  }) {
    return numberIsEmpty?.call();
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function(String value)? textEquals,
    TResult Function(String value)? textDoesNotEqual,
    TResult Function(String value)? textContains,
    TResult Function(String value)? textDoesNotContain,
    TResult Function(String value)? textStartsWith,
    TResult Function(String value)? textEndsWith,
    TResult Function()? textIsEmpty,
    TResult Function()? textIsNotEmpty,
    TResult Function(double value)? numberEquals,
    TResult Function(double value)? numberDoesNotEqual,
    TResult Function(double value)? numberGreaterThan,
    TResult Function(double value)? numberLessThan,
    TResult Function(double value)? numberGreaterThanOrEqual,
    TResult Function(double value)? numberLessThanOrEqual,
    TResult Function()? numberIsEmpty,
    TResult Function()? numberIsNotEmpty,
    TResult Function(bool value)? checkboxEquals,
    TResult Function(String value)? selectEquals,
    TResult Function(String value)? selectDoesNotEqual,
    TResult Function()? selectIsEmpty,
    TResult Function()? selectIsNotEmpty,
    TResult Function(String value)? multiSelectContains,
    TResult Function(String value)? multiSelectDoesNotContain,
    TResult Function()? multiSelectIsEmpty,
    TResult Function()? multiSelectIsNotEmpty,
    TResult Function(String date)? dateEquals,
    TResult Function(String date)? dateBefore,
    TResult Function(String date)? dateAfter,
    TResult Function(String date)? dateOnOrBefore,
    TResult Function(String date)? dateOnOrAfter,
    TResult Function()? dateIsEmpty,
    TResult Function()? dateIsNotEmpty,
    TResult Function()? datePastWeek,
    TResult Function()? datePastMonth,
    TResult Function()? datePastYear,
    TResult Function()? dateNextWeek,
    TResult Function()? dateNextMonth,
    TResult Function()? dateNextYear,
    TResult Function(String userId)? peopleContains,
    TResult Function(String userId)? peopleDoesNotContain,
    TResult Function()? peopleIsEmpty,
    TResult Function()? peopleIsNotEmpty,
    TResult Function()? filesIsEmpty,
    TResult Function()? filesIsNotEmpty,
    TResult Function(String pageId)? relationContains,
    TResult Function(String pageId)? relationDoesNotContain,
    TResult Function()? relationIsEmpty,
    TResult Function()? relationIsNotEmpty,
    required TResult orElse(),
  }) {
    if (numberIsEmpty != null) {
      return numberIsEmpty();
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(TextEqualsFilter value) textEquals,
    required TResult Function(TextDoesNotEqualFilter value) textDoesNotEqual,
    required TResult Function(TextContainsFilter value) textContains,
    required TResult Function(TextDoesNotContainFilter value)
        textDoesNotContain,
    required TResult Function(TextStartsWithFilter value) textStartsWith,
    required TResult Function(TextEndsWithFilter value) textEndsWith,
    required TResult Function(TextIsEmptyFilter value) textIsEmpty,
    required TResult Function(TextIsNotEmptyFilter value) textIsNotEmpty,
    required TResult Function(NumberEqualsFilter value) numberEquals,
    required TResult Function(NumberDoesNotEqualFilter value)
        numberDoesNotEqual,
    required TResult Function(NumberGreaterThanFilter value) numberGreaterThan,
    required TResult Function(NumberLessThanFilter value) numberLessThan,
    required TResult Function(NumberGreaterThanOrEqualFilter value)
        numberGreaterThanOrEqual,
    required TResult Function(NumberLessThanOrEqualFilter value)
        numberLessThanOrEqual,
    required TResult Function(NumberIsEmptyFilter value) numberIsEmpty,
    required TResult Function(NumberIsNotEmptyFilter value) numberIsNotEmpty,
    required TResult Function(CheckboxEqualsFilter value) checkboxEquals,
    required TResult Function(SelectEqualsFilter value) selectEquals,
    required TResult Function(SelectDoesNotEqualFilter value)
        selectDoesNotEqual,
    required TResult Function(SelectIsEmptyFilter value) selectIsEmpty,
    required TResult Function(SelectIsNotEmptyFilter value) selectIsNotEmpty,
    required TResult Function(MultiSelectContainsFilter value)
        multiSelectContains,
    required TResult Function(MultiSelectDoesNotContainFilter value)
        multiSelectDoesNotContain,
    required TResult Function(MultiSelectIsEmptyFilter value)
        multiSelectIsEmpty,
    required TResult Function(MultiSelectIsNotEmptyFilter value)
        multiSelectIsNotEmpty,
    required TResult Function(DateEqualsFilter value) dateEquals,
    required TResult Function(DateBeforeFilter value) dateBefore,
    required TResult Function(DateAfterFilter value) dateAfter,
    required TResult Function(DateOnOrBeforeFilter value) dateOnOrBefore,
    required TResult Function(DateOnOrAfterFilter value) dateOnOrAfter,
    required TResult Function(DateIsEmptyFilter value) dateIsEmpty,
    required TResult Function(DateIsNotEmptyFilter value) dateIsNotEmpty,
    required TResult Function(DatePastWeekFilter value) datePastWeek,
    required TResult Function(DatePastMonthFilter value) datePastMonth,
    required TResult Function(DatePastYearFilter value) datePastYear,
    required TResult Function(DateNextWeekFilter value) dateNextWeek,
    required TResult Function(DateNextMonthFilter value) dateNextMonth,
    required TResult Function(DateNextYearFilter value) dateNextYear,
    required TResult Function(PeopleContainsFilter value) peopleContains,
    required TResult Function(PeopleDoesNotContainFilter value)
        peopleDoesNotContain,
    required TResult Function(PeopleIsEmptyFilter value) peopleIsEmpty,
    required TResult Function(PeopleIsNotEmptyFilter value) peopleIsNotEmpty,
    required TResult Function(FilesIsEmptyFilter value) filesIsEmpty,
    required TResult Function(FilesIsNotEmptyFilter value) filesIsNotEmpty,
    required TResult Function(RelationContainsFilter value) relationContains,
    required TResult Function(RelationDoesNotContainFilter value)
        relationDoesNotContain,
    required TResult Function(RelationIsEmptyFilter value) relationIsEmpty,
    required TResult Function(RelationIsNotEmptyFilter value)
        relationIsNotEmpty,
  }) {
    return numberIsEmpty(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(TextEqualsFilter value)? textEquals,
    TResult? Function(TextDoesNotEqualFilter value)? textDoesNotEqual,
    TResult? Function(TextContainsFilter value)? textContains,
    TResult? Function(TextDoesNotContainFilter value)? textDoesNotContain,
    TResult? Function(TextStartsWithFilter value)? textStartsWith,
    TResult? Function(TextEndsWithFilter value)? textEndsWith,
    TResult? Function(TextIsEmptyFilter value)? textIsEmpty,
    TResult? Function(TextIsNotEmptyFilter value)? textIsNotEmpty,
    TResult? Function(NumberEqualsFilter value)? numberEquals,
    TResult? Function(NumberDoesNotEqualFilter value)? numberDoesNotEqual,
    TResult? Function(NumberGreaterThanFilter value)? numberGreaterThan,
    TResult? Function(NumberLessThanFilter value)? numberLessThan,
    TResult? Function(NumberGreaterThanOrEqualFilter value)?
        numberGreaterThanOrEqual,
    TResult? Function(NumberLessThanOrEqualFilter value)? numberLessThanOrEqual,
    TResult? Function(NumberIsEmptyFilter value)? numberIsEmpty,
    TResult? Function(NumberIsNotEmptyFilter value)? numberIsNotEmpty,
    TResult? Function(CheckboxEqualsFilter value)? checkboxEquals,
    TResult? Function(SelectEqualsFilter value)? selectEquals,
    TResult? Function(SelectDoesNotEqualFilter value)? selectDoesNotEqual,
    TResult? Function(SelectIsEmptyFilter value)? selectIsEmpty,
    TResult? Function(SelectIsNotEmptyFilter value)? selectIsNotEmpty,
    TResult? Function(MultiSelectContainsFilter value)? multiSelectContains,
    TResult? Function(MultiSelectDoesNotContainFilter value)?
        multiSelectDoesNotContain,
    TResult? Function(MultiSelectIsEmptyFilter value)? multiSelectIsEmpty,
    TResult? Function(MultiSelectIsNotEmptyFilter value)? multiSelectIsNotEmpty,
    TResult? Function(DateEqualsFilter value)? dateEquals,
    TResult? Function(DateBeforeFilter value)? dateBefore,
    TResult? Function(DateAfterFilter value)? dateAfter,
    TResult? Function(DateOnOrBeforeFilter value)? dateOnOrBefore,
    TResult? Function(DateOnOrAfterFilter value)? dateOnOrAfter,
    TResult? Function(DateIsEmptyFilter value)? dateIsEmpty,
    TResult? Function(DateIsNotEmptyFilter value)? dateIsNotEmpty,
    TResult? Function(DatePastWeekFilter value)? datePastWeek,
    TResult? Function(DatePastMonthFilter value)? datePastMonth,
    TResult? Function(DatePastYearFilter value)? datePastYear,
    TResult? Function(DateNextWeekFilter value)? dateNextWeek,
    TResult? Function(DateNextMonthFilter value)? dateNextMonth,
    TResult? Function(DateNextYearFilter value)? dateNextYear,
    TResult? Function(PeopleContainsFilter value)? peopleContains,
    TResult? Function(PeopleDoesNotContainFilter value)? peopleDoesNotContain,
    TResult? Function(PeopleIsEmptyFilter value)? peopleIsEmpty,
    TResult? Function(PeopleIsNotEmptyFilter value)? peopleIsNotEmpty,
    TResult? Function(FilesIsEmptyFilter value)? filesIsEmpty,
    TResult? Function(FilesIsNotEmptyFilter value)? filesIsNotEmpty,
    TResult? Function(RelationContainsFilter value)? relationContains,
    TResult? Function(RelationDoesNotContainFilter value)?
        relationDoesNotContain,
    TResult? Function(RelationIsEmptyFilter value)? relationIsEmpty,
    TResult? Function(RelationIsNotEmptyFilter value)? relationIsNotEmpty,
  }) {
    return numberIsEmpty?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(TextEqualsFilter value)? textEquals,
    TResult Function(TextDoesNotEqualFilter value)? textDoesNotEqual,
    TResult Function(TextContainsFilter value)? textContains,
    TResult Function(TextDoesNotContainFilter value)? textDoesNotContain,
    TResult Function(TextStartsWithFilter value)? textStartsWith,
    TResult Function(TextEndsWithFilter value)? textEndsWith,
    TResult Function(TextIsEmptyFilter value)? textIsEmpty,
    TResult Function(TextIsNotEmptyFilter value)? textIsNotEmpty,
    TResult Function(NumberEqualsFilter value)? numberEquals,
    TResult Function(NumberDoesNotEqualFilter value)? numberDoesNotEqual,
    TResult Function(NumberGreaterThanFilter value)? numberGreaterThan,
    TResult Function(NumberLessThanFilter value)? numberLessThan,
    TResult Function(NumberGreaterThanOrEqualFilter value)?
        numberGreaterThanOrEqual,
    TResult Function(NumberLessThanOrEqualFilter value)? numberLessThanOrEqual,
    TResult Function(NumberIsEmptyFilter value)? numberIsEmpty,
    TResult Function(NumberIsNotEmptyFilter value)? numberIsNotEmpty,
    TResult Function(CheckboxEqualsFilter value)? checkboxEquals,
    TResult Function(SelectEqualsFilter value)? selectEquals,
    TResult Function(SelectDoesNotEqualFilter value)? selectDoesNotEqual,
    TResult Function(SelectIsEmptyFilter value)? selectIsEmpty,
    TResult Function(SelectIsNotEmptyFilter value)? selectIsNotEmpty,
    TResult Function(MultiSelectContainsFilter value)? multiSelectContains,
    TResult Function(MultiSelectDoesNotContainFilter value)?
        multiSelectDoesNotContain,
    TResult Function(MultiSelectIsEmptyFilter value)? multiSelectIsEmpty,
    TResult Function(MultiSelectIsNotEmptyFilter value)? multiSelectIsNotEmpty,
    TResult Function(DateEqualsFilter value)? dateEquals,
    TResult Function(DateBeforeFilter value)? dateBefore,
    TResult Function(DateAfterFilter value)? dateAfter,
    TResult Function(DateOnOrBeforeFilter value)? dateOnOrBefore,
    TResult Function(DateOnOrAfterFilter value)? dateOnOrAfter,
    TResult Function(DateIsEmptyFilter value)? dateIsEmpty,
    TResult Function(DateIsNotEmptyFilter value)? dateIsNotEmpty,
    TResult Function(DatePastWeekFilter value)? datePastWeek,
    TResult Function(DatePastMonthFilter value)? datePastMonth,
    TResult Function(DatePastYearFilter value)? datePastYear,
    TResult Function(DateNextWeekFilter value)? dateNextWeek,
    TResult Function(DateNextMonthFilter value)? dateNextMonth,
    TResult Function(DateNextYearFilter value)? dateNextYear,
    TResult Function(PeopleContainsFilter value)? peopleContains,
    TResult Function(PeopleDoesNotContainFilter value)? peopleDoesNotContain,
    TResult Function(PeopleIsEmptyFilter value)? peopleIsEmpty,
    TResult Function(PeopleIsNotEmptyFilter value)? peopleIsNotEmpty,
    TResult Function(FilesIsEmptyFilter value)? filesIsEmpty,
    TResult Function(FilesIsNotEmptyFilter value)? filesIsNotEmpty,
    TResult Function(RelationContainsFilter value)? relationContains,
    TResult Function(RelationDoesNotContainFilter value)?
        relationDoesNotContain,
    TResult Function(RelationIsEmptyFilter value)? relationIsEmpty,
    TResult Function(RelationIsNotEmptyFilter value)? relationIsNotEmpty,
    required TResult orElse(),
  }) {
    if (numberIsEmpty != null) {
      return numberIsEmpty(this);
    }
    return orElse();
  }
}

abstract class NumberIsEmptyFilter extends PropertyFilter {
  const factory NumberIsEmptyFilter() = _$NumberIsEmptyFilterImpl;
  const NumberIsEmptyFilter._() : super._();
}

/// @nodoc
abstract class _$$NumberIsNotEmptyFilterImplCopyWith<$Res> {
  factory _$$NumberIsNotEmptyFilterImplCopyWith(
          _$NumberIsNotEmptyFilterImpl value,
          $Res Function(_$NumberIsNotEmptyFilterImpl) then) =
      __$$NumberIsNotEmptyFilterImplCopyWithImpl<$Res>;
}

/// @nodoc
class __$$NumberIsNotEmptyFilterImplCopyWithImpl<$Res>
    extends _$PropertyFilterCopyWithImpl<$Res, _$NumberIsNotEmptyFilterImpl>
    implements _$$NumberIsNotEmptyFilterImplCopyWith<$Res> {
  __$$NumberIsNotEmptyFilterImplCopyWithImpl(
      _$NumberIsNotEmptyFilterImpl _value,
      $Res Function(_$NumberIsNotEmptyFilterImpl) _then)
      : super(_value, _then);

  /// Create a copy of PropertyFilter
  /// with the given fields replaced by the non-null parameter values.
}

/// @nodoc

class _$NumberIsNotEmptyFilterImpl extends NumberIsNotEmptyFilter {
  const _$NumberIsNotEmptyFilterImpl() : super._();

  @override
  String toString() {
    return 'PropertyFilter.numberIsNotEmpty()';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$NumberIsNotEmptyFilterImpl);
  }

  @override
  int get hashCode => runtimeType.hashCode;

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function(String value) textEquals,
    required TResult Function(String value) textDoesNotEqual,
    required TResult Function(String value) textContains,
    required TResult Function(String value) textDoesNotContain,
    required TResult Function(String value) textStartsWith,
    required TResult Function(String value) textEndsWith,
    required TResult Function() textIsEmpty,
    required TResult Function() textIsNotEmpty,
    required TResult Function(double value) numberEquals,
    required TResult Function(double value) numberDoesNotEqual,
    required TResult Function(double value) numberGreaterThan,
    required TResult Function(double value) numberLessThan,
    required TResult Function(double value) numberGreaterThanOrEqual,
    required TResult Function(double value) numberLessThanOrEqual,
    required TResult Function() numberIsEmpty,
    required TResult Function() numberIsNotEmpty,
    required TResult Function(bool value) checkboxEquals,
    required TResult Function(String value) selectEquals,
    required TResult Function(String value) selectDoesNotEqual,
    required TResult Function() selectIsEmpty,
    required TResult Function() selectIsNotEmpty,
    required TResult Function(String value) multiSelectContains,
    required TResult Function(String value) multiSelectDoesNotContain,
    required TResult Function() multiSelectIsEmpty,
    required TResult Function() multiSelectIsNotEmpty,
    required TResult Function(String date) dateEquals,
    required TResult Function(String date) dateBefore,
    required TResult Function(String date) dateAfter,
    required TResult Function(String date) dateOnOrBefore,
    required TResult Function(String date) dateOnOrAfter,
    required TResult Function() dateIsEmpty,
    required TResult Function() dateIsNotEmpty,
    required TResult Function() datePastWeek,
    required TResult Function() datePastMonth,
    required TResult Function() datePastYear,
    required TResult Function() dateNextWeek,
    required TResult Function() dateNextMonth,
    required TResult Function() dateNextYear,
    required TResult Function(String userId) peopleContains,
    required TResult Function(String userId) peopleDoesNotContain,
    required TResult Function() peopleIsEmpty,
    required TResult Function() peopleIsNotEmpty,
    required TResult Function() filesIsEmpty,
    required TResult Function() filesIsNotEmpty,
    required TResult Function(String pageId) relationContains,
    required TResult Function(String pageId) relationDoesNotContain,
    required TResult Function() relationIsEmpty,
    required TResult Function() relationIsNotEmpty,
  }) {
    return numberIsNotEmpty();
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function(String value)? textEquals,
    TResult? Function(String value)? textDoesNotEqual,
    TResult? Function(String value)? textContains,
    TResult? Function(String value)? textDoesNotContain,
    TResult? Function(String value)? textStartsWith,
    TResult? Function(String value)? textEndsWith,
    TResult? Function()? textIsEmpty,
    TResult? Function()? textIsNotEmpty,
    TResult? Function(double value)? numberEquals,
    TResult? Function(double value)? numberDoesNotEqual,
    TResult? Function(double value)? numberGreaterThan,
    TResult? Function(double value)? numberLessThan,
    TResult? Function(double value)? numberGreaterThanOrEqual,
    TResult? Function(double value)? numberLessThanOrEqual,
    TResult? Function()? numberIsEmpty,
    TResult? Function()? numberIsNotEmpty,
    TResult? Function(bool value)? checkboxEquals,
    TResult? Function(String value)? selectEquals,
    TResult? Function(String value)? selectDoesNotEqual,
    TResult? Function()? selectIsEmpty,
    TResult? Function()? selectIsNotEmpty,
    TResult? Function(String value)? multiSelectContains,
    TResult? Function(String value)? multiSelectDoesNotContain,
    TResult? Function()? multiSelectIsEmpty,
    TResult? Function()? multiSelectIsNotEmpty,
    TResult? Function(String date)? dateEquals,
    TResult? Function(String date)? dateBefore,
    TResult? Function(String date)? dateAfter,
    TResult? Function(String date)? dateOnOrBefore,
    TResult? Function(String date)? dateOnOrAfter,
    TResult? Function()? dateIsEmpty,
    TResult? Function()? dateIsNotEmpty,
    TResult? Function()? datePastWeek,
    TResult? Function()? datePastMonth,
    TResult? Function()? datePastYear,
    TResult? Function()? dateNextWeek,
    TResult? Function()? dateNextMonth,
    TResult? Function()? dateNextYear,
    TResult? Function(String userId)? peopleContains,
    TResult? Function(String userId)? peopleDoesNotContain,
    TResult? Function()? peopleIsEmpty,
    TResult? Function()? peopleIsNotEmpty,
    TResult? Function()? filesIsEmpty,
    TResult? Function()? filesIsNotEmpty,
    TResult? Function(String pageId)? relationContains,
    TResult? Function(String pageId)? relationDoesNotContain,
    TResult? Function()? relationIsEmpty,
    TResult? Function()? relationIsNotEmpty,
  }) {
    return numberIsNotEmpty?.call();
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function(String value)? textEquals,
    TResult Function(String value)? textDoesNotEqual,
    TResult Function(String value)? textContains,
    TResult Function(String value)? textDoesNotContain,
    TResult Function(String value)? textStartsWith,
    TResult Function(String value)? textEndsWith,
    TResult Function()? textIsEmpty,
    TResult Function()? textIsNotEmpty,
    TResult Function(double value)? numberEquals,
    TResult Function(double value)? numberDoesNotEqual,
    TResult Function(double value)? numberGreaterThan,
    TResult Function(double value)? numberLessThan,
    TResult Function(double value)? numberGreaterThanOrEqual,
    TResult Function(double value)? numberLessThanOrEqual,
    TResult Function()? numberIsEmpty,
    TResult Function()? numberIsNotEmpty,
    TResult Function(bool value)? checkboxEquals,
    TResult Function(String value)? selectEquals,
    TResult Function(String value)? selectDoesNotEqual,
    TResult Function()? selectIsEmpty,
    TResult Function()? selectIsNotEmpty,
    TResult Function(String value)? multiSelectContains,
    TResult Function(String value)? multiSelectDoesNotContain,
    TResult Function()? multiSelectIsEmpty,
    TResult Function()? multiSelectIsNotEmpty,
    TResult Function(String date)? dateEquals,
    TResult Function(String date)? dateBefore,
    TResult Function(String date)? dateAfter,
    TResult Function(String date)? dateOnOrBefore,
    TResult Function(String date)? dateOnOrAfter,
    TResult Function()? dateIsEmpty,
    TResult Function()? dateIsNotEmpty,
    TResult Function()? datePastWeek,
    TResult Function()? datePastMonth,
    TResult Function()? datePastYear,
    TResult Function()? dateNextWeek,
    TResult Function()? dateNextMonth,
    TResult Function()? dateNextYear,
    TResult Function(String userId)? peopleContains,
    TResult Function(String userId)? peopleDoesNotContain,
    TResult Function()? peopleIsEmpty,
    TResult Function()? peopleIsNotEmpty,
    TResult Function()? filesIsEmpty,
    TResult Function()? filesIsNotEmpty,
    TResult Function(String pageId)? relationContains,
    TResult Function(String pageId)? relationDoesNotContain,
    TResult Function()? relationIsEmpty,
    TResult Function()? relationIsNotEmpty,
    required TResult orElse(),
  }) {
    if (numberIsNotEmpty != null) {
      return numberIsNotEmpty();
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(TextEqualsFilter value) textEquals,
    required TResult Function(TextDoesNotEqualFilter value) textDoesNotEqual,
    required TResult Function(TextContainsFilter value) textContains,
    required TResult Function(TextDoesNotContainFilter value)
        textDoesNotContain,
    required TResult Function(TextStartsWithFilter value) textStartsWith,
    required TResult Function(TextEndsWithFilter value) textEndsWith,
    required TResult Function(TextIsEmptyFilter value) textIsEmpty,
    required TResult Function(TextIsNotEmptyFilter value) textIsNotEmpty,
    required TResult Function(NumberEqualsFilter value) numberEquals,
    required TResult Function(NumberDoesNotEqualFilter value)
        numberDoesNotEqual,
    required TResult Function(NumberGreaterThanFilter value) numberGreaterThan,
    required TResult Function(NumberLessThanFilter value) numberLessThan,
    required TResult Function(NumberGreaterThanOrEqualFilter value)
        numberGreaterThanOrEqual,
    required TResult Function(NumberLessThanOrEqualFilter value)
        numberLessThanOrEqual,
    required TResult Function(NumberIsEmptyFilter value) numberIsEmpty,
    required TResult Function(NumberIsNotEmptyFilter value) numberIsNotEmpty,
    required TResult Function(CheckboxEqualsFilter value) checkboxEquals,
    required TResult Function(SelectEqualsFilter value) selectEquals,
    required TResult Function(SelectDoesNotEqualFilter value)
        selectDoesNotEqual,
    required TResult Function(SelectIsEmptyFilter value) selectIsEmpty,
    required TResult Function(SelectIsNotEmptyFilter value) selectIsNotEmpty,
    required TResult Function(MultiSelectContainsFilter value)
        multiSelectContains,
    required TResult Function(MultiSelectDoesNotContainFilter value)
        multiSelectDoesNotContain,
    required TResult Function(MultiSelectIsEmptyFilter value)
        multiSelectIsEmpty,
    required TResult Function(MultiSelectIsNotEmptyFilter value)
        multiSelectIsNotEmpty,
    required TResult Function(DateEqualsFilter value) dateEquals,
    required TResult Function(DateBeforeFilter value) dateBefore,
    required TResult Function(DateAfterFilter value) dateAfter,
    required TResult Function(DateOnOrBeforeFilter value) dateOnOrBefore,
    required TResult Function(DateOnOrAfterFilter value) dateOnOrAfter,
    required TResult Function(DateIsEmptyFilter value) dateIsEmpty,
    required TResult Function(DateIsNotEmptyFilter value) dateIsNotEmpty,
    required TResult Function(DatePastWeekFilter value) datePastWeek,
    required TResult Function(DatePastMonthFilter value) datePastMonth,
    required TResult Function(DatePastYearFilter value) datePastYear,
    required TResult Function(DateNextWeekFilter value) dateNextWeek,
    required TResult Function(DateNextMonthFilter value) dateNextMonth,
    required TResult Function(DateNextYearFilter value) dateNextYear,
    required TResult Function(PeopleContainsFilter value) peopleContains,
    required TResult Function(PeopleDoesNotContainFilter value)
        peopleDoesNotContain,
    required TResult Function(PeopleIsEmptyFilter value) peopleIsEmpty,
    required TResult Function(PeopleIsNotEmptyFilter value) peopleIsNotEmpty,
    required TResult Function(FilesIsEmptyFilter value) filesIsEmpty,
    required TResult Function(FilesIsNotEmptyFilter value) filesIsNotEmpty,
    required TResult Function(RelationContainsFilter value) relationContains,
    required TResult Function(RelationDoesNotContainFilter value)
        relationDoesNotContain,
    required TResult Function(RelationIsEmptyFilter value) relationIsEmpty,
    required TResult Function(RelationIsNotEmptyFilter value)
        relationIsNotEmpty,
  }) {
    return numberIsNotEmpty(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(TextEqualsFilter value)? textEquals,
    TResult? Function(TextDoesNotEqualFilter value)? textDoesNotEqual,
    TResult? Function(TextContainsFilter value)? textContains,
    TResult? Function(TextDoesNotContainFilter value)? textDoesNotContain,
    TResult? Function(TextStartsWithFilter value)? textStartsWith,
    TResult? Function(TextEndsWithFilter value)? textEndsWith,
    TResult? Function(TextIsEmptyFilter value)? textIsEmpty,
    TResult? Function(TextIsNotEmptyFilter value)? textIsNotEmpty,
    TResult? Function(NumberEqualsFilter value)? numberEquals,
    TResult? Function(NumberDoesNotEqualFilter value)? numberDoesNotEqual,
    TResult? Function(NumberGreaterThanFilter value)? numberGreaterThan,
    TResult? Function(NumberLessThanFilter value)? numberLessThan,
    TResult? Function(NumberGreaterThanOrEqualFilter value)?
        numberGreaterThanOrEqual,
    TResult? Function(NumberLessThanOrEqualFilter value)? numberLessThanOrEqual,
    TResult? Function(NumberIsEmptyFilter value)? numberIsEmpty,
    TResult? Function(NumberIsNotEmptyFilter value)? numberIsNotEmpty,
    TResult? Function(CheckboxEqualsFilter value)? checkboxEquals,
    TResult? Function(SelectEqualsFilter value)? selectEquals,
    TResult? Function(SelectDoesNotEqualFilter value)? selectDoesNotEqual,
    TResult? Function(SelectIsEmptyFilter value)? selectIsEmpty,
    TResult? Function(SelectIsNotEmptyFilter value)? selectIsNotEmpty,
    TResult? Function(MultiSelectContainsFilter value)? multiSelectContains,
    TResult? Function(MultiSelectDoesNotContainFilter value)?
        multiSelectDoesNotContain,
    TResult? Function(MultiSelectIsEmptyFilter value)? multiSelectIsEmpty,
    TResult? Function(MultiSelectIsNotEmptyFilter value)? multiSelectIsNotEmpty,
    TResult? Function(DateEqualsFilter value)? dateEquals,
    TResult? Function(DateBeforeFilter value)? dateBefore,
    TResult? Function(DateAfterFilter value)? dateAfter,
    TResult? Function(DateOnOrBeforeFilter value)? dateOnOrBefore,
    TResult? Function(DateOnOrAfterFilter value)? dateOnOrAfter,
    TResult? Function(DateIsEmptyFilter value)? dateIsEmpty,
    TResult? Function(DateIsNotEmptyFilter value)? dateIsNotEmpty,
    TResult? Function(DatePastWeekFilter value)? datePastWeek,
    TResult? Function(DatePastMonthFilter value)? datePastMonth,
    TResult? Function(DatePastYearFilter value)? datePastYear,
    TResult? Function(DateNextWeekFilter value)? dateNextWeek,
    TResult? Function(DateNextMonthFilter value)? dateNextMonth,
    TResult? Function(DateNextYearFilter value)? dateNextYear,
    TResult? Function(PeopleContainsFilter value)? peopleContains,
    TResult? Function(PeopleDoesNotContainFilter value)? peopleDoesNotContain,
    TResult? Function(PeopleIsEmptyFilter value)? peopleIsEmpty,
    TResult? Function(PeopleIsNotEmptyFilter value)? peopleIsNotEmpty,
    TResult? Function(FilesIsEmptyFilter value)? filesIsEmpty,
    TResult? Function(FilesIsNotEmptyFilter value)? filesIsNotEmpty,
    TResult? Function(RelationContainsFilter value)? relationContains,
    TResult? Function(RelationDoesNotContainFilter value)?
        relationDoesNotContain,
    TResult? Function(RelationIsEmptyFilter value)? relationIsEmpty,
    TResult? Function(RelationIsNotEmptyFilter value)? relationIsNotEmpty,
  }) {
    return numberIsNotEmpty?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(TextEqualsFilter value)? textEquals,
    TResult Function(TextDoesNotEqualFilter value)? textDoesNotEqual,
    TResult Function(TextContainsFilter value)? textContains,
    TResult Function(TextDoesNotContainFilter value)? textDoesNotContain,
    TResult Function(TextStartsWithFilter value)? textStartsWith,
    TResult Function(TextEndsWithFilter value)? textEndsWith,
    TResult Function(TextIsEmptyFilter value)? textIsEmpty,
    TResult Function(TextIsNotEmptyFilter value)? textIsNotEmpty,
    TResult Function(NumberEqualsFilter value)? numberEquals,
    TResult Function(NumberDoesNotEqualFilter value)? numberDoesNotEqual,
    TResult Function(NumberGreaterThanFilter value)? numberGreaterThan,
    TResult Function(NumberLessThanFilter value)? numberLessThan,
    TResult Function(NumberGreaterThanOrEqualFilter value)?
        numberGreaterThanOrEqual,
    TResult Function(NumberLessThanOrEqualFilter value)? numberLessThanOrEqual,
    TResult Function(NumberIsEmptyFilter value)? numberIsEmpty,
    TResult Function(NumberIsNotEmptyFilter value)? numberIsNotEmpty,
    TResult Function(CheckboxEqualsFilter value)? checkboxEquals,
    TResult Function(SelectEqualsFilter value)? selectEquals,
    TResult Function(SelectDoesNotEqualFilter value)? selectDoesNotEqual,
    TResult Function(SelectIsEmptyFilter value)? selectIsEmpty,
    TResult Function(SelectIsNotEmptyFilter value)? selectIsNotEmpty,
    TResult Function(MultiSelectContainsFilter value)? multiSelectContains,
    TResult Function(MultiSelectDoesNotContainFilter value)?
        multiSelectDoesNotContain,
    TResult Function(MultiSelectIsEmptyFilter value)? multiSelectIsEmpty,
    TResult Function(MultiSelectIsNotEmptyFilter value)? multiSelectIsNotEmpty,
    TResult Function(DateEqualsFilter value)? dateEquals,
    TResult Function(DateBeforeFilter value)? dateBefore,
    TResult Function(DateAfterFilter value)? dateAfter,
    TResult Function(DateOnOrBeforeFilter value)? dateOnOrBefore,
    TResult Function(DateOnOrAfterFilter value)? dateOnOrAfter,
    TResult Function(DateIsEmptyFilter value)? dateIsEmpty,
    TResult Function(DateIsNotEmptyFilter value)? dateIsNotEmpty,
    TResult Function(DatePastWeekFilter value)? datePastWeek,
    TResult Function(DatePastMonthFilter value)? datePastMonth,
    TResult Function(DatePastYearFilter value)? datePastYear,
    TResult Function(DateNextWeekFilter value)? dateNextWeek,
    TResult Function(DateNextMonthFilter value)? dateNextMonth,
    TResult Function(DateNextYearFilter value)? dateNextYear,
    TResult Function(PeopleContainsFilter value)? peopleContains,
    TResult Function(PeopleDoesNotContainFilter value)? peopleDoesNotContain,
    TResult Function(PeopleIsEmptyFilter value)? peopleIsEmpty,
    TResult Function(PeopleIsNotEmptyFilter value)? peopleIsNotEmpty,
    TResult Function(FilesIsEmptyFilter value)? filesIsEmpty,
    TResult Function(FilesIsNotEmptyFilter value)? filesIsNotEmpty,
    TResult Function(RelationContainsFilter value)? relationContains,
    TResult Function(RelationDoesNotContainFilter value)?
        relationDoesNotContain,
    TResult Function(RelationIsEmptyFilter value)? relationIsEmpty,
    TResult Function(RelationIsNotEmptyFilter value)? relationIsNotEmpty,
    required TResult orElse(),
  }) {
    if (numberIsNotEmpty != null) {
      return numberIsNotEmpty(this);
    }
    return orElse();
  }
}

abstract class NumberIsNotEmptyFilter extends PropertyFilter {
  const factory NumberIsNotEmptyFilter() = _$NumberIsNotEmptyFilterImpl;
  const NumberIsNotEmptyFilter._() : super._();
}

/// @nodoc
abstract class _$$CheckboxEqualsFilterImplCopyWith<$Res> {
  factory _$$CheckboxEqualsFilterImplCopyWith(_$CheckboxEqualsFilterImpl value,
          $Res Function(_$CheckboxEqualsFilterImpl) then) =
      __$$CheckboxEqualsFilterImplCopyWithImpl<$Res>;
  @useResult
  $Res call({bool value});
}

/// @nodoc
class __$$CheckboxEqualsFilterImplCopyWithImpl<$Res>
    extends _$PropertyFilterCopyWithImpl<$Res, _$CheckboxEqualsFilterImpl>
    implements _$$CheckboxEqualsFilterImplCopyWith<$Res> {
  __$$CheckboxEqualsFilterImplCopyWithImpl(_$CheckboxEqualsFilterImpl _value,
      $Res Function(_$CheckboxEqualsFilterImpl) _then)
      : super(_value, _then);

  /// Create a copy of PropertyFilter
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? value = null,
  }) {
    return _then(_$CheckboxEqualsFilterImpl(
      null == value
          ? _value.value
          : value // ignore: cast_nullable_to_non_nullable
              as bool,
    ));
  }
}

/// @nodoc

class _$CheckboxEqualsFilterImpl extends CheckboxEqualsFilter {
  const _$CheckboxEqualsFilterImpl(this.value) : super._();

  @override
  final bool value;

  @override
  String toString() {
    return 'PropertyFilter.checkboxEquals(value: $value)';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$CheckboxEqualsFilterImpl &&
            (identical(other.value, value) || other.value == value));
  }

  @override
  int get hashCode => Object.hash(runtimeType, value);

  /// Create a copy of PropertyFilter
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  @pragma('vm:prefer-inline')
  _$$CheckboxEqualsFilterImplCopyWith<_$CheckboxEqualsFilterImpl>
      get copyWith =>
          __$$CheckboxEqualsFilterImplCopyWithImpl<_$CheckboxEqualsFilterImpl>(
              this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function(String value) textEquals,
    required TResult Function(String value) textDoesNotEqual,
    required TResult Function(String value) textContains,
    required TResult Function(String value) textDoesNotContain,
    required TResult Function(String value) textStartsWith,
    required TResult Function(String value) textEndsWith,
    required TResult Function() textIsEmpty,
    required TResult Function() textIsNotEmpty,
    required TResult Function(double value) numberEquals,
    required TResult Function(double value) numberDoesNotEqual,
    required TResult Function(double value) numberGreaterThan,
    required TResult Function(double value) numberLessThan,
    required TResult Function(double value) numberGreaterThanOrEqual,
    required TResult Function(double value) numberLessThanOrEqual,
    required TResult Function() numberIsEmpty,
    required TResult Function() numberIsNotEmpty,
    required TResult Function(bool value) checkboxEquals,
    required TResult Function(String value) selectEquals,
    required TResult Function(String value) selectDoesNotEqual,
    required TResult Function() selectIsEmpty,
    required TResult Function() selectIsNotEmpty,
    required TResult Function(String value) multiSelectContains,
    required TResult Function(String value) multiSelectDoesNotContain,
    required TResult Function() multiSelectIsEmpty,
    required TResult Function() multiSelectIsNotEmpty,
    required TResult Function(String date) dateEquals,
    required TResult Function(String date) dateBefore,
    required TResult Function(String date) dateAfter,
    required TResult Function(String date) dateOnOrBefore,
    required TResult Function(String date) dateOnOrAfter,
    required TResult Function() dateIsEmpty,
    required TResult Function() dateIsNotEmpty,
    required TResult Function() datePastWeek,
    required TResult Function() datePastMonth,
    required TResult Function() datePastYear,
    required TResult Function() dateNextWeek,
    required TResult Function() dateNextMonth,
    required TResult Function() dateNextYear,
    required TResult Function(String userId) peopleContains,
    required TResult Function(String userId) peopleDoesNotContain,
    required TResult Function() peopleIsEmpty,
    required TResult Function() peopleIsNotEmpty,
    required TResult Function() filesIsEmpty,
    required TResult Function() filesIsNotEmpty,
    required TResult Function(String pageId) relationContains,
    required TResult Function(String pageId) relationDoesNotContain,
    required TResult Function() relationIsEmpty,
    required TResult Function() relationIsNotEmpty,
  }) {
    return checkboxEquals(value);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function(String value)? textEquals,
    TResult? Function(String value)? textDoesNotEqual,
    TResult? Function(String value)? textContains,
    TResult? Function(String value)? textDoesNotContain,
    TResult? Function(String value)? textStartsWith,
    TResult? Function(String value)? textEndsWith,
    TResult? Function()? textIsEmpty,
    TResult? Function()? textIsNotEmpty,
    TResult? Function(double value)? numberEquals,
    TResult? Function(double value)? numberDoesNotEqual,
    TResult? Function(double value)? numberGreaterThan,
    TResult? Function(double value)? numberLessThan,
    TResult? Function(double value)? numberGreaterThanOrEqual,
    TResult? Function(double value)? numberLessThanOrEqual,
    TResult? Function()? numberIsEmpty,
    TResult? Function()? numberIsNotEmpty,
    TResult? Function(bool value)? checkboxEquals,
    TResult? Function(String value)? selectEquals,
    TResult? Function(String value)? selectDoesNotEqual,
    TResult? Function()? selectIsEmpty,
    TResult? Function()? selectIsNotEmpty,
    TResult? Function(String value)? multiSelectContains,
    TResult? Function(String value)? multiSelectDoesNotContain,
    TResult? Function()? multiSelectIsEmpty,
    TResult? Function()? multiSelectIsNotEmpty,
    TResult? Function(String date)? dateEquals,
    TResult? Function(String date)? dateBefore,
    TResult? Function(String date)? dateAfter,
    TResult? Function(String date)? dateOnOrBefore,
    TResult? Function(String date)? dateOnOrAfter,
    TResult? Function()? dateIsEmpty,
    TResult? Function()? dateIsNotEmpty,
    TResult? Function()? datePastWeek,
    TResult? Function()? datePastMonth,
    TResult? Function()? datePastYear,
    TResult? Function()? dateNextWeek,
    TResult? Function()? dateNextMonth,
    TResult? Function()? dateNextYear,
    TResult? Function(String userId)? peopleContains,
    TResult? Function(String userId)? peopleDoesNotContain,
    TResult? Function()? peopleIsEmpty,
    TResult? Function()? peopleIsNotEmpty,
    TResult? Function()? filesIsEmpty,
    TResult? Function()? filesIsNotEmpty,
    TResult? Function(String pageId)? relationContains,
    TResult? Function(String pageId)? relationDoesNotContain,
    TResult? Function()? relationIsEmpty,
    TResult? Function()? relationIsNotEmpty,
  }) {
    return checkboxEquals?.call(value);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function(String value)? textEquals,
    TResult Function(String value)? textDoesNotEqual,
    TResult Function(String value)? textContains,
    TResult Function(String value)? textDoesNotContain,
    TResult Function(String value)? textStartsWith,
    TResult Function(String value)? textEndsWith,
    TResult Function()? textIsEmpty,
    TResult Function()? textIsNotEmpty,
    TResult Function(double value)? numberEquals,
    TResult Function(double value)? numberDoesNotEqual,
    TResult Function(double value)? numberGreaterThan,
    TResult Function(double value)? numberLessThan,
    TResult Function(double value)? numberGreaterThanOrEqual,
    TResult Function(double value)? numberLessThanOrEqual,
    TResult Function()? numberIsEmpty,
    TResult Function()? numberIsNotEmpty,
    TResult Function(bool value)? checkboxEquals,
    TResult Function(String value)? selectEquals,
    TResult Function(String value)? selectDoesNotEqual,
    TResult Function()? selectIsEmpty,
    TResult Function()? selectIsNotEmpty,
    TResult Function(String value)? multiSelectContains,
    TResult Function(String value)? multiSelectDoesNotContain,
    TResult Function()? multiSelectIsEmpty,
    TResult Function()? multiSelectIsNotEmpty,
    TResult Function(String date)? dateEquals,
    TResult Function(String date)? dateBefore,
    TResult Function(String date)? dateAfter,
    TResult Function(String date)? dateOnOrBefore,
    TResult Function(String date)? dateOnOrAfter,
    TResult Function()? dateIsEmpty,
    TResult Function()? dateIsNotEmpty,
    TResult Function()? datePastWeek,
    TResult Function()? datePastMonth,
    TResult Function()? datePastYear,
    TResult Function()? dateNextWeek,
    TResult Function()? dateNextMonth,
    TResult Function()? dateNextYear,
    TResult Function(String userId)? peopleContains,
    TResult Function(String userId)? peopleDoesNotContain,
    TResult Function()? peopleIsEmpty,
    TResult Function()? peopleIsNotEmpty,
    TResult Function()? filesIsEmpty,
    TResult Function()? filesIsNotEmpty,
    TResult Function(String pageId)? relationContains,
    TResult Function(String pageId)? relationDoesNotContain,
    TResult Function()? relationIsEmpty,
    TResult Function()? relationIsNotEmpty,
    required TResult orElse(),
  }) {
    if (checkboxEquals != null) {
      return checkboxEquals(value);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(TextEqualsFilter value) textEquals,
    required TResult Function(TextDoesNotEqualFilter value) textDoesNotEqual,
    required TResult Function(TextContainsFilter value) textContains,
    required TResult Function(TextDoesNotContainFilter value)
        textDoesNotContain,
    required TResult Function(TextStartsWithFilter value) textStartsWith,
    required TResult Function(TextEndsWithFilter value) textEndsWith,
    required TResult Function(TextIsEmptyFilter value) textIsEmpty,
    required TResult Function(TextIsNotEmptyFilter value) textIsNotEmpty,
    required TResult Function(NumberEqualsFilter value) numberEquals,
    required TResult Function(NumberDoesNotEqualFilter value)
        numberDoesNotEqual,
    required TResult Function(NumberGreaterThanFilter value) numberGreaterThan,
    required TResult Function(NumberLessThanFilter value) numberLessThan,
    required TResult Function(NumberGreaterThanOrEqualFilter value)
        numberGreaterThanOrEqual,
    required TResult Function(NumberLessThanOrEqualFilter value)
        numberLessThanOrEqual,
    required TResult Function(NumberIsEmptyFilter value) numberIsEmpty,
    required TResult Function(NumberIsNotEmptyFilter value) numberIsNotEmpty,
    required TResult Function(CheckboxEqualsFilter value) checkboxEquals,
    required TResult Function(SelectEqualsFilter value) selectEquals,
    required TResult Function(SelectDoesNotEqualFilter value)
        selectDoesNotEqual,
    required TResult Function(SelectIsEmptyFilter value) selectIsEmpty,
    required TResult Function(SelectIsNotEmptyFilter value) selectIsNotEmpty,
    required TResult Function(MultiSelectContainsFilter value)
        multiSelectContains,
    required TResult Function(MultiSelectDoesNotContainFilter value)
        multiSelectDoesNotContain,
    required TResult Function(MultiSelectIsEmptyFilter value)
        multiSelectIsEmpty,
    required TResult Function(MultiSelectIsNotEmptyFilter value)
        multiSelectIsNotEmpty,
    required TResult Function(DateEqualsFilter value) dateEquals,
    required TResult Function(DateBeforeFilter value) dateBefore,
    required TResult Function(DateAfterFilter value) dateAfter,
    required TResult Function(DateOnOrBeforeFilter value) dateOnOrBefore,
    required TResult Function(DateOnOrAfterFilter value) dateOnOrAfter,
    required TResult Function(DateIsEmptyFilter value) dateIsEmpty,
    required TResult Function(DateIsNotEmptyFilter value) dateIsNotEmpty,
    required TResult Function(DatePastWeekFilter value) datePastWeek,
    required TResult Function(DatePastMonthFilter value) datePastMonth,
    required TResult Function(DatePastYearFilter value) datePastYear,
    required TResult Function(DateNextWeekFilter value) dateNextWeek,
    required TResult Function(DateNextMonthFilter value) dateNextMonth,
    required TResult Function(DateNextYearFilter value) dateNextYear,
    required TResult Function(PeopleContainsFilter value) peopleContains,
    required TResult Function(PeopleDoesNotContainFilter value)
        peopleDoesNotContain,
    required TResult Function(PeopleIsEmptyFilter value) peopleIsEmpty,
    required TResult Function(PeopleIsNotEmptyFilter value) peopleIsNotEmpty,
    required TResult Function(FilesIsEmptyFilter value) filesIsEmpty,
    required TResult Function(FilesIsNotEmptyFilter value) filesIsNotEmpty,
    required TResult Function(RelationContainsFilter value) relationContains,
    required TResult Function(RelationDoesNotContainFilter value)
        relationDoesNotContain,
    required TResult Function(RelationIsEmptyFilter value) relationIsEmpty,
    required TResult Function(RelationIsNotEmptyFilter value)
        relationIsNotEmpty,
  }) {
    return checkboxEquals(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(TextEqualsFilter value)? textEquals,
    TResult? Function(TextDoesNotEqualFilter value)? textDoesNotEqual,
    TResult? Function(TextContainsFilter value)? textContains,
    TResult? Function(TextDoesNotContainFilter value)? textDoesNotContain,
    TResult? Function(TextStartsWithFilter value)? textStartsWith,
    TResult? Function(TextEndsWithFilter value)? textEndsWith,
    TResult? Function(TextIsEmptyFilter value)? textIsEmpty,
    TResult? Function(TextIsNotEmptyFilter value)? textIsNotEmpty,
    TResult? Function(NumberEqualsFilter value)? numberEquals,
    TResult? Function(NumberDoesNotEqualFilter value)? numberDoesNotEqual,
    TResult? Function(NumberGreaterThanFilter value)? numberGreaterThan,
    TResult? Function(NumberLessThanFilter value)? numberLessThan,
    TResult? Function(NumberGreaterThanOrEqualFilter value)?
        numberGreaterThanOrEqual,
    TResult? Function(NumberLessThanOrEqualFilter value)? numberLessThanOrEqual,
    TResult? Function(NumberIsEmptyFilter value)? numberIsEmpty,
    TResult? Function(NumberIsNotEmptyFilter value)? numberIsNotEmpty,
    TResult? Function(CheckboxEqualsFilter value)? checkboxEquals,
    TResult? Function(SelectEqualsFilter value)? selectEquals,
    TResult? Function(SelectDoesNotEqualFilter value)? selectDoesNotEqual,
    TResult? Function(SelectIsEmptyFilter value)? selectIsEmpty,
    TResult? Function(SelectIsNotEmptyFilter value)? selectIsNotEmpty,
    TResult? Function(MultiSelectContainsFilter value)? multiSelectContains,
    TResult? Function(MultiSelectDoesNotContainFilter value)?
        multiSelectDoesNotContain,
    TResult? Function(MultiSelectIsEmptyFilter value)? multiSelectIsEmpty,
    TResult? Function(MultiSelectIsNotEmptyFilter value)? multiSelectIsNotEmpty,
    TResult? Function(DateEqualsFilter value)? dateEquals,
    TResult? Function(DateBeforeFilter value)? dateBefore,
    TResult? Function(DateAfterFilter value)? dateAfter,
    TResult? Function(DateOnOrBeforeFilter value)? dateOnOrBefore,
    TResult? Function(DateOnOrAfterFilter value)? dateOnOrAfter,
    TResult? Function(DateIsEmptyFilter value)? dateIsEmpty,
    TResult? Function(DateIsNotEmptyFilter value)? dateIsNotEmpty,
    TResult? Function(DatePastWeekFilter value)? datePastWeek,
    TResult? Function(DatePastMonthFilter value)? datePastMonth,
    TResult? Function(DatePastYearFilter value)? datePastYear,
    TResult? Function(DateNextWeekFilter value)? dateNextWeek,
    TResult? Function(DateNextMonthFilter value)? dateNextMonth,
    TResult? Function(DateNextYearFilter value)? dateNextYear,
    TResult? Function(PeopleContainsFilter value)? peopleContains,
    TResult? Function(PeopleDoesNotContainFilter value)? peopleDoesNotContain,
    TResult? Function(PeopleIsEmptyFilter value)? peopleIsEmpty,
    TResult? Function(PeopleIsNotEmptyFilter value)? peopleIsNotEmpty,
    TResult? Function(FilesIsEmptyFilter value)? filesIsEmpty,
    TResult? Function(FilesIsNotEmptyFilter value)? filesIsNotEmpty,
    TResult? Function(RelationContainsFilter value)? relationContains,
    TResult? Function(RelationDoesNotContainFilter value)?
        relationDoesNotContain,
    TResult? Function(RelationIsEmptyFilter value)? relationIsEmpty,
    TResult? Function(RelationIsNotEmptyFilter value)? relationIsNotEmpty,
  }) {
    return checkboxEquals?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(TextEqualsFilter value)? textEquals,
    TResult Function(TextDoesNotEqualFilter value)? textDoesNotEqual,
    TResult Function(TextContainsFilter value)? textContains,
    TResult Function(TextDoesNotContainFilter value)? textDoesNotContain,
    TResult Function(TextStartsWithFilter value)? textStartsWith,
    TResult Function(TextEndsWithFilter value)? textEndsWith,
    TResult Function(TextIsEmptyFilter value)? textIsEmpty,
    TResult Function(TextIsNotEmptyFilter value)? textIsNotEmpty,
    TResult Function(NumberEqualsFilter value)? numberEquals,
    TResult Function(NumberDoesNotEqualFilter value)? numberDoesNotEqual,
    TResult Function(NumberGreaterThanFilter value)? numberGreaterThan,
    TResult Function(NumberLessThanFilter value)? numberLessThan,
    TResult Function(NumberGreaterThanOrEqualFilter value)?
        numberGreaterThanOrEqual,
    TResult Function(NumberLessThanOrEqualFilter value)? numberLessThanOrEqual,
    TResult Function(NumberIsEmptyFilter value)? numberIsEmpty,
    TResult Function(NumberIsNotEmptyFilter value)? numberIsNotEmpty,
    TResult Function(CheckboxEqualsFilter value)? checkboxEquals,
    TResult Function(SelectEqualsFilter value)? selectEquals,
    TResult Function(SelectDoesNotEqualFilter value)? selectDoesNotEqual,
    TResult Function(SelectIsEmptyFilter value)? selectIsEmpty,
    TResult Function(SelectIsNotEmptyFilter value)? selectIsNotEmpty,
    TResult Function(MultiSelectContainsFilter value)? multiSelectContains,
    TResult Function(MultiSelectDoesNotContainFilter value)?
        multiSelectDoesNotContain,
    TResult Function(MultiSelectIsEmptyFilter value)? multiSelectIsEmpty,
    TResult Function(MultiSelectIsNotEmptyFilter value)? multiSelectIsNotEmpty,
    TResult Function(DateEqualsFilter value)? dateEquals,
    TResult Function(DateBeforeFilter value)? dateBefore,
    TResult Function(DateAfterFilter value)? dateAfter,
    TResult Function(DateOnOrBeforeFilter value)? dateOnOrBefore,
    TResult Function(DateOnOrAfterFilter value)? dateOnOrAfter,
    TResult Function(DateIsEmptyFilter value)? dateIsEmpty,
    TResult Function(DateIsNotEmptyFilter value)? dateIsNotEmpty,
    TResult Function(DatePastWeekFilter value)? datePastWeek,
    TResult Function(DatePastMonthFilter value)? datePastMonth,
    TResult Function(DatePastYearFilter value)? datePastYear,
    TResult Function(DateNextWeekFilter value)? dateNextWeek,
    TResult Function(DateNextMonthFilter value)? dateNextMonth,
    TResult Function(DateNextYearFilter value)? dateNextYear,
    TResult Function(PeopleContainsFilter value)? peopleContains,
    TResult Function(PeopleDoesNotContainFilter value)? peopleDoesNotContain,
    TResult Function(PeopleIsEmptyFilter value)? peopleIsEmpty,
    TResult Function(PeopleIsNotEmptyFilter value)? peopleIsNotEmpty,
    TResult Function(FilesIsEmptyFilter value)? filesIsEmpty,
    TResult Function(FilesIsNotEmptyFilter value)? filesIsNotEmpty,
    TResult Function(RelationContainsFilter value)? relationContains,
    TResult Function(RelationDoesNotContainFilter value)?
        relationDoesNotContain,
    TResult Function(RelationIsEmptyFilter value)? relationIsEmpty,
    TResult Function(RelationIsNotEmptyFilter value)? relationIsNotEmpty,
    required TResult orElse(),
  }) {
    if (checkboxEquals != null) {
      return checkboxEquals(this);
    }
    return orElse();
  }
}

abstract class CheckboxEqualsFilter extends PropertyFilter {
  const factory CheckboxEqualsFilter(final bool value) =
      _$CheckboxEqualsFilterImpl;
  const CheckboxEqualsFilter._() : super._();

  bool get value;

  /// Create a copy of PropertyFilter
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  _$$CheckboxEqualsFilterImplCopyWith<_$CheckboxEqualsFilterImpl>
      get copyWith => throw _privateConstructorUsedError;
}

/// @nodoc
abstract class _$$SelectEqualsFilterImplCopyWith<$Res> {
  factory _$$SelectEqualsFilterImplCopyWith(_$SelectEqualsFilterImpl value,
          $Res Function(_$SelectEqualsFilterImpl) then) =
      __$$SelectEqualsFilterImplCopyWithImpl<$Res>;
  @useResult
  $Res call({String value});
}

/// @nodoc
class __$$SelectEqualsFilterImplCopyWithImpl<$Res>
    extends _$PropertyFilterCopyWithImpl<$Res, _$SelectEqualsFilterImpl>
    implements _$$SelectEqualsFilterImplCopyWith<$Res> {
  __$$SelectEqualsFilterImplCopyWithImpl(_$SelectEqualsFilterImpl _value,
      $Res Function(_$SelectEqualsFilterImpl) _then)
      : super(_value, _then);

  /// Create a copy of PropertyFilter
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? value = null,
  }) {
    return _then(_$SelectEqualsFilterImpl(
      null == value
          ? _value.value
          : value // ignore: cast_nullable_to_non_nullable
              as String,
    ));
  }
}

/// @nodoc

class _$SelectEqualsFilterImpl extends SelectEqualsFilter {
  const _$SelectEqualsFilterImpl(this.value) : super._();

  @override
  final String value;

  @override
  String toString() {
    return 'PropertyFilter.selectEquals(value: $value)';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$SelectEqualsFilterImpl &&
            (identical(other.value, value) || other.value == value));
  }

  @override
  int get hashCode => Object.hash(runtimeType, value);

  /// Create a copy of PropertyFilter
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  @pragma('vm:prefer-inline')
  _$$SelectEqualsFilterImplCopyWith<_$SelectEqualsFilterImpl> get copyWith =>
      __$$SelectEqualsFilterImplCopyWithImpl<_$SelectEqualsFilterImpl>(
          this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function(String value) textEquals,
    required TResult Function(String value) textDoesNotEqual,
    required TResult Function(String value) textContains,
    required TResult Function(String value) textDoesNotContain,
    required TResult Function(String value) textStartsWith,
    required TResult Function(String value) textEndsWith,
    required TResult Function() textIsEmpty,
    required TResult Function() textIsNotEmpty,
    required TResult Function(double value) numberEquals,
    required TResult Function(double value) numberDoesNotEqual,
    required TResult Function(double value) numberGreaterThan,
    required TResult Function(double value) numberLessThan,
    required TResult Function(double value) numberGreaterThanOrEqual,
    required TResult Function(double value) numberLessThanOrEqual,
    required TResult Function() numberIsEmpty,
    required TResult Function() numberIsNotEmpty,
    required TResult Function(bool value) checkboxEquals,
    required TResult Function(String value) selectEquals,
    required TResult Function(String value) selectDoesNotEqual,
    required TResult Function() selectIsEmpty,
    required TResult Function() selectIsNotEmpty,
    required TResult Function(String value) multiSelectContains,
    required TResult Function(String value) multiSelectDoesNotContain,
    required TResult Function() multiSelectIsEmpty,
    required TResult Function() multiSelectIsNotEmpty,
    required TResult Function(String date) dateEquals,
    required TResult Function(String date) dateBefore,
    required TResult Function(String date) dateAfter,
    required TResult Function(String date) dateOnOrBefore,
    required TResult Function(String date) dateOnOrAfter,
    required TResult Function() dateIsEmpty,
    required TResult Function() dateIsNotEmpty,
    required TResult Function() datePastWeek,
    required TResult Function() datePastMonth,
    required TResult Function() datePastYear,
    required TResult Function() dateNextWeek,
    required TResult Function() dateNextMonth,
    required TResult Function() dateNextYear,
    required TResult Function(String userId) peopleContains,
    required TResult Function(String userId) peopleDoesNotContain,
    required TResult Function() peopleIsEmpty,
    required TResult Function() peopleIsNotEmpty,
    required TResult Function() filesIsEmpty,
    required TResult Function() filesIsNotEmpty,
    required TResult Function(String pageId) relationContains,
    required TResult Function(String pageId) relationDoesNotContain,
    required TResult Function() relationIsEmpty,
    required TResult Function() relationIsNotEmpty,
  }) {
    return selectEquals(value);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function(String value)? textEquals,
    TResult? Function(String value)? textDoesNotEqual,
    TResult? Function(String value)? textContains,
    TResult? Function(String value)? textDoesNotContain,
    TResult? Function(String value)? textStartsWith,
    TResult? Function(String value)? textEndsWith,
    TResult? Function()? textIsEmpty,
    TResult? Function()? textIsNotEmpty,
    TResult? Function(double value)? numberEquals,
    TResult? Function(double value)? numberDoesNotEqual,
    TResult? Function(double value)? numberGreaterThan,
    TResult? Function(double value)? numberLessThan,
    TResult? Function(double value)? numberGreaterThanOrEqual,
    TResult? Function(double value)? numberLessThanOrEqual,
    TResult? Function()? numberIsEmpty,
    TResult? Function()? numberIsNotEmpty,
    TResult? Function(bool value)? checkboxEquals,
    TResult? Function(String value)? selectEquals,
    TResult? Function(String value)? selectDoesNotEqual,
    TResult? Function()? selectIsEmpty,
    TResult? Function()? selectIsNotEmpty,
    TResult? Function(String value)? multiSelectContains,
    TResult? Function(String value)? multiSelectDoesNotContain,
    TResult? Function()? multiSelectIsEmpty,
    TResult? Function()? multiSelectIsNotEmpty,
    TResult? Function(String date)? dateEquals,
    TResult? Function(String date)? dateBefore,
    TResult? Function(String date)? dateAfter,
    TResult? Function(String date)? dateOnOrBefore,
    TResult? Function(String date)? dateOnOrAfter,
    TResult? Function()? dateIsEmpty,
    TResult? Function()? dateIsNotEmpty,
    TResult? Function()? datePastWeek,
    TResult? Function()? datePastMonth,
    TResult? Function()? datePastYear,
    TResult? Function()? dateNextWeek,
    TResult? Function()? dateNextMonth,
    TResult? Function()? dateNextYear,
    TResult? Function(String userId)? peopleContains,
    TResult? Function(String userId)? peopleDoesNotContain,
    TResult? Function()? peopleIsEmpty,
    TResult? Function()? peopleIsNotEmpty,
    TResult? Function()? filesIsEmpty,
    TResult? Function()? filesIsNotEmpty,
    TResult? Function(String pageId)? relationContains,
    TResult? Function(String pageId)? relationDoesNotContain,
    TResult? Function()? relationIsEmpty,
    TResult? Function()? relationIsNotEmpty,
  }) {
    return selectEquals?.call(value);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function(String value)? textEquals,
    TResult Function(String value)? textDoesNotEqual,
    TResult Function(String value)? textContains,
    TResult Function(String value)? textDoesNotContain,
    TResult Function(String value)? textStartsWith,
    TResult Function(String value)? textEndsWith,
    TResult Function()? textIsEmpty,
    TResult Function()? textIsNotEmpty,
    TResult Function(double value)? numberEquals,
    TResult Function(double value)? numberDoesNotEqual,
    TResult Function(double value)? numberGreaterThan,
    TResult Function(double value)? numberLessThan,
    TResult Function(double value)? numberGreaterThanOrEqual,
    TResult Function(double value)? numberLessThanOrEqual,
    TResult Function()? numberIsEmpty,
    TResult Function()? numberIsNotEmpty,
    TResult Function(bool value)? checkboxEquals,
    TResult Function(String value)? selectEquals,
    TResult Function(String value)? selectDoesNotEqual,
    TResult Function()? selectIsEmpty,
    TResult Function()? selectIsNotEmpty,
    TResult Function(String value)? multiSelectContains,
    TResult Function(String value)? multiSelectDoesNotContain,
    TResult Function()? multiSelectIsEmpty,
    TResult Function()? multiSelectIsNotEmpty,
    TResult Function(String date)? dateEquals,
    TResult Function(String date)? dateBefore,
    TResult Function(String date)? dateAfter,
    TResult Function(String date)? dateOnOrBefore,
    TResult Function(String date)? dateOnOrAfter,
    TResult Function()? dateIsEmpty,
    TResult Function()? dateIsNotEmpty,
    TResult Function()? datePastWeek,
    TResult Function()? datePastMonth,
    TResult Function()? datePastYear,
    TResult Function()? dateNextWeek,
    TResult Function()? dateNextMonth,
    TResult Function()? dateNextYear,
    TResult Function(String userId)? peopleContains,
    TResult Function(String userId)? peopleDoesNotContain,
    TResult Function()? peopleIsEmpty,
    TResult Function()? peopleIsNotEmpty,
    TResult Function()? filesIsEmpty,
    TResult Function()? filesIsNotEmpty,
    TResult Function(String pageId)? relationContains,
    TResult Function(String pageId)? relationDoesNotContain,
    TResult Function()? relationIsEmpty,
    TResult Function()? relationIsNotEmpty,
    required TResult orElse(),
  }) {
    if (selectEquals != null) {
      return selectEquals(value);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(TextEqualsFilter value) textEquals,
    required TResult Function(TextDoesNotEqualFilter value) textDoesNotEqual,
    required TResult Function(TextContainsFilter value) textContains,
    required TResult Function(TextDoesNotContainFilter value)
        textDoesNotContain,
    required TResult Function(TextStartsWithFilter value) textStartsWith,
    required TResult Function(TextEndsWithFilter value) textEndsWith,
    required TResult Function(TextIsEmptyFilter value) textIsEmpty,
    required TResult Function(TextIsNotEmptyFilter value) textIsNotEmpty,
    required TResult Function(NumberEqualsFilter value) numberEquals,
    required TResult Function(NumberDoesNotEqualFilter value)
        numberDoesNotEqual,
    required TResult Function(NumberGreaterThanFilter value) numberGreaterThan,
    required TResult Function(NumberLessThanFilter value) numberLessThan,
    required TResult Function(NumberGreaterThanOrEqualFilter value)
        numberGreaterThanOrEqual,
    required TResult Function(NumberLessThanOrEqualFilter value)
        numberLessThanOrEqual,
    required TResult Function(NumberIsEmptyFilter value) numberIsEmpty,
    required TResult Function(NumberIsNotEmptyFilter value) numberIsNotEmpty,
    required TResult Function(CheckboxEqualsFilter value) checkboxEquals,
    required TResult Function(SelectEqualsFilter value) selectEquals,
    required TResult Function(SelectDoesNotEqualFilter value)
        selectDoesNotEqual,
    required TResult Function(SelectIsEmptyFilter value) selectIsEmpty,
    required TResult Function(SelectIsNotEmptyFilter value) selectIsNotEmpty,
    required TResult Function(MultiSelectContainsFilter value)
        multiSelectContains,
    required TResult Function(MultiSelectDoesNotContainFilter value)
        multiSelectDoesNotContain,
    required TResult Function(MultiSelectIsEmptyFilter value)
        multiSelectIsEmpty,
    required TResult Function(MultiSelectIsNotEmptyFilter value)
        multiSelectIsNotEmpty,
    required TResult Function(DateEqualsFilter value) dateEquals,
    required TResult Function(DateBeforeFilter value) dateBefore,
    required TResult Function(DateAfterFilter value) dateAfter,
    required TResult Function(DateOnOrBeforeFilter value) dateOnOrBefore,
    required TResult Function(DateOnOrAfterFilter value) dateOnOrAfter,
    required TResult Function(DateIsEmptyFilter value) dateIsEmpty,
    required TResult Function(DateIsNotEmptyFilter value) dateIsNotEmpty,
    required TResult Function(DatePastWeekFilter value) datePastWeek,
    required TResult Function(DatePastMonthFilter value) datePastMonth,
    required TResult Function(DatePastYearFilter value) datePastYear,
    required TResult Function(DateNextWeekFilter value) dateNextWeek,
    required TResult Function(DateNextMonthFilter value) dateNextMonth,
    required TResult Function(DateNextYearFilter value) dateNextYear,
    required TResult Function(PeopleContainsFilter value) peopleContains,
    required TResult Function(PeopleDoesNotContainFilter value)
        peopleDoesNotContain,
    required TResult Function(PeopleIsEmptyFilter value) peopleIsEmpty,
    required TResult Function(PeopleIsNotEmptyFilter value) peopleIsNotEmpty,
    required TResult Function(FilesIsEmptyFilter value) filesIsEmpty,
    required TResult Function(FilesIsNotEmptyFilter value) filesIsNotEmpty,
    required TResult Function(RelationContainsFilter value) relationContains,
    required TResult Function(RelationDoesNotContainFilter value)
        relationDoesNotContain,
    required TResult Function(RelationIsEmptyFilter value) relationIsEmpty,
    required TResult Function(RelationIsNotEmptyFilter value)
        relationIsNotEmpty,
  }) {
    return selectEquals(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(TextEqualsFilter value)? textEquals,
    TResult? Function(TextDoesNotEqualFilter value)? textDoesNotEqual,
    TResult? Function(TextContainsFilter value)? textContains,
    TResult? Function(TextDoesNotContainFilter value)? textDoesNotContain,
    TResult? Function(TextStartsWithFilter value)? textStartsWith,
    TResult? Function(TextEndsWithFilter value)? textEndsWith,
    TResult? Function(TextIsEmptyFilter value)? textIsEmpty,
    TResult? Function(TextIsNotEmptyFilter value)? textIsNotEmpty,
    TResult? Function(NumberEqualsFilter value)? numberEquals,
    TResult? Function(NumberDoesNotEqualFilter value)? numberDoesNotEqual,
    TResult? Function(NumberGreaterThanFilter value)? numberGreaterThan,
    TResult? Function(NumberLessThanFilter value)? numberLessThan,
    TResult? Function(NumberGreaterThanOrEqualFilter value)?
        numberGreaterThanOrEqual,
    TResult? Function(NumberLessThanOrEqualFilter value)? numberLessThanOrEqual,
    TResult? Function(NumberIsEmptyFilter value)? numberIsEmpty,
    TResult? Function(NumberIsNotEmptyFilter value)? numberIsNotEmpty,
    TResult? Function(CheckboxEqualsFilter value)? checkboxEquals,
    TResult? Function(SelectEqualsFilter value)? selectEquals,
    TResult? Function(SelectDoesNotEqualFilter value)? selectDoesNotEqual,
    TResult? Function(SelectIsEmptyFilter value)? selectIsEmpty,
    TResult? Function(SelectIsNotEmptyFilter value)? selectIsNotEmpty,
    TResult? Function(MultiSelectContainsFilter value)? multiSelectContains,
    TResult? Function(MultiSelectDoesNotContainFilter value)?
        multiSelectDoesNotContain,
    TResult? Function(MultiSelectIsEmptyFilter value)? multiSelectIsEmpty,
    TResult? Function(MultiSelectIsNotEmptyFilter value)? multiSelectIsNotEmpty,
    TResult? Function(DateEqualsFilter value)? dateEquals,
    TResult? Function(DateBeforeFilter value)? dateBefore,
    TResult? Function(DateAfterFilter value)? dateAfter,
    TResult? Function(DateOnOrBeforeFilter value)? dateOnOrBefore,
    TResult? Function(DateOnOrAfterFilter value)? dateOnOrAfter,
    TResult? Function(DateIsEmptyFilter value)? dateIsEmpty,
    TResult? Function(DateIsNotEmptyFilter value)? dateIsNotEmpty,
    TResult? Function(DatePastWeekFilter value)? datePastWeek,
    TResult? Function(DatePastMonthFilter value)? datePastMonth,
    TResult? Function(DatePastYearFilter value)? datePastYear,
    TResult? Function(DateNextWeekFilter value)? dateNextWeek,
    TResult? Function(DateNextMonthFilter value)? dateNextMonth,
    TResult? Function(DateNextYearFilter value)? dateNextYear,
    TResult? Function(PeopleContainsFilter value)? peopleContains,
    TResult? Function(PeopleDoesNotContainFilter value)? peopleDoesNotContain,
    TResult? Function(PeopleIsEmptyFilter value)? peopleIsEmpty,
    TResult? Function(PeopleIsNotEmptyFilter value)? peopleIsNotEmpty,
    TResult? Function(FilesIsEmptyFilter value)? filesIsEmpty,
    TResult? Function(FilesIsNotEmptyFilter value)? filesIsNotEmpty,
    TResult? Function(RelationContainsFilter value)? relationContains,
    TResult? Function(RelationDoesNotContainFilter value)?
        relationDoesNotContain,
    TResult? Function(RelationIsEmptyFilter value)? relationIsEmpty,
    TResult? Function(RelationIsNotEmptyFilter value)? relationIsNotEmpty,
  }) {
    return selectEquals?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(TextEqualsFilter value)? textEquals,
    TResult Function(TextDoesNotEqualFilter value)? textDoesNotEqual,
    TResult Function(TextContainsFilter value)? textContains,
    TResult Function(TextDoesNotContainFilter value)? textDoesNotContain,
    TResult Function(TextStartsWithFilter value)? textStartsWith,
    TResult Function(TextEndsWithFilter value)? textEndsWith,
    TResult Function(TextIsEmptyFilter value)? textIsEmpty,
    TResult Function(TextIsNotEmptyFilter value)? textIsNotEmpty,
    TResult Function(NumberEqualsFilter value)? numberEquals,
    TResult Function(NumberDoesNotEqualFilter value)? numberDoesNotEqual,
    TResult Function(NumberGreaterThanFilter value)? numberGreaterThan,
    TResult Function(NumberLessThanFilter value)? numberLessThan,
    TResult Function(NumberGreaterThanOrEqualFilter value)?
        numberGreaterThanOrEqual,
    TResult Function(NumberLessThanOrEqualFilter value)? numberLessThanOrEqual,
    TResult Function(NumberIsEmptyFilter value)? numberIsEmpty,
    TResult Function(NumberIsNotEmptyFilter value)? numberIsNotEmpty,
    TResult Function(CheckboxEqualsFilter value)? checkboxEquals,
    TResult Function(SelectEqualsFilter value)? selectEquals,
    TResult Function(SelectDoesNotEqualFilter value)? selectDoesNotEqual,
    TResult Function(SelectIsEmptyFilter value)? selectIsEmpty,
    TResult Function(SelectIsNotEmptyFilter value)? selectIsNotEmpty,
    TResult Function(MultiSelectContainsFilter value)? multiSelectContains,
    TResult Function(MultiSelectDoesNotContainFilter value)?
        multiSelectDoesNotContain,
    TResult Function(MultiSelectIsEmptyFilter value)? multiSelectIsEmpty,
    TResult Function(MultiSelectIsNotEmptyFilter value)? multiSelectIsNotEmpty,
    TResult Function(DateEqualsFilter value)? dateEquals,
    TResult Function(DateBeforeFilter value)? dateBefore,
    TResult Function(DateAfterFilter value)? dateAfter,
    TResult Function(DateOnOrBeforeFilter value)? dateOnOrBefore,
    TResult Function(DateOnOrAfterFilter value)? dateOnOrAfter,
    TResult Function(DateIsEmptyFilter value)? dateIsEmpty,
    TResult Function(DateIsNotEmptyFilter value)? dateIsNotEmpty,
    TResult Function(DatePastWeekFilter value)? datePastWeek,
    TResult Function(DatePastMonthFilter value)? datePastMonth,
    TResult Function(DatePastYearFilter value)? datePastYear,
    TResult Function(DateNextWeekFilter value)? dateNextWeek,
    TResult Function(DateNextMonthFilter value)? dateNextMonth,
    TResult Function(DateNextYearFilter value)? dateNextYear,
    TResult Function(PeopleContainsFilter value)? peopleContains,
    TResult Function(PeopleDoesNotContainFilter value)? peopleDoesNotContain,
    TResult Function(PeopleIsEmptyFilter value)? peopleIsEmpty,
    TResult Function(PeopleIsNotEmptyFilter value)? peopleIsNotEmpty,
    TResult Function(FilesIsEmptyFilter value)? filesIsEmpty,
    TResult Function(FilesIsNotEmptyFilter value)? filesIsNotEmpty,
    TResult Function(RelationContainsFilter value)? relationContains,
    TResult Function(RelationDoesNotContainFilter value)?
        relationDoesNotContain,
    TResult Function(RelationIsEmptyFilter value)? relationIsEmpty,
    TResult Function(RelationIsNotEmptyFilter value)? relationIsNotEmpty,
    required TResult orElse(),
  }) {
    if (selectEquals != null) {
      return selectEquals(this);
    }
    return orElse();
  }
}

abstract class SelectEqualsFilter extends PropertyFilter {
  const factory SelectEqualsFilter(final String value) =
      _$SelectEqualsFilterImpl;
  const SelectEqualsFilter._() : super._();

  String get value;

  /// Create a copy of PropertyFilter
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  _$$SelectEqualsFilterImplCopyWith<_$SelectEqualsFilterImpl> get copyWith =>
      throw _privateConstructorUsedError;
}

/// @nodoc
abstract class _$$SelectDoesNotEqualFilterImplCopyWith<$Res> {
  factory _$$SelectDoesNotEqualFilterImplCopyWith(
          _$SelectDoesNotEqualFilterImpl value,
          $Res Function(_$SelectDoesNotEqualFilterImpl) then) =
      __$$SelectDoesNotEqualFilterImplCopyWithImpl<$Res>;
  @useResult
  $Res call({String value});
}

/// @nodoc
class __$$SelectDoesNotEqualFilterImplCopyWithImpl<$Res>
    extends _$PropertyFilterCopyWithImpl<$Res, _$SelectDoesNotEqualFilterImpl>
    implements _$$SelectDoesNotEqualFilterImplCopyWith<$Res> {
  __$$SelectDoesNotEqualFilterImplCopyWithImpl(
      _$SelectDoesNotEqualFilterImpl _value,
      $Res Function(_$SelectDoesNotEqualFilterImpl) _then)
      : super(_value, _then);

  /// Create a copy of PropertyFilter
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? value = null,
  }) {
    return _then(_$SelectDoesNotEqualFilterImpl(
      null == value
          ? _value.value
          : value // ignore: cast_nullable_to_non_nullable
              as String,
    ));
  }
}

/// @nodoc

class _$SelectDoesNotEqualFilterImpl extends SelectDoesNotEqualFilter {
  const _$SelectDoesNotEqualFilterImpl(this.value) : super._();

  @override
  final String value;

  @override
  String toString() {
    return 'PropertyFilter.selectDoesNotEqual(value: $value)';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$SelectDoesNotEqualFilterImpl &&
            (identical(other.value, value) || other.value == value));
  }

  @override
  int get hashCode => Object.hash(runtimeType, value);

  /// Create a copy of PropertyFilter
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  @pragma('vm:prefer-inline')
  _$$SelectDoesNotEqualFilterImplCopyWith<_$SelectDoesNotEqualFilterImpl>
      get copyWith => __$$SelectDoesNotEqualFilterImplCopyWithImpl<
          _$SelectDoesNotEqualFilterImpl>(this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function(String value) textEquals,
    required TResult Function(String value) textDoesNotEqual,
    required TResult Function(String value) textContains,
    required TResult Function(String value) textDoesNotContain,
    required TResult Function(String value) textStartsWith,
    required TResult Function(String value) textEndsWith,
    required TResult Function() textIsEmpty,
    required TResult Function() textIsNotEmpty,
    required TResult Function(double value) numberEquals,
    required TResult Function(double value) numberDoesNotEqual,
    required TResult Function(double value) numberGreaterThan,
    required TResult Function(double value) numberLessThan,
    required TResult Function(double value) numberGreaterThanOrEqual,
    required TResult Function(double value) numberLessThanOrEqual,
    required TResult Function() numberIsEmpty,
    required TResult Function() numberIsNotEmpty,
    required TResult Function(bool value) checkboxEquals,
    required TResult Function(String value) selectEquals,
    required TResult Function(String value) selectDoesNotEqual,
    required TResult Function() selectIsEmpty,
    required TResult Function() selectIsNotEmpty,
    required TResult Function(String value) multiSelectContains,
    required TResult Function(String value) multiSelectDoesNotContain,
    required TResult Function() multiSelectIsEmpty,
    required TResult Function() multiSelectIsNotEmpty,
    required TResult Function(String date) dateEquals,
    required TResult Function(String date) dateBefore,
    required TResult Function(String date) dateAfter,
    required TResult Function(String date) dateOnOrBefore,
    required TResult Function(String date) dateOnOrAfter,
    required TResult Function() dateIsEmpty,
    required TResult Function() dateIsNotEmpty,
    required TResult Function() datePastWeek,
    required TResult Function() datePastMonth,
    required TResult Function() datePastYear,
    required TResult Function() dateNextWeek,
    required TResult Function() dateNextMonth,
    required TResult Function() dateNextYear,
    required TResult Function(String userId) peopleContains,
    required TResult Function(String userId) peopleDoesNotContain,
    required TResult Function() peopleIsEmpty,
    required TResult Function() peopleIsNotEmpty,
    required TResult Function() filesIsEmpty,
    required TResult Function() filesIsNotEmpty,
    required TResult Function(String pageId) relationContains,
    required TResult Function(String pageId) relationDoesNotContain,
    required TResult Function() relationIsEmpty,
    required TResult Function() relationIsNotEmpty,
  }) {
    return selectDoesNotEqual(value);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function(String value)? textEquals,
    TResult? Function(String value)? textDoesNotEqual,
    TResult? Function(String value)? textContains,
    TResult? Function(String value)? textDoesNotContain,
    TResult? Function(String value)? textStartsWith,
    TResult? Function(String value)? textEndsWith,
    TResult? Function()? textIsEmpty,
    TResult? Function()? textIsNotEmpty,
    TResult? Function(double value)? numberEquals,
    TResult? Function(double value)? numberDoesNotEqual,
    TResult? Function(double value)? numberGreaterThan,
    TResult? Function(double value)? numberLessThan,
    TResult? Function(double value)? numberGreaterThanOrEqual,
    TResult? Function(double value)? numberLessThanOrEqual,
    TResult? Function()? numberIsEmpty,
    TResult? Function()? numberIsNotEmpty,
    TResult? Function(bool value)? checkboxEquals,
    TResult? Function(String value)? selectEquals,
    TResult? Function(String value)? selectDoesNotEqual,
    TResult? Function()? selectIsEmpty,
    TResult? Function()? selectIsNotEmpty,
    TResult? Function(String value)? multiSelectContains,
    TResult? Function(String value)? multiSelectDoesNotContain,
    TResult? Function()? multiSelectIsEmpty,
    TResult? Function()? multiSelectIsNotEmpty,
    TResult? Function(String date)? dateEquals,
    TResult? Function(String date)? dateBefore,
    TResult? Function(String date)? dateAfter,
    TResult? Function(String date)? dateOnOrBefore,
    TResult? Function(String date)? dateOnOrAfter,
    TResult? Function()? dateIsEmpty,
    TResult? Function()? dateIsNotEmpty,
    TResult? Function()? datePastWeek,
    TResult? Function()? datePastMonth,
    TResult? Function()? datePastYear,
    TResult? Function()? dateNextWeek,
    TResult? Function()? dateNextMonth,
    TResult? Function()? dateNextYear,
    TResult? Function(String userId)? peopleContains,
    TResult? Function(String userId)? peopleDoesNotContain,
    TResult? Function()? peopleIsEmpty,
    TResult? Function()? peopleIsNotEmpty,
    TResult? Function()? filesIsEmpty,
    TResult? Function()? filesIsNotEmpty,
    TResult? Function(String pageId)? relationContains,
    TResult? Function(String pageId)? relationDoesNotContain,
    TResult? Function()? relationIsEmpty,
    TResult? Function()? relationIsNotEmpty,
  }) {
    return selectDoesNotEqual?.call(value);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function(String value)? textEquals,
    TResult Function(String value)? textDoesNotEqual,
    TResult Function(String value)? textContains,
    TResult Function(String value)? textDoesNotContain,
    TResult Function(String value)? textStartsWith,
    TResult Function(String value)? textEndsWith,
    TResult Function()? textIsEmpty,
    TResult Function()? textIsNotEmpty,
    TResult Function(double value)? numberEquals,
    TResult Function(double value)? numberDoesNotEqual,
    TResult Function(double value)? numberGreaterThan,
    TResult Function(double value)? numberLessThan,
    TResult Function(double value)? numberGreaterThanOrEqual,
    TResult Function(double value)? numberLessThanOrEqual,
    TResult Function()? numberIsEmpty,
    TResult Function()? numberIsNotEmpty,
    TResult Function(bool value)? checkboxEquals,
    TResult Function(String value)? selectEquals,
    TResult Function(String value)? selectDoesNotEqual,
    TResult Function()? selectIsEmpty,
    TResult Function()? selectIsNotEmpty,
    TResult Function(String value)? multiSelectContains,
    TResult Function(String value)? multiSelectDoesNotContain,
    TResult Function()? multiSelectIsEmpty,
    TResult Function()? multiSelectIsNotEmpty,
    TResult Function(String date)? dateEquals,
    TResult Function(String date)? dateBefore,
    TResult Function(String date)? dateAfter,
    TResult Function(String date)? dateOnOrBefore,
    TResult Function(String date)? dateOnOrAfter,
    TResult Function()? dateIsEmpty,
    TResult Function()? dateIsNotEmpty,
    TResult Function()? datePastWeek,
    TResult Function()? datePastMonth,
    TResult Function()? datePastYear,
    TResult Function()? dateNextWeek,
    TResult Function()? dateNextMonth,
    TResult Function()? dateNextYear,
    TResult Function(String userId)? peopleContains,
    TResult Function(String userId)? peopleDoesNotContain,
    TResult Function()? peopleIsEmpty,
    TResult Function()? peopleIsNotEmpty,
    TResult Function()? filesIsEmpty,
    TResult Function()? filesIsNotEmpty,
    TResult Function(String pageId)? relationContains,
    TResult Function(String pageId)? relationDoesNotContain,
    TResult Function()? relationIsEmpty,
    TResult Function()? relationIsNotEmpty,
    required TResult orElse(),
  }) {
    if (selectDoesNotEqual != null) {
      return selectDoesNotEqual(value);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(TextEqualsFilter value) textEquals,
    required TResult Function(TextDoesNotEqualFilter value) textDoesNotEqual,
    required TResult Function(TextContainsFilter value) textContains,
    required TResult Function(TextDoesNotContainFilter value)
        textDoesNotContain,
    required TResult Function(TextStartsWithFilter value) textStartsWith,
    required TResult Function(TextEndsWithFilter value) textEndsWith,
    required TResult Function(TextIsEmptyFilter value) textIsEmpty,
    required TResult Function(TextIsNotEmptyFilter value) textIsNotEmpty,
    required TResult Function(NumberEqualsFilter value) numberEquals,
    required TResult Function(NumberDoesNotEqualFilter value)
        numberDoesNotEqual,
    required TResult Function(NumberGreaterThanFilter value) numberGreaterThan,
    required TResult Function(NumberLessThanFilter value) numberLessThan,
    required TResult Function(NumberGreaterThanOrEqualFilter value)
        numberGreaterThanOrEqual,
    required TResult Function(NumberLessThanOrEqualFilter value)
        numberLessThanOrEqual,
    required TResult Function(NumberIsEmptyFilter value) numberIsEmpty,
    required TResult Function(NumberIsNotEmptyFilter value) numberIsNotEmpty,
    required TResult Function(CheckboxEqualsFilter value) checkboxEquals,
    required TResult Function(SelectEqualsFilter value) selectEquals,
    required TResult Function(SelectDoesNotEqualFilter value)
        selectDoesNotEqual,
    required TResult Function(SelectIsEmptyFilter value) selectIsEmpty,
    required TResult Function(SelectIsNotEmptyFilter value) selectIsNotEmpty,
    required TResult Function(MultiSelectContainsFilter value)
        multiSelectContains,
    required TResult Function(MultiSelectDoesNotContainFilter value)
        multiSelectDoesNotContain,
    required TResult Function(MultiSelectIsEmptyFilter value)
        multiSelectIsEmpty,
    required TResult Function(MultiSelectIsNotEmptyFilter value)
        multiSelectIsNotEmpty,
    required TResult Function(DateEqualsFilter value) dateEquals,
    required TResult Function(DateBeforeFilter value) dateBefore,
    required TResult Function(DateAfterFilter value) dateAfter,
    required TResult Function(DateOnOrBeforeFilter value) dateOnOrBefore,
    required TResult Function(DateOnOrAfterFilter value) dateOnOrAfter,
    required TResult Function(DateIsEmptyFilter value) dateIsEmpty,
    required TResult Function(DateIsNotEmptyFilter value) dateIsNotEmpty,
    required TResult Function(DatePastWeekFilter value) datePastWeek,
    required TResult Function(DatePastMonthFilter value) datePastMonth,
    required TResult Function(DatePastYearFilter value) datePastYear,
    required TResult Function(DateNextWeekFilter value) dateNextWeek,
    required TResult Function(DateNextMonthFilter value) dateNextMonth,
    required TResult Function(DateNextYearFilter value) dateNextYear,
    required TResult Function(PeopleContainsFilter value) peopleContains,
    required TResult Function(PeopleDoesNotContainFilter value)
        peopleDoesNotContain,
    required TResult Function(PeopleIsEmptyFilter value) peopleIsEmpty,
    required TResult Function(PeopleIsNotEmptyFilter value) peopleIsNotEmpty,
    required TResult Function(FilesIsEmptyFilter value) filesIsEmpty,
    required TResult Function(FilesIsNotEmptyFilter value) filesIsNotEmpty,
    required TResult Function(RelationContainsFilter value) relationContains,
    required TResult Function(RelationDoesNotContainFilter value)
        relationDoesNotContain,
    required TResult Function(RelationIsEmptyFilter value) relationIsEmpty,
    required TResult Function(RelationIsNotEmptyFilter value)
        relationIsNotEmpty,
  }) {
    return selectDoesNotEqual(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(TextEqualsFilter value)? textEquals,
    TResult? Function(TextDoesNotEqualFilter value)? textDoesNotEqual,
    TResult? Function(TextContainsFilter value)? textContains,
    TResult? Function(TextDoesNotContainFilter value)? textDoesNotContain,
    TResult? Function(TextStartsWithFilter value)? textStartsWith,
    TResult? Function(TextEndsWithFilter value)? textEndsWith,
    TResult? Function(TextIsEmptyFilter value)? textIsEmpty,
    TResult? Function(TextIsNotEmptyFilter value)? textIsNotEmpty,
    TResult? Function(NumberEqualsFilter value)? numberEquals,
    TResult? Function(NumberDoesNotEqualFilter value)? numberDoesNotEqual,
    TResult? Function(NumberGreaterThanFilter value)? numberGreaterThan,
    TResult? Function(NumberLessThanFilter value)? numberLessThan,
    TResult? Function(NumberGreaterThanOrEqualFilter value)?
        numberGreaterThanOrEqual,
    TResult? Function(NumberLessThanOrEqualFilter value)? numberLessThanOrEqual,
    TResult? Function(NumberIsEmptyFilter value)? numberIsEmpty,
    TResult? Function(NumberIsNotEmptyFilter value)? numberIsNotEmpty,
    TResult? Function(CheckboxEqualsFilter value)? checkboxEquals,
    TResult? Function(SelectEqualsFilter value)? selectEquals,
    TResult? Function(SelectDoesNotEqualFilter value)? selectDoesNotEqual,
    TResult? Function(SelectIsEmptyFilter value)? selectIsEmpty,
    TResult? Function(SelectIsNotEmptyFilter value)? selectIsNotEmpty,
    TResult? Function(MultiSelectContainsFilter value)? multiSelectContains,
    TResult? Function(MultiSelectDoesNotContainFilter value)?
        multiSelectDoesNotContain,
    TResult? Function(MultiSelectIsEmptyFilter value)? multiSelectIsEmpty,
    TResult? Function(MultiSelectIsNotEmptyFilter value)? multiSelectIsNotEmpty,
    TResult? Function(DateEqualsFilter value)? dateEquals,
    TResult? Function(DateBeforeFilter value)? dateBefore,
    TResult? Function(DateAfterFilter value)? dateAfter,
    TResult? Function(DateOnOrBeforeFilter value)? dateOnOrBefore,
    TResult? Function(DateOnOrAfterFilter value)? dateOnOrAfter,
    TResult? Function(DateIsEmptyFilter value)? dateIsEmpty,
    TResult? Function(DateIsNotEmptyFilter value)? dateIsNotEmpty,
    TResult? Function(DatePastWeekFilter value)? datePastWeek,
    TResult? Function(DatePastMonthFilter value)? datePastMonth,
    TResult? Function(DatePastYearFilter value)? datePastYear,
    TResult? Function(DateNextWeekFilter value)? dateNextWeek,
    TResult? Function(DateNextMonthFilter value)? dateNextMonth,
    TResult? Function(DateNextYearFilter value)? dateNextYear,
    TResult? Function(PeopleContainsFilter value)? peopleContains,
    TResult? Function(PeopleDoesNotContainFilter value)? peopleDoesNotContain,
    TResult? Function(PeopleIsEmptyFilter value)? peopleIsEmpty,
    TResult? Function(PeopleIsNotEmptyFilter value)? peopleIsNotEmpty,
    TResult? Function(FilesIsEmptyFilter value)? filesIsEmpty,
    TResult? Function(FilesIsNotEmptyFilter value)? filesIsNotEmpty,
    TResult? Function(RelationContainsFilter value)? relationContains,
    TResult? Function(RelationDoesNotContainFilter value)?
        relationDoesNotContain,
    TResult? Function(RelationIsEmptyFilter value)? relationIsEmpty,
    TResult? Function(RelationIsNotEmptyFilter value)? relationIsNotEmpty,
  }) {
    return selectDoesNotEqual?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(TextEqualsFilter value)? textEquals,
    TResult Function(TextDoesNotEqualFilter value)? textDoesNotEqual,
    TResult Function(TextContainsFilter value)? textContains,
    TResult Function(TextDoesNotContainFilter value)? textDoesNotContain,
    TResult Function(TextStartsWithFilter value)? textStartsWith,
    TResult Function(TextEndsWithFilter value)? textEndsWith,
    TResult Function(TextIsEmptyFilter value)? textIsEmpty,
    TResult Function(TextIsNotEmptyFilter value)? textIsNotEmpty,
    TResult Function(NumberEqualsFilter value)? numberEquals,
    TResult Function(NumberDoesNotEqualFilter value)? numberDoesNotEqual,
    TResult Function(NumberGreaterThanFilter value)? numberGreaterThan,
    TResult Function(NumberLessThanFilter value)? numberLessThan,
    TResult Function(NumberGreaterThanOrEqualFilter value)?
        numberGreaterThanOrEqual,
    TResult Function(NumberLessThanOrEqualFilter value)? numberLessThanOrEqual,
    TResult Function(NumberIsEmptyFilter value)? numberIsEmpty,
    TResult Function(NumberIsNotEmptyFilter value)? numberIsNotEmpty,
    TResult Function(CheckboxEqualsFilter value)? checkboxEquals,
    TResult Function(SelectEqualsFilter value)? selectEquals,
    TResult Function(SelectDoesNotEqualFilter value)? selectDoesNotEqual,
    TResult Function(SelectIsEmptyFilter value)? selectIsEmpty,
    TResult Function(SelectIsNotEmptyFilter value)? selectIsNotEmpty,
    TResult Function(MultiSelectContainsFilter value)? multiSelectContains,
    TResult Function(MultiSelectDoesNotContainFilter value)?
        multiSelectDoesNotContain,
    TResult Function(MultiSelectIsEmptyFilter value)? multiSelectIsEmpty,
    TResult Function(MultiSelectIsNotEmptyFilter value)? multiSelectIsNotEmpty,
    TResult Function(DateEqualsFilter value)? dateEquals,
    TResult Function(DateBeforeFilter value)? dateBefore,
    TResult Function(DateAfterFilter value)? dateAfter,
    TResult Function(DateOnOrBeforeFilter value)? dateOnOrBefore,
    TResult Function(DateOnOrAfterFilter value)? dateOnOrAfter,
    TResult Function(DateIsEmptyFilter value)? dateIsEmpty,
    TResult Function(DateIsNotEmptyFilter value)? dateIsNotEmpty,
    TResult Function(DatePastWeekFilter value)? datePastWeek,
    TResult Function(DatePastMonthFilter value)? datePastMonth,
    TResult Function(DatePastYearFilter value)? datePastYear,
    TResult Function(DateNextWeekFilter value)? dateNextWeek,
    TResult Function(DateNextMonthFilter value)? dateNextMonth,
    TResult Function(DateNextYearFilter value)? dateNextYear,
    TResult Function(PeopleContainsFilter value)? peopleContains,
    TResult Function(PeopleDoesNotContainFilter value)? peopleDoesNotContain,
    TResult Function(PeopleIsEmptyFilter value)? peopleIsEmpty,
    TResult Function(PeopleIsNotEmptyFilter value)? peopleIsNotEmpty,
    TResult Function(FilesIsEmptyFilter value)? filesIsEmpty,
    TResult Function(FilesIsNotEmptyFilter value)? filesIsNotEmpty,
    TResult Function(RelationContainsFilter value)? relationContains,
    TResult Function(RelationDoesNotContainFilter value)?
        relationDoesNotContain,
    TResult Function(RelationIsEmptyFilter value)? relationIsEmpty,
    TResult Function(RelationIsNotEmptyFilter value)? relationIsNotEmpty,
    required TResult orElse(),
  }) {
    if (selectDoesNotEqual != null) {
      return selectDoesNotEqual(this);
    }
    return orElse();
  }
}

abstract class SelectDoesNotEqualFilter extends PropertyFilter {
  const factory SelectDoesNotEqualFilter(final String value) =
      _$SelectDoesNotEqualFilterImpl;
  const SelectDoesNotEqualFilter._() : super._();

  String get value;

  /// Create a copy of PropertyFilter
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  _$$SelectDoesNotEqualFilterImplCopyWith<_$SelectDoesNotEqualFilterImpl>
      get copyWith => throw _privateConstructorUsedError;
}

/// @nodoc
abstract class _$$SelectIsEmptyFilterImplCopyWith<$Res> {
  factory _$$SelectIsEmptyFilterImplCopyWith(_$SelectIsEmptyFilterImpl value,
          $Res Function(_$SelectIsEmptyFilterImpl) then) =
      __$$SelectIsEmptyFilterImplCopyWithImpl<$Res>;
}

/// @nodoc
class __$$SelectIsEmptyFilterImplCopyWithImpl<$Res>
    extends _$PropertyFilterCopyWithImpl<$Res, _$SelectIsEmptyFilterImpl>
    implements _$$SelectIsEmptyFilterImplCopyWith<$Res> {
  __$$SelectIsEmptyFilterImplCopyWithImpl(_$SelectIsEmptyFilterImpl _value,
      $Res Function(_$SelectIsEmptyFilterImpl) _then)
      : super(_value, _then);

  /// Create a copy of PropertyFilter
  /// with the given fields replaced by the non-null parameter values.
}

/// @nodoc

class _$SelectIsEmptyFilterImpl extends SelectIsEmptyFilter {
  const _$SelectIsEmptyFilterImpl() : super._();

  @override
  String toString() {
    return 'PropertyFilter.selectIsEmpty()';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$SelectIsEmptyFilterImpl);
  }

  @override
  int get hashCode => runtimeType.hashCode;

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function(String value) textEquals,
    required TResult Function(String value) textDoesNotEqual,
    required TResult Function(String value) textContains,
    required TResult Function(String value) textDoesNotContain,
    required TResult Function(String value) textStartsWith,
    required TResult Function(String value) textEndsWith,
    required TResult Function() textIsEmpty,
    required TResult Function() textIsNotEmpty,
    required TResult Function(double value) numberEquals,
    required TResult Function(double value) numberDoesNotEqual,
    required TResult Function(double value) numberGreaterThan,
    required TResult Function(double value) numberLessThan,
    required TResult Function(double value) numberGreaterThanOrEqual,
    required TResult Function(double value) numberLessThanOrEqual,
    required TResult Function() numberIsEmpty,
    required TResult Function() numberIsNotEmpty,
    required TResult Function(bool value) checkboxEquals,
    required TResult Function(String value) selectEquals,
    required TResult Function(String value) selectDoesNotEqual,
    required TResult Function() selectIsEmpty,
    required TResult Function() selectIsNotEmpty,
    required TResult Function(String value) multiSelectContains,
    required TResult Function(String value) multiSelectDoesNotContain,
    required TResult Function() multiSelectIsEmpty,
    required TResult Function() multiSelectIsNotEmpty,
    required TResult Function(String date) dateEquals,
    required TResult Function(String date) dateBefore,
    required TResult Function(String date) dateAfter,
    required TResult Function(String date) dateOnOrBefore,
    required TResult Function(String date) dateOnOrAfter,
    required TResult Function() dateIsEmpty,
    required TResult Function() dateIsNotEmpty,
    required TResult Function() datePastWeek,
    required TResult Function() datePastMonth,
    required TResult Function() datePastYear,
    required TResult Function() dateNextWeek,
    required TResult Function() dateNextMonth,
    required TResult Function() dateNextYear,
    required TResult Function(String userId) peopleContains,
    required TResult Function(String userId) peopleDoesNotContain,
    required TResult Function() peopleIsEmpty,
    required TResult Function() peopleIsNotEmpty,
    required TResult Function() filesIsEmpty,
    required TResult Function() filesIsNotEmpty,
    required TResult Function(String pageId) relationContains,
    required TResult Function(String pageId) relationDoesNotContain,
    required TResult Function() relationIsEmpty,
    required TResult Function() relationIsNotEmpty,
  }) {
    return selectIsEmpty();
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function(String value)? textEquals,
    TResult? Function(String value)? textDoesNotEqual,
    TResult? Function(String value)? textContains,
    TResult? Function(String value)? textDoesNotContain,
    TResult? Function(String value)? textStartsWith,
    TResult? Function(String value)? textEndsWith,
    TResult? Function()? textIsEmpty,
    TResult? Function()? textIsNotEmpty,
    TResult? Function(double value)? numberEquals,
    TResult? Function(double value)? numberDoesNotEqual,
    TResult? Function(double value)? numberGreaterThan,
    TResult? Function(double value)? numberLessThan,
    TResult? Function(double value)? numberGreaterThanOrEqual,
    TResult? Function(double value)? numberLessThanOrEqual,
    TResult? Function()? numberIsEmpty,
    TResult? Function()? numberIsNotEmpty,
    TResult? Function(bool value)? checkboxEquals,
    TResult? Function(String value)? selectEquals,
    TResult? Function(String value)? selectDoesNotEqual,
    TResult? Function()? selectIsEmpty,
    TResult? Function()? selectIsNotEmpty,
    TResult? Function(String value)? multiSelectContains,
    TResult? Function(String value)? multiSelectDoesNotContain,
    TResult? Function()? multiSelectIsEmpty,
    TResult? Function()? multiSelectIsNotEmpty,
    TResult? Function(String date)? dateEquals,
    TResult? Function(String date)? dateBefore,
    TResult? Function(String date)? dateAfter,
    TResult? Function(String date)? dateOnOrBefore,
    TResult? Function(String date)? dateOnOrAfter,
    TResult? Function()? dateIsEmpty,
    TResult? Function()? dateIsNotEmpty,
    TResult? Function()? datePastWeek,
    TResult? Function()? datePastMonth,
    TResult? Function()? datePastYear,
    TResult? Function()? dateNextWeek,
    TResult? Function()? dateNextMonth,
    TResult? Function()? dateNextYear,
    TResult? Function(String userId)? peopleContains,
    TResult? Function(String userId)? peopleDoesNotContain,
    TResult? Function()? peopleIsEmpty,
    TResult? Function()? peopleIsNotEmpty,
    TResult? Function()? filesIsEmpty,
    TResult? Function()? filesIsNotEmpty,
    TResult? Function(String pageId)? relationContains,
    TResult? Function(String pageId)? relationDoesNotContain,
    TResult? Function()? relationIsEmpty,
    TResult? Function()? relationIsNotEmpty,
  }) {
    return selectIsEmpty?.call();
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function(String value)? textEquals,
    TResult Function(String value)? textDoesNotEqual,
    TResult Function(String value)? textContains,
    TResult Function(String value)? textDoesNotContain,
    TResult Function(String value)? textStartsWith,
    TResult Function(String value)? textEndsWith,
    TResult Function()? textIsEmpty,
    TResult Function()? textIsNotEmpty,
    TResult Function(double value)? numberEquals,
    TResult Function(double value)? numberDoesNotEqual,
    TResult Function(double value)? numberGreaterThan,
    TResult Function(double value)? numberLessThan,
    TResult Function(double value)? numberGreaterThanOrEqual,
    TResult Function(double value)? numberLessThanOrEqual,
    TResult Function()? numberIsEmpty,
    TResult Function()? numberIsNotEmpty,
    TResult Function(bool value)? checkboxEquals,
    TResult Function(String value)? selectEquals,
    TResult Function(String value)? selectDoesNotEqual,
    TResult Function()? selectIsEmpty,
    TResult Function()? selectIsNotEmpty,
    TResult Function(String value)? multiSelectContains,
    TResult Function(String value)? multiSelectDoesNotContain,
    TResult Function()? multiSelectIsEmpty,
    TResult Function()? multiSelectIsNotEmpty,
    TResult Function(String date)? dateEquals,
    TResult Function(String date)? dateBefore,
    TResult Function(String date)? dateAfter,
    TResult Function(String date)? dateOnOrBefore,
    TResult Function(String date)? dateOnOrAfter,
    TResult Function()? dateIsEmpty,
    TResult Function()? dateIsNotEmpty,
    TResult Function()? datePastWeek,
    TResult Function()? datePastMonth,
    TResult Function()? datePastYear,
    TResult Function()? dateNextWeek,
    TResult Function()? dateNextMonth,
    TResult Function()? dateNextYear,
    TResult Function(String userId)? peopleContains,
    TResult Function(String userId)? peopleDoesNotContain,
    TResult Function()? peopleIsEmpty,
    TResult Function()? peopleIsNotEmpty,
    TResult Function()? filesIsEmpty,
    TResult Function()? filesIsNotEmpty,
    TResult Function(String pageId)? relationContains,
    TResult Function(String pageId)? relationDoesNotContain,
    TResult Function()? relationIsEmpty,
    TResult Function()? relationIsNotEmpty,
    required TResult orElse(),
  }) {
    if (selectIsEmpty != null) {
      return selectIsEmpty();
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(TextEqualsFilter value) textEquals,
    required TResult Function(TextDoesNotEqualFilter value) textDoesNotEqual,
    required TResult Function(TextContainsFilter value) textContains,
    required TResult Function(TextDoesNotContainFilter value)
        textDoesNotContain,
    required TResult Function(TextStartsWithFilter value) textStartsWith,
    required TResult Function(TextEndsWithFilter value) textEndsWith,
    required TResult Function(TextIsEmptyFilter value) textIsEmpty,
    required TResult Function(TextIsNotEmptyFilter value) textIsNotEmpty,
    required TResult Function(NumberEqualsFilter value) numberEquals,
    required TResult Function(NumberDoesNotEqualFilter value)
        numberDoesNotEqual,
    required TResult Function(NumberGreaterThanFilter value) numberGreaterThan,
    required TResult Function(NumberLessThanFilter value) numberLessThan,
    required TResult Function(NumberGreaterThanOrEqualFilter value)
        numberGreaterThanOrEqual,
    required TResult Function(NumberLessThanOrEqualFilter value)
        numberLessThanOrEqual,
    required TResult Function(NumberIsEmptyFilter value) numberIsEmpty,
    required TResult Function(NumberIsNotEmptyFilter value) numberIsNotEmpty,
    required TResult Function(CheckboxEqualsFilter value) checkboxEquals,
    required TResult Function(SelectEqualsFilter value) selectEquals,
    required TResult Function(SelectDoesNotEqualFilter value)
        selectDoesNotEqual,
    required TResult Function(SelectIsEmptyFilter value) selectIsEmpty,
    required TResult Function(SelectIsNotEmptyFilter value) selectIsNotEmpty,
    required TResult Function(MultiSelectContainsFilter value)
        multiSelectContains,
    required TResult Function(MultiSelectDoesNotContainFilter value)
        multiSelectDoesNotContain,
    required TResult Function(MultiSelectIsEmptyFilter value)
        multiSelectIsEmpty,
    required TResult Function(MultiSelectIsNotEmptyFilter value)
        multiSelectIsNotEmpty,
    required TResult Function(DateEqualsFilter value) dateEquals,
    required TResult Function(DateBeforeFilter value) dateBefore,
    required TResult Function(DateAfterFilter value) dateAfter,
    required TResult Function(DateOnOrBeforeFilter value) dateOnOrBefore,
    required TResult Function(DateOnOrAfterFilter value) dateOnOrAfter,
    required TResult Function(DateIsEmptyFilter value) dateIsEmpty,
    required TResult Function(DateIsNotEmptyFilter value) dateIsNotEmpty,
    required TResult Function(DatePastWeekFilter value) datePastWeek,
    required TResult Function(DatePastMonthFilter value) datePastMonth,
    required TResult Function(DatePastYearFilter value) datePastYear,
    required TResult Function(DateNextWeekFilter value) dateNextWeek,
    required TResult Function(DateNextMonthFilter value) dateNextMonth,
    required TResult Function(DateNextYearFilter value) dateNextYear,
    required TResult Function(PeopleContainsFilter value) peopleContains,
    required TResult Function(PeopleDoesNotContainFilter value)
        peopleDoesNotContain,
    required TResult Function(PeopleIsEmptyFilter value) peopleIsEmpty,
    required TResult Function(PeopleIsNotEmptyFilter value) peopleIsNotEmpty,
    required TResult Function(FilesIsEmptyFilter value) filesIsEmpty,
    required TResult Function(FilesIsNotEmptyFilter value) filesIsNotEmpty,
    required TResult Function(RelationContainsFilter value) relationContains,
    required TResult Function(RelationDoesNotContainFilter value)
        relationDoesNotContain,
    required TResult Function(RelationIsEmptyFilter value) relationIsEmpty,
    required TResult Function(RelationIsNotEmptyFilter value)
        relationIsNotEmpty,
  }) {
    return selectIsEmpty(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(TextEqualsFilter value)? textEquals,
    TResult? Function(TextDoesNotEqualFilter value)? textDoesNotEqual,
    TResult? Function(TextContainsFilter value)? textContains,
    TResult? Function(TextDoesNotContainFilter value)? textDoesNotContain,
    TResult? Function(TextStartsWithFilter value)? textStartsWith,
    TResult? Function(TextEndsWithFilter value)? textEndsWith,
    TResult? Function(TextIsEmptyFilter value)? textIsEmpty,
    TResult? Function(TextIsNotEmptyFilter value)? textIsNotEmpty,
    TResult? Function(NumberEqualsFilter value)? numberEquals,
    TResult? Function(NumberDoesNotEqualFilter value)? numberDoesNotEqual,
    TResult? Function(NumberGreaterThanFilter value)? numberGreaterThan,
    TResult? Function(NumberLessThanFilter value)? numberLessThan,
    TResult? Function(NumberGreaterThanOrEqualFilter value)?
        numberGreaterThanOrEqual,
    TResult? Function(NumberLessThanOrEqualFilter value)? numberLessThanOrEqual,
    TResult? Function(NumberIsEmptyFilter value)? numberIsEmpty,
    TResult? Function(NumberIsNotEmptyFilter value)? numberIsNotEmpty,
    TResult? Function(CheckboxEqualsFilter value)? checkboxEquals,
    TResult? Function(SelectEqualsFilter value)? selectEquals,
    TResult? Function(SelectDoesNotEqualFilter value)? selectDoesNotEqual,
    TResult? Function(SelectIsEmptyFilter value)? selectIsEmpty,
    TResult? Function(SelectIsNotEmptyFilter value)? selectIsNotEmpty,
    TResult? Function(MultiSelectContainsFilter value)? multiSelectContains,
    TResult? Function(MultiSelectDoesNotContainFilter value)?
        multiSelectDoesNotContain,
    TResult? Function(MultiSelectIsEmptyFilter value)? multiSelectIsEmpty,
    TResult? Function(MultiSelectIsNotEmptyFilter value)? multiSelectIsNotEmpty,
    TResult? Function(DateEqualsFilter value)? dateEquals,
    TResult? Function(DateBeforeFilter value)? dateBefore,
    TResult? Function(DateAfterFilter value)? dateAfter,
    TResult? Function(DateOnOrBeforeFilter value)? dateOnOrBefore,
    TResult? Function(DateOnOrAfterFilter value)? dateOnOrAfter,
    TResult? Function(DateIsEmptyFilter value)? dateIsEmpty,
    TResult? Function(DateIsNotEmptyFilter value)? dateIsNotEmpty,
    TResult? Function(DatePastWeekFilter value)? datePastWeek,
    TResult? Function(DatePastMonthFilter value)? datePastMonth,
    TResult? Function(DatePastYearFilter value)? datePastYear,
    TResult? Function(DateNextWeekFilter value)? dateNextWeek,
    TResult? Function(DateNextMonthFilter value)? dateNextMonth,
    TResult? Function(DateNextYearFilter value)? dateNextYear,
    TResult? Function(PeopleContainsFilter value)? peopleContains,
    TResult? Function(PeopleDoesNotContainFilter value)? peopleDoesNotContain,
    TResult? Function(PeopleIsEmptyFilter value)? peopleIsEmpty,
    TResult? Function(PeopleIsNotEmptyFilter value)? peopleIsNotEmpty,
    TResult? Function(FilesIsEmptyFilter value)? filesIsEmpty,
    TResult? Function(FilesIsNotEmptyFilter value)? filesIsNotEmpty,
    TResult? Function(RelationContainsFilter value)? relationContains,
    TResult? Function(RelationDoesNotContainFilter value)?
        relationDoesNotContain,
    TResult? Function(RelationIsEmptyFilter value)? relationIsEmpty,
    TResult? Function(RelationIsNotEmptyFilter value)? relationIsNotEmpty,
  }) {
    return selectIsEmpty?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(TextEqualsFilter value)? textEquals,
    TResult Function(TextDoesNotEqualFilter value)? textDoesNotEqual,
    TResult Function(TextContainsFilter value)? textContains,
    TResult Function(TextDoesNotContainFilter value)? textDoesNotContain,
    TResult Function(TextStartsWithFilter value)? textStartsWith,
    TResult Function(TextEndsWithFilter value)? textEndsWith,
    TResult Function(TextIsEmptyFilter value)? textIsEmpty,
    TResult Function(TextIsNotEmptyFilter value)? textIsNotEmpty,
    TResult Function(NumberEqualsFilter value)? numberEquals,
    TResult Function(NumberDoesNotEqualFilter value)? numberDoesNotEqual,
    TResult Function(NumberGreaterThanFilter value)? numberGreaterThan,
    TResult Function(NumberLessThanFilter value)? numberLessThan,
    TResult Function(NumberGreaterThanOrEqualFilter value)?
        numberGreaterThanOrEqual,
    TResult Function(NumberLessThanOrEqualFilter value)? numberLessThanOrEqual,
    TResult Function(NumberIsEmptyFilter value)? numberIsEmpty,
    TResult Function(NumberIsNotEmptyFilter value)? numberIsNotEmpty,
    TResult Function(CheckboxEqualsFilter value)? checkboxEquals,
    TResult Function(SelectEqualsFilter value)? selectEquals,
    TResult Function(SelectDoesNotEqualFilter value)? selectDoesNotEqual,
    TResult Function(SelectIsEmptyFilter value)? selectIsEmpty,
    TResult Function(SelectIsNotEmptyFilter value)? selectIsNotEmpty,
    TResult Function(MultiSelectContainsFilter value)? multiSelectContains,
    TResult Function(MultiSelectDoesNotContainFilter value)?
        multiSelectDoesNotContain,
    TResult Function(MultiSelectIsEmptyFilter value)? multiSelectIsEmpty,
    TResult Function(MultiSelectIsNotEmptyFilter value)? multiSelectIsNotEmpty,
    TResult Function(DateEqualsFilter value)? dateEquals,
    TResult Function(DateBeforeFilter value)? dateBefore,
    TResult Function(DateAfterFilter value)? dateAfter,
    TResult Function(DateOnOrBeforeFilter value)? dateOnOrBefore,
    TResult Function(DateOnOrAfterFilter value)? dateOnOrAfter,
    TResult Function(DateIsEmptyFilter value)? dateIsEmpty,
    TResult Function(DateIsNotEmptyFilter value)? dateIsNotEmpty,
    TResult Function(DatePastWeekFilter value)? datePastWeek,
    TResult Function(DatePastMonthFilter value)? datePastMonth,
    TResult Function(DatePastYearFilter value)? datePastYear,
    TResult Function(DateNextWeekFilter value)? dateNextWeek,
    TResult Function(DateNextMonthFilter value)? dateNextMonth,
    TResult Function(DateNextYearFilter value)? dateNextYear,
    TResult Function(PeopleContainsFilter value)? peopleContains,
    TResult Function(PeopleDoesNotContainFilter value)? peopleDoesNotContain,
    TResult Function(PeopleIsEmptyFilter value)? peopleIsEmpty,
    TResult Function(PeopleIsNotEmptyFilter value)? peopleIsNotEmpty,
    TResult Function(FilesIsEmptyFilter value)? filesIsEmpty,
    TResult Function(FilesIsNotEmptyFilter value)? filesIsNotEmpty,
    TResult Function(RelationContainsFilter value)? relationContains,
    TResult Function(RelationDoesNotContainFilter value)?
        relationDoesNotContain,
    TResult Function(RelationIsEmptyFilter value)? relationIsEmpty,
    TResult Function(RelationIsNotEmptyFilter value)? relationIsNotEmpty,
    required TResult orElse(),
  }) {
    if (selectIsEmpty != null) {
      return selectIsEmpty(this);
    }
    return orElse();
  }
}

abstract class SelectIsEmptyFilter extends PropertyFilter {
  const factory SelectIsEmptyFilter() = _$SelectIsEmptyFilterImpl;
  const SelectIsEmptyFilter._() : super._();
}

/// @nodoc
abstract class _$$SelectIsNotEmptyFilterImplCopyWith<$Res> {
  factory _$$SelectIsNotEmptyFilterImplCopyWith(
          _$SelectIsNotEmptyFilterImpl value,
          $Res Function(_$SelectIsNotEmptyFilterImpl) then) =
      __$$SelectIsNotEmptyFilterImplCopyWithImpl<$Res>;
}

/// @nodoc
class __$$SelectIsNotEmptyFilterImplCopyWithImpl<$Res>
    extends _$PropertyFilterCopyWithImpl<$Res, _$SelectIsNotEmptyFilterImpl>
    implements _$$SelectIsNotEmptyFilterImplCopyWith<$Res> {
  __$$SelectIsNotEmptyFilterImplCopyWithImpl(
      _$SelectIsNotEmptyFilterImpl _value,
      $Res Function(_$SelectIsNotEmptyFilterImpl) _then)
      : super(_value, _then);

  /// Create a copy of PropertyFilter
  /// with the given fields replaced by the non-null parameter values.
}

/// @nodoc

class _$SelectIsNotEmptyFilterImpl extends SelectIsNotEmptyFilter {
  const _$SelectIsNotEmptyFilterImpl() : super._();

  @override
  String toString() {
    return 'PropertyFilter.selectIsNotEmpty()';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$SelectIsNotEmptyFilterImpl);
  }

  @override
  int get hashCode => runtimeType.hashCode;

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function(String value) textEquals,
    required TResult Function(String value) textDoesNotEqual,
    required TResult Function(String value) textContains,
    required TResult Function(String value) textDoesNotContain,
    required TResult Function(String value) textStartsWith,
    required TResult Function(String value) textEndsWith,
    required TResult Function() textIsEmpty,
    required TResult Function() textIsNotEmpty,
    required TResult Function(double value) numberEquals,
    required TResult Function(double value) numberDoesNotEqual,
    required TResult Function(double value) numberGreaterThan,
    required TResult Function(double value) numberLessThan,
    required TResult Function(double value) numberGreaterThanOrEqual,
    required TResult Function(double value) numberLessThanOrEqual,
    required TResult Function() numberIsEmpty,
    required TResult Function() numberIsNotEmpty,
    required TResult Function(bool value) checkboxEquals,
    required TResult Function(String value) selectEquals,
    required TResult Function(String value) selectDoesNotEqual,
    required TResult Function() selectIsEmpty,
    required TResult Function() selectIsNotEmpty,
    required TResult Function(String value) multiSelectContains,
    required TResult Function(String value) multiSelectDoesNotContain,
    required TResult Function() multiSelectIsEmpty,
    required TResult Function() multiSelectIsNotEmpty,
    required TResult Function(String date) dateEquals,
    required TResult Function(String date) dateBefore,
    required TResult Function(String date) dateAfter,
    required TResult Function(String date) dateOnOrBefore,
    required TResult Function(String date) dateOnOrAfter,
    required TResult Function() dateIsEmpty,
    required TResult Function() dateIsNotEmpty,
    required TResult Function() datePastWeek,
    required TResult Function() datePastMonth,
    required TResult Function() datePastYear,
    required TResult Function() dateNextWeek,
    required TResult Function() dateNextMonth,
    required TResult Function() dateNextYear,
    required TResult Function(String userId) peopleContains,
    required TResult Function(String userId) peopleDoesNotContain,
    required TResult Function() peopleIsEmpty,
    required TResult Function() peopleIsNotEmpty,
    required TResult Function() filesIsEmpty,
    required TResult Function() filesIsNotEmpty,
    required TResult Function(String pageId) relationContains,
    required TResult Function(String pageId) relationDoesNotContain,
    required TResult Function() relationIsEmpty,
    required TResult Function() relationIsNotEmpty,
  }) {
    return selectIsNotEmpty();
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function(String value)? textEquals,
    TResult? Function(String value)? textDoesNotEqual,
    TResult? Function(String value)? textContains,
    TResult? Function(String value)? textDoesNotContain,
    TResult? Function(String value)? textStartsWith,
    TResult? Function(String value)? textEndsWith,
    TResult? Function()? textIsEmpty,
    TResult? Function()? textIsNotEmpty,
    TResult? Function(double value)? numberEquals,
    TResult? Function(double value)? numberDoesNotEqual,
    TResult? Function(double value)? numberGreaterThan,
    TResult? Function(double value)? numberLessThan,
    TResult? Function(double value)? numberGreaterThanOrEqual,
    TResult? Function(double value)? numberLessThanOrEqual,
    TResult? Function()? numberIsEmpty,
    TResult? Function()? numberIsNotEmpty,
    TResult? Function(bool value)? checkboxEquals,
    TResult? Function(String value)? selectEquals,
    TResult? Function(String value)? selectDoesNotEqual,
    TResult? Function()? selectIsEmpty,
    TResult? Function()? selectIsNotEmpty,
    TResult? Function(String value)? multiSelectContains,
    TResult? Function(String value)? multiSelectDoesNotContain,
    TResult? Function()? multiSelectIsEmpty,
    TResult? Function()? multiSelectIsNotEmpty,
    TResult? Function(String date)? dateEquals,
    TResult? Function(String date)? dateBefore,
    TResult? Function(String date)? dateAfter,
    TResult? Function(String date)? dateOnOrBefore,
    TResult? Function(String date)? dateOnOrAfter,
    TResult? Function()? dateIsEmpty,
    TResult? Function()? dateIsNotEmpty,
    TResult? Function()? datePastWeek,
    TResult? Function()? datePastMonth,
    TResult? Function()? datePastYear,
    TResult? Function()? dateNextWeek,
    TResult? Function()? dateNextMonth,
    TResult? Function()? dateNextYear,
    TResult? Function(String userId)? peopleContains,
    TResult? Function(String userId)? peopleDoesNotContain,
    TResult? Function()? peopleIsEmpty,
    TResult? Function()? peopleIsNotEmpty,
    TResult? Function()? filesIsEmpty,
    TResult? Function()? filesIsNotEmpty,
    TResult? Function(String pageId)? relationContains,
    TResult? Function(String pageId)? relationDoesNotContain,
    TResult? Function()? relationIsEmpty,
    TResult? Function()? relationIsNotEmpty,
  }) {
    return selectIsNotEmpty?.call();
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function(String value)? textEquals,
    TResult Function(String value)? textDoesNotEqual,
    TResult Function(String value)? textContains,
    TResult Function(String value)? textDoesNotContain,
    TResult Function(String value)? textStartsWith,
    TResult Function(String value)? textEndsWith,
    TResult Function()? textIsEmpty,
    TResult Function()? textIsNotEmpty,
    TResult Function(double value)? numberEquals,
    TResult Function(double value)? numberDoesNotEqual,
    TResult Function(double value)? numberGreaterThan,
    TResult Function(double value)? numberLessThan,
    TResult Function(double value)? numberGreaterThanOrEqual,
    TResult Function(double value)? numberLessThanOrEqual,
    TResult Function()? numberIsEmpty,
    TResult Function()? numberIsNotEmpty,
    TResult Function(bool value)? checkboxEquals,
    TResult Function(String value)? selectEquals,
    TResult Function(String value)? selectDoesNotEqual,
    TResult Function()? selectIsEmpty,
    TResult Function()? selectIsNotEmpty,
    TResult Function(String value)? multiSelectContains,
    TResult Function(String value)? multiSelectDoesNotContain,
    TResult Function()? multiSelectIsEmpty,
    TResult Function()? multiSelectIsNotEmpty,
    TResult Function(String date)? dateEquals,
    TResult Function(String date)? dateBefore,
    TResult Function(String date)? dateAfter,
    TResult Function(String date)? dateOnOrBefore,
    TResult Function(String date)? dateOnOrAfter,
    TResult Function()? dateIsEmpty,
    TResult Function()? dateIsNotEmpty,
    TResult Function()? datePastWeek,
    TResult Function()? datePastMonth,
    TResult Function()? datePastYear,
    TResult Function()? dateNextWeek,
    TResult Function()? dateNextMonth,
    TResult Function()? dateNextYear,
    TResult Function(String userId)? peopleContains,
    TResult Function(String userId)? peopleDoesNotContain,
    TResult Function()? peopleIsEmpty,
    TResult Function()? peopleIsNotEmpty,
    TResult Function()? filesIsEmpty,
    TResult Function()? filesIsNotEmpty,
    TResult Function(String pageId)? relationContains,
    TResult Function(String pageId)? relationDoesNotContain,
    TResult Function()? relationIsEmpty,
    TResult Function()? relationIsNotEmpty,
    required TResult orElse(),
  }) {
    if (selectIsNotEmpty != null) {
      return selectIsNotEmpty();
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(TextEqualsFilter value) textEquals,
    required TResult Function(TextDoesNotEqualFilter value) textDoesNotEqual,
    required TResult Function(TextContainsFilter value) textContains,
    required TResult Function(TextDoesNotContainFilter value)
        textDoesNotContain,
    required TResult Function(TextStartsWithFilter value) textStartsWith,
    required TResult Function(TextEndsWithFilter value) textEndsWith,
    required TResult Function(TextIsEmptyFilter value) textIsEmpty,
    required TResult Function(TextIsNotEmptyFilter value) textIsNotEmpty,
    required TResult Function(NumberEqualsFilter value) numberEquals,
    required TResult Function(NumberDoesNotEqualFilter value)
        numberDoesNotEqual,
    required TResult Function(NumberGreaterThanFilter value) numberGreaterThan,
    required TResult Function(NumberLessThanFilter value) numberLessThan,
    required TResult Function(NumberGreaterThanOrEqualFilter value)
        numberGreaterThanOrEqual,
    required TResult Function(NumberLessThanOrEqualFilter value)
        numberLessThanOrEqual,
    required TResult Function(NumberIsEmptyFilter value) numberIsEmpty,
    required TResult Function(NumberIsNotEmptyFilter value) numberIsNotEmpty,
    required TResult Function(CheckboxEqualsFilter value) checkboxEquals,
    required TResult Function(SelectEqualsFilter value) selectEquals,
    required TResult Function(SelectDoesNotEqualFilter value)
        selectDoesNotEqual,
    required TResult Function(SelectIsEmptyFilter value) selectIsEmpty,
    required TResult Function(SelectIsNotEmptyFilter value) selectIsNotEmpty,
    required TResult Function(MultiSelectContainsFilter value)
        multiSelectContains,
    required TResult Function(MultiSelectDoesNotContainFilter value)
        multiSelectDoesNotContain,
    required TResult Function(MultiSelectIsEmptyFilter value)
        multiSelectIsEmpty,
    required TResult Function(MultiSelectIsNotEmptyFilter value)
        multiSelectIsNotEmpty,
    required TResult Function(DateEqualsFilter value) dateEquals,
    required TResult Function(DateBeforeFilter value) dateBefore,
    required TResult Function(DateAfterFilter value) dateAfter,
    required TResult Function(DateOnOrBeforeFilter value) dateOnOrBefore,
    required TResult Function(DateOnOrAfterFilter value) dateOnOrAfter,
    required TResult Function(DateIsEmptyFilter value) dateIsEmpty,
    required TResult Function(DateIsNotEmptyFilter value) dateIsNotEmpty,
    required TResult Function(DatePastWeekFilter value) datePastWeek,
    required TResult Function(DatePastMonthFilter value) datePastMonth,
    required TResult Function(DatePastYearFilter value) datePastYear,
    required TResult Function(DateNextWeekFilter value) dateNextWeek,
    required TResult Function(DateNextMonthFilter value) dateNextMonth,
    required TResult Function(DateNextYearFilter value) dateNextYear,
    required TResult Function(PeopleContainsFilter value) peopleContains,
    required TResult Function(PeopleDoesNotContainFilter value)
        peopleDoesNotContain,
    required TResult Function(PeopleIsEmptyFilter value) peopleIsEmpty,
    required TResult Function(PeopleIsNotEmptyFilter value) peopleIsNotEmpty,
    required TResult Function(FilesIsEmptyFilter value) filesIsEmpty,
    required TResult Function(FilesIsNotEmptyFilter value) filesIsNotEmpty,
    required TResult Function(RelationContainsFilter value) relationContains,
    required TResult Function(RelationDoesNotContainFilter value)
        relationDoesNotContain,
    required TResult Function(RelationIsEmptyFilter value) relationIsEmpty,
    required TResult Function(RelationIsNotEmptyFilter value)
        relationIsNotEmpty,
  }) {
    return selectIsNotEmpty(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(TextEqualsFilter value)? textEquals,
    TResult? Function(TextDoesNotEqualFilter value)? textDoesNotEqual,
    TResult? Function(TextContainsFilter value)? textContains,
    TResult? Function(TextDoesNotContainFilter value)? textDoesNotContain,
    TResult? Function(TextStartsWithFilter value)? textStartsWith,
    TResult? Function(TextEndsWithFilter value)? textEndsWith,
    TResult? Function(TextIsEmptyFilter value)? textIsEmpty,
    TResult? Function(TextIsNotEmptyFilter value)? textIsNotEmpty,
    TResult? Function(NumberEqualsFilter value)? numberEquals,
    TResult? Function(NumberDoesNotEqualFilter value)? numberDoesNotEqual,
    TResult? Function(NumberGreaterThanFilter value)? numberGreaterThan,
    TResult? Function(NumberLessThanFilter value)? numberLessThan,
    TResult? Function(NumberGreaterThanOrEqualFilter value)?
        numberGreaterThanOrEqual,
    TResult? Function(NumberLessThanOrEqualFilter value)? numberLessThanOrEqual,
    TResult? Function(NumberIsEmptyFilter value)? numberIsEmpty,
    TResult? Function(NumberIsNotEmptyFilter value)? numberIsNotEmpty,
    TResult? Function(CheckboxEqualsFilter value)? checkboxEquals,
    TResult? Function(SelectEqualsFilter value)? selectEquals,
    TResult? Function(SelectDoesNotEqualFilter value)? selectDoesNotEqual,
    TResult? Function(SelectIsEmptyFilter value)? selectIsEmpty,
    TResult? Function(SelectIsNotEmptyFilter value)? selectIsNotEmpty,
    TResult? Function(MultiSelectContainsFilter value)? multiSelectContains,
    TResult? Function(MultiSelectDoesNotContainFilter value)?
        multiSelectDoesNotContain,
    TResult? Function(MultiSelectIsEmptyFilter value)? multiSelectIsEmpty,
    TResult? Function(MultiSelectIsNotEmptyFilter value)? multiSelectIsNotEmpty,
    TResult? Function(DateEqualsFilter value)? dateEquals,
    TResult? Function(DateBeforeFilter value)? dateBefore,
    TResult? Function(DateAfterFilter value)? dateAfter,
    TResult? Function(DateOnOrBeforeFilter value)? dateOnOrBefore,
    TResult? Function(DateOnOrAfterFilter value)? dateOnOrAfter,
    TResult? Function(DateIsEmptyFilter value)? dateIsEmpty,
    TResult? Function(DateIsNotEmptyFilter value)? dateIsNotEmpty,
    TResult? Function(DatePastWeekFilter value)? datePastWeek,
    TResult? Function(DatePastMonthFilter value)? datePastMonth,
    TResult? Function(DatePastYearFilter value)? datePastYear,
    TResult? Function(DateNextWeekFilter value)? dateNextWeek,
    TResult? Function(DateNextMonthFilter value)? dateNextMonth,
    TResult? Function(DateNextYearFilter value)? dateNextYear,
    TResult? Function(PeopleContainsFilter value)? peopleContains,
    TResult? Function(PeopleDoesNotContainFilter value)? peopleDoesNotContain,
    TResult? Function(PeopleIsEmptyFilter value)? peopleIsEmpty,
    TResult? Function(PeopleIsNotEmptyFilter value)? peopleIsNotEmpty,
    TResult? Function(FilesIsEmptyFilter value)? filesIsEmpty,
    TResult? Function(FilesIsNotEmptyFilter value)? filesIsNotEmpty,
    TResult? Function(RelationContainsFilter value)? relationContains,
    TResult? Function(RelationDoesNotContainFilter value)?
        relationDoesNotContain,
    TResult? Function(RelationIsEmptyFilter value)? relationIsEmpty,
    TResult? Function(RelationIsNotEmptyFilter value)? relationIsNotEmpty,
  }) {
    return selectIsNotEmpty?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(TextEqualsFilter value)? textEquals,
    TResult Function(TextDoesNotEqualFilter value)? textDoesNotEqual,
    TResult Function(TextContainsFilter value)? textContains,
    TResult Function(TextDoesNotContainFilter value)? textDoesNotContain,
    TResult Function(TextStartsWithFilter value)? textStartsWith,
    TResult Function(TextEndsWithFilter value)? textEndsWith,
    TResult Function(TextIsEmptyFilter value)? textIsEmpty,
    TResult Function(TextIsNotEmptyFilter value)? textIsNotEmpty,
    TResult Function(NumberEqualsFilter value)? numberEquals,
    TResult Function(NumberDoesNotEqualFilter value)? numberDoesNotEqual,
    TResult Function(NumberGreaterThanFilter value)? numberGreaterThan,
    TResult Function(NumberLessThanFilter value)? numberLessThan,
    TResult Function(NumberGreaterThanOrEqualFilter value)?
        numberGreaterThanOrEqual,
    TResult Function(NumberLessThanOrEqualFilter value)? numberLessThanOrEqual,
    TResult Function(NumberIsEmptyFilter value)? numberIsEmpty,
    TResult Function(NumberIsNotEmptyFilter value)? numberIsNotEmpty,
    TResult Function(CheckboxEqualsFilter value)? checkboxEquals,
    TResult Function(SelectEqualsFilter value)? selectEquals,
    TResult Function(SelectDoesNotEqualFilter value)? selectDoesNotEqual,
    TResult Function(SelectIsEmptyFilter value)? selectIsEmpty,
    TResult Function(SelectIsNotEmptyFilter value)? selectIsNotEmpty,
    TResult Function(MultiSelectContainsFilter value)? multiSelectContains,
    TResult Function(MultiSelectDoesNotContainFilter value)?
        multiSelectDoesNotContain,
    TResult Function(MultiSelectIsEmptyFilter value)? multiSelectIsEmpty,
    TResult Function(MultiSelectIsNotEmptyFilter value)? multiSelectIsNotEmpty,
    TResult Function(DateEqualsFilter value)? dateEquals,
    TResult Function(DateBeforeFilter value)? dateBefore,
    TResult Function(DateAfterFilter value)? dateAfter,
    TResult Function(DateOnOrBeforeFilter value)? dateOnOrBefore,
    TResult Function(DateOnOrAfterFilter value)? dateOnOrAfter,
    TResult Function(DateIsEmptyFilter value)? dateIsEmpty,
    TResult Function(DateIsNotEmptyFilter value)? dateIsNotEmpty,
    TResult Function(DatePastWeekFilter value)? datePastWeek,
    TResult Function(DatePastMonthFilter value)? datePastMonth,
    TResult Function(DatePastYearFilter value)? datePastYear,
    TResult Function(DateNextWeekFilter value)? dateNextWeek,
    TResult Function(DateNextMonthFilter value)? dateNextMonth,
    TResult Function(DateNextYearFilter value)? dateNextYear,
    TResult Function(PeopleContainsFilter value)? peopleContains,
    TResult Function(PeopleDoesNotContainFilter value)? peopleDoesNotContain,
    TResult Function(PeopleIsEmptyFilter value)? peopleIsEmpty,
    TResult Function(PeopleIsNotEmptyFilter value)? peopleIsNotEmpty,
    TResult Function(FilesIsEmptyFilter value)? filesIsEmpty,
    TResult Function(FilesIsNotEmptyFilter value)? filesIsNotEmpty,
    TResult Function(RelationContainsFilter value)? relationContains,
    TResult Function(RelationDoesNotContainFilter value)?
        relationDoesNotContain,
    TResult Function(RelationIsEmptyFilter value)? relationIsEmpty,
    TResult Function(RelationIsNotEmptyFilter value)? relationIsNotEmpty,
    required TResult orElse(),
  }) {
    if (selectIsNotEmpty != null) {
      return selectIsNotEmpty(this);
    }
    return orElse();
  }
}

abstract class SelectIsNotEmptyFilter extends PropertyFilter {
  const factory SelectIsNotEmptyFilter() = _$SelectIsNotEmptyFilterImpl;
  const SelectIsNotEmptyFilter._() : super._();
}

/// @nodoc
abstract class _$$MultiSelectContainsFilterImplCopyWith<$Res> {
  factory _$$MultiSelectContainsFilterImplCopyWith(
          _$MultiSelectContainsFilterImpl value,
          $Res Function(_$MultiSelectContainsFilterImpl) then) =
      __$$MultiSelectContainsFilterImplCopyWithImpl<$Res>;
  @useResult
  $Res call({String value});
}

/// @nodoc
class __$$MultiSelectContainsFilterImplCopyWithImpl<$Res>
    extends _$PropertyFilterCopyWithImpl<$Res, _$MultiSelectContainsFilterImpl>
    implements _$$MultiSelectContainsFilterImplCopyWith<$Res> {
  __$$MultiSelectContainsFilterImplCopyWithImpl(
      _$MultiSelectContainsFilterImpl _value,
      $Res Function(_$MultiSelectContainsFilterImpl) _then)
      : super(_value, _then);

  /// Create a copy of PropertyFilter
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? value = null,
  }) {
    return _then(_$MultiSelectContainsFilterImpl(
      null == value
          ? _value.value
          : value // ignore: cast_nullable_to_non_nullable
              as String,
    ));
  }
}

/// @nodoc

class _$MultiSelectContainsFilterImpl extends MultiSelectContainsFilter {
  const _$MultiSelectContainsFilterImpl(this.value) : super._();

  @override
  final String value;

  @override
  String toString() {
    return 'PropertyFilter.multiSelectContains(value: $value)';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$MultiSelectContainsFilterImpl &&
            (identical(other.value, value) || other.value == value));
  }

  @override
  int get hashCode => Object.hash(runtimeType, value);

  /// Create a copy of PropertyFilter
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  @pragma('vm:prefer-inline')
  _$$MultiSelectContainsFilterImplCopyWith<_$MultiSelectContainsFilterImpl>
      get copyWith => __$$MultiSelectContainsFilterImplCopyWithImpl<
          _$MultiSelectContainsFilterImpl>(this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function(String value) textEquals,
    required TResult Function(String value) textDoesNotEqual,
    required TResult Function(String value) textContains,
    required TResult Function(String value) textDoesNotContain,
    required TResult Function(String value) textStartsWith,
    required TResult Function(String value) textEndsWith,
    required TResult Function() textIsEmpty,
    required TResult Function() textIsNotEmpty,
    required TResult Function(double value) numberEquals,
    required TResult Function(double value) numberDoesNotEqual,
    required TResult Function(double value) numberGreaterThan,
    required TResult Function(double value) numberLessThan,
    required TResult Function(double value) numberGreaterThanOrEqual,
    required TResult Function(double value) numberLessThanOrEqual,
    required TResult Function() numberIsEmpty,
    required TResult Function() numberIsNotEmpty,
    required TResult Function(bool value) checkboxEquals,
    required TResult Function(String value) selectEquals,
    required TResult Function(String value) selectDoesNotEqual,
    required TResult Function() selectIsEmpty,
    required TResult Function() selectIsNotEmpty,
    required TResult Function(String value) multiSelectContains,
    required TResult Function(String value) multiSelectDoesNotContain,
    required TResult Function() multiSelectIsEmpty,
    required TResult Function() multiSelectIsNotEmpty,
    required TResult Function(String date) dateEquals,
    required TResult Function(String date) dateBefore,
    required TResult Function(String date) dateAfter,
    required TResult Function(String date) dateOnOrBefore,
    required TResult Function(String date) dateOnOrAfter,
    required TResult Function() dateIsEmpty,
    required TResult Function() dateIsNotEmpty,
    required TResult Function() datePastWeek,
    required TResult Function() datePastMonth,
    required TResult Function() datePastYear,
    required TResult Function() dateNextWeek,
    required TResult Function() dateNextMonth,
    required TResult Function() dateNextYear,
    required TResult Function(String userId) peopleContains,
    required TResult Function(String userId) peopleDoesNotContain,
    required TResult Function() peopleIsEmpty,
    required TResult Function() peopleIsNotEmpty,
    required TResult Function() filesIsEmpty,
    required TResult Function() filesIsNotEmpty,
    required TResult Function(String pageId) relationContains,
    required TResult Function(String pageId) relationDoesNotContain,
    required TResult Function() relationIsEmpty,
    required TResult Function() relationIsNotEmpty,
  }) {
    return multiSelectContains(value);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function(String value)? textEquals,
    TResult? Function(String value)? textDoesNotEqual,
    TResult? Function(String value)? textContains,
    TResult? Function(String value)? textDoesNotContain,
    TResult? Function(String value)? textStartsWith,
    TResult? Function(String value)? textEndsWith,
    TResult? Function()? textIsEmpty,
    TResult? Function()? textIsNotEmpty,
    TResult? Function(double value)? numberEquals,
    TResult? Function(double value)? numberDoesNotEqual,
    TResult? Function(double value)? numberGreaterThan,
    TResult? Function(double value)? numberLessThan,
    TResult? Function(double value)? numberGreaterThanOrEqual,
    TResult? Function(double value)? numberLessThanOrEqual,
    TResult? Function()? numberIsEmpty,
    TResult? Function()? numberIsNotEmpty,
    TResult? Function(bool value)? checkboxEquals,
    TResult? Function(String value)? selectEquals,
    TResult? Function(String value)? selectDoesNotEqual,
    TResult? Function()? selectIsEmpty,
    TResult? Function()? selectIsNotEmpty,
    TResult? Function(String value)? multiSelectContains,
    TResult? Function(String value)? multiSelectDoesNotContain,
    TResult? Function()? multiSelectIsEmpty,
    TResult? Function()? multiSelectIsNotEmpty,
    TResult? Function(String date)? dateEquals,
    TResult? Function(String date)? dateBefore,
    TResult? Function(String date)? dateAfter,
    TResult? Function(String date)? dateOnOrBefore,
    TResult? Function(String date)? dateOnOrAfter,
    TResult? Function()? dateIsEmpty,
    TResult? Function()? dateIsNotEmpty,
    TResult? Function()? datePastWeek,
    TResult? Function()? datePastMonth,
    TResult? Function()? datePastYear,
    TResult? Function()? dateNextWeek,
    TResult? Function()? dateNextMonth,
    TResult? Function()? dateNextYear,
    TResult? Function(String userId)? peopleContains,
    TResult? Function(String userId)? peopleDoesNotContain,
    TResult? Function()? peopleIsEmpty,
    TResult? Function()? peopleIsNotEmpty,
    TResult? Function()? filesIsEmpty,
    TResult? Function()? filesIsNotEmpty,
    TResult? Function(String pageId)? relationContains,
    TResult? Function(String pageId)? relationDoesNotContain,
    TResult? Function()? relationIsEmpty,
    TResult? Function()? relationIsNotEmpty,
  }) {
    return multiSelectContains?.call(value);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function(String value)? textEquals,
    TResult Function(String value)? textDoesNotEqual,
    TResult Function(String value)? textContains,
    TResult Function(String value)? textDoesNotContain,
    TResult Function(String value)? textStartsWith,
    TResult Function(String value)? textEndsWith,
    TResult Function()? textIsEmpty,
    TResult Function()? textIsNotEmpty,
    TResult Function(double value)? numberEquals,
    TResult Function(double value)? numberDoesNotEqual,
    TResult Function(double value)? numberGreaterThan,
    TResult Function(double value)? numberLessThan,
    TResult Function(double value)? numberGreaterThanOrEqual,
    TResult Function(double value)? numberLessThanOrEqual,
    TResult Function()? numberIsEmpty,
    TResult Function()? numberIsNotEmpty,
    TResult Function(bool value)? checkboxEquals,
    TResult Function(String value)? selectEquals,
    TResult Function(String value)? selectDoesNotEqual,
    TResult Function()? selectIsEmpty,
    TResult Function()? selectIsNotEmpty,
    TResult Function(String value)? multiSelectContains,
    TResult Function(String value)? multiSelectDoesNotContain,
    TResult Function()? multiSelectIsEmpty,
    TResult Function()? multiSelectIsNotEmpty,
    TResult Function(String date)? dateEquals,
    TResult Function(String date)? dateBefore,
    TResult Function(String date)? dateAfter,
    TResult Function(String date)? dateOnOrBefore,
    TResult Function(String date)? dateOnOrAfter,
    TResult Function()? dateIsEmpty,
    TResult Function()? dateIsNotEmpty,
    TResult Function()? datePastWeek,
    TResult Function()? datePastMonth,
    TResult Function()? datePastYear,
    TResult Function()? dateNextWeek,
    TResult Function()? dateNextMonth,
    TResult Function()? dateNextYear,
    TResult Function(String userId)? peopleContains,
    TResult Function(String userId)? peopleDoesNotContain,
    TResult Function()? peopleIsEmpty,
    TResult Function()? peopleIsNotEmpty,
    TResult Function()? filesIsEmpty,
    TResult Function()? filesIsNotEmpty,
    TResult Function(String pageId)? relationContains,
    TResult Function(String pageId)? relationDoesNotContain,
    TResult Function()? relationIsEmpty,
    TResult Function()? relationIsNotEmpty,
    required TResult orElse(),
  }) {
    if (multiSelectContains != null) {
      return multiSelectContains(value);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(TextEqualsFilter value) textEquals,
    required TResult Function(TextDoesNotEqualFilter value) textDoesNotEqual,
    required TResult Function(TextContainsFilter value) textContains,
    required TResult Function(TextDoesNotContainFilter value)
        textDoesNotContain,
    required TResult Function(TextStartsWithFilter value) textStartsWith,
    required TResult Function(TextEndsWithFilter value) textEndsWith,
    required TResult Function(TextIsEmptyFilter value) textIsEmpty,
    required TResult Function(TextIsNotEmptyFilter value) textIsNotEmpty,
    required TResult Function(NumberEqualsFilter value) numberEquals,
    required TResult Function(NumberDoesNotEqualFilter value)
        numberDoesNotEqual,
    required TResult Function(NumberGreaterThanFilter value) numberGreaterThan,
    required TResult Function(NumberLessThanFilter value) numberLessThan,
    required TResult Function(NumberGreaterThanOrEqualFilter value)
        numberGreaterThanOrEqual,
    required TResult Function(NumberLessThanOrEqualFilter value)
        numberLessThanOrEqual,
    required TResult Function(NumberIsEmptyFilter value) numberIsEmpty,
    required TResult Function(NumberIsNotEmptyFilter value) numberIsNotEmpty,
    required TResult Function(CheckboxEqualsFilter value) checkboxEquals,
    required TResult Function(SelectEqualsFilter value) selectEquals,
    required TResult Function(SelectDoesNotEqualFilter value)
        selectDoesNotEqual,
    required TResult Function(SelectIsEmptyFilter value) selectIsEmpty,
    required TResult Function(SelectIsNotEmptyFilter value) selectIsNotEmpty,
    required TResult Function(MultiSelectContainsFilter value)
        multiSelectContains,
    required TResult Function(MultiSelectDoesNotContainFilter value)
        multiSelectDoesNotContain,
    required TResult Function(MultiSelectIsEmptyFilter value)
        multiSelectIsEmpty,
    required TResult Function(MultiSelectIsNotEmptyFilter value)
        multiSelectIsNotEmpty,
    required TResult Function(DateEqualsFilter value) dateEquals,
    required TResult Function(DateBeforeFilter value) dateBefore,
    required TResult Function(DateAfterFilter value) dateAfter,
    required TResult Function(DateOnOrBeforeFilter value) dateOnOrBefore,
    required TResult Function(DateOnOrAfterFilter value) dateOnOrAfter,
    required TResult Function(DateIsEmptyFilter value) dateIsEmpty,
    required TResult Function(DateIsNotEmptyFilter value) dateIsNotEmpty,
    required TResult Function(DatePastWeekFilter value) datePastWeek,
    required TResult Function(DatePastMonthFilter value) datePastMonth,
    required TResult Function(DatePastYearFilter value) datePastYear,
    required TResult Function(DateNextWeekFilter value) dateNextWeek,
    required TResult Function(DateNextMonthFilter value) dateNextMonth,
    required TResult Function(DateNextYearFilter value) dateNextYear,
    required TResult Function(PeopleContainsFilter value) peopleContains,
    required TResult Function(PeopleDoesNotContainFilter value)
        peopleDoesNotContain,
    required TResult Function(PeopleIsEmptyFilter value) peopleIsEmpty,
    required TResult Function(PeopleIsNotEmptyFilter value) peopleIsNotEmpty,
    required TResult Function(FilesIsEmptyFilter value) filesIsEmpty,
    required TResult Function(FilesIsNotEmptyFilter value) filesIsNotEmpty,
    required TResult Function(RelationContainsFilter value) relationContains,
    required TResult Function(RelationDoesNotContainFilter value)
        relationDoesNotContain,
    required TResult Function(RelationIsEmptyFilter value) relationIsEmpty,
    required TResult Function(RelationIsNotEmptyFilter value)
        relationIsNotEmpty,
  }) {
    return multiSelectContains(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(TextEqualsFilter value)? textEquals,
    TResult? Function(TextDoesNotEqualFilter value)? textDoesNotEqual,
    TResult? Function(TextContainsFilter value)? textContains,
    TResult? Function(TextDoesNotContainFilter value)? textDoesNotContain,
    TResult? Function(TextStartsWithFilter value)? textStartsWith,
    TResult? Function(TextEndsWithFilter value)? textEndsWith,
    TResult? Function(TextIsEmptyFilter value)? textIsEmpty,
    TResult? Function(TextIsNotEmptyFilter value)? textIsNotEmpty,
    TResult? Function(NumberEqualsFilter value)? numberEquals,
    TResult? Function(NumberDoesNotEqualFilter value)? numberDoesNotEqual,
    TResult? Function(NumberGreaterThanFilter value)? numberGreaterThan,
    TResult? Function(NumberLessThanFilter value)? numberLessThan,
    TResult? Function(NumberGreaterThanOrEqualFilter value)?
        numberGreaterThanOrEqual,
    TResult? Function(NumberLessThanOrEqualFilter value)? numberLessThanOrEqual,
    TResult? Function(NumberIsEmptyFilter value)? numberIsEmpty,
    TResult? Function(NumberIsNotEmptyFilter value)? numberIsNotEmpty,
    TResult? Function(CheckboxEqualsFilter value)? checkboxEquals,
    TResult? Function(SelectEqualsFilter value)? selectEquals,
    TResult? Function(SelectDoesNotEqualFilter value)? selectDoesNotEqual,
    TResult? Function(SelectIsEmptyFilter value)? selectIsEmpty,
    TResult? Function(SelectIsNotEmptyFilter value)? selectIsNotEmpty,
    TResult? Function(MultiSelectContainsFilter value)? multiSelectContains,
    TResult? Function(MultiSelectDoesNotContainFilter value)?
        multiSelectDoesNotContain,
    TResult? Function(MultiSelectIsEmptyFilter value)? multiSelectIsEmpty,
    TResult? Function(MultiSelectIsNotEmptyFilter value)? multiSelectIsNotEmpty,
    TResult? Function(DateEqualsFilter value)? dateEquals,
    TResult? Function(DateBeforeFilter value)? dateBefore,
    TResult? Function(DateAfterFilter value)? dateAfter,
    TResult? Function(DateOnOrBeforeFilter value)? dateOnOrBefore,
    TResult? Function(DateOnOrAfterFilter value)? dateOnOrAfter,
    TResult? Function(DateIsEmptyFilter value)? dateIsEmpty,
    TResult? Function(DateIsNotEmptyFilter value)? dateIsNotEmpty,
    TResult? Function(DatePastWeekFilter value)? datePastWeek,
    TResult? Function(DatePastMonthFilter value)? datePastMonth,
    TResult? Function(DatePastYearFilter value)? datePastYear,
    TResult? Function(DateNextWeekFilter value)? dateNextWeek,
    TResult? Function(DateNextMonthFilter value)? dateNextMonth,
    TResult? Function(DateNextYearFilter value)? dateNextYear,
    TResult? Function(PeopleContainsFilter value)? peopleContains,
    TResult? Function(PeopleDoesNotContainFilter value)? peopleDoesNotContain,
    TResult? Function(PeopleIsEmptyFilter value)? peopleIsEmpty,
    TResult? Function(PeopleIsNotEmptyFilter value)? peopleIsNotEmpty,
    TResult? Function(FilesIsEmptyFilter value)? filesIsEmpty,
    TResult? Function(FilesIsNotEmptyFilter value)? filesIsNotEmpty,
    TResult? Function(RelationContainsFilter value)? relationContains,
    TResult? Function(RelationDoesNotContainFilter value)?
        relationDoesNotContain,
    TResult? Function(RelationIsEmptyFilter value)? relationIsEmpty,
    TResult? Function(RelationIsNotEmptyFilter value)? relationIsNotEmpty,
  }) {
    return multiSelectContains?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(TextEqualsFilter value)? textEquals,
    TResult Function(TextDoesNotEqualFilter value)? textDoesNotEqual,
    TResult Function(TextContainsFilter value)? textContains,
    TResult Function(TextDoesNotContainFilter value)? textDoesNotContain,
    TResult Function(TextStartsWithFilter value)? textStartsWith,
    TResult Function(TextEndsWithFilter value)? textEndsWith,
    TResult Function(TextIsEmptyFilter value)? textIsEmpty,
    TResult Function(TextIsNotEmptyFilter value)? textIsNotEmpty,
    TResult Function(NumberEqualsFilter value)? numberEquals,
    TResult Function(NumberDoesNotEqualFilter value)? numberDoesNotEqual,
    TResult Function(NumberGreaterThanFilter value)? numberGreaterThan,
    TResult Function(NumberLessThanFilter value)? numberLessThan,
    TResult Function(NumberGreaterThanOrEqualFilter value)?
        numberGreaterThanOrEqual,
    TResult Function(NumberLessThanOrEqualFilter value)? numberLessThanOrEqual,
    TResult Function(NumberIsEmptyFilter value)? numberIsEmpty,
    TResult Function(NumberIsNotEmptyFilter value)? numberIsNotEmpty,
    TResult Function(CheckboxEqualsFilter value)? checkboxEquals,
    TResult Function(SelectEqualsFilter value)? selectEquals,
    TResult Function(SelectDoesNotEqualFilter value)? selectDoesNotEqual,
    TResult Function(SelectIsEmptyFilter value)? selectIsEmpty,
    TResult Function(SelectIsNotEmptyFilter value)? selectIsNotEmpty,
    TResult Function(MultiSelectContainsFilter value)? multiSelectContains,
    TResult Function(MultiSelectDoesNotContainFilter value)?
        multiSelectDoesNotContain,
    TResult Function(MultiSelectIsEmptyFilter value)? multiSelectIsEmpty,
    TResult Function(MultiSelectIsNotEmptyFilter value)? multiSelectIsNotEmpty,
    TResult Function(DateEqualsFilter value)? dateEquals,
    TResult Function(DateBeforeFilter value)? dateBefore,
    TResult Function(DateAfterFilter value)? dateAfter,
    TResult Function(DateOnOrBeforeFilter value)? dateOnOrBefore,
    TResult Function(DateOnOrAfterFilter value)? dateOnOrAfter,
    TResult Function(DateIsEmptyFilter value)? dateIsEmpty,
    TResult Function(DateIsNotEmptyFilter value)? dateIsNotEmpty,
    TResult Function(DatePastWeekFilter value)? datePastWeek,
    TResult Function(DatePastMonthFilter value)? datePastMonth,
    TResult Function(DatePastYearFilter value)? datePastYear,
    TResult Function(DateNextWeekFilter value)? dateNextWeek,
    TResult Function(DateNextMonthFilter value)? dateNextMonth,
    TResult Function(DateNextYearFilter value)? dateNextYear,
    TResult Function(PeopleContainsFilter value)? peopleContains,
    TResult Function(PeopleDoesNotContainFilter value)? peopleDoesNotContain,
    TResult Function(PeopleIsEmptyFilter value)? peopleIsEmpty,
    TResult Function(PeopleIsNotEmptyFilter value)? peopleIsNotEmpty,
    TResult Function(FilesIsEmptyFilter value)? filesIsEmpty,
    TResult Function(FilesIsNotEmptyFilter value)? filesIsNotEmpty,
    TResult Function(RelationContainsFilter value)? relationContains,
    TResult Function(RelationDoesNotContainFilter value)?
        relationDoesNotContain,
    TResult Function(RelationIsEmptyFilter value)? relationIsEmpty,
    TResult Function(RelationIsNotEmptyFilter value)? relationIsNotEmpty,
    required TResult orElse(),
  }) {
    if (multiSelectContains != null) {
      return multiSelectContains(this);
    }
    return orElse();
  }
}

abstract class MultiSelectContainsFilter extends PropertyFilter {
  const factory MultiSelectContainsFilter(final String value) =
      _$MultiSelectContainsFilterImpl;
  const MultiSelectContainsFilter._() : super._();

  String get value;

  /// Create a copy of PropertyFilter
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  _$$MultiSelectContainsFilterImplCopyWith<_$MultiSelectContainsFilterImpl>
      get copyWith => throw _privateConstructorUsedError;
}

/// @nodoc
abstract class _$$MultiSelectDoesNotContainFilterImplCopyWith<$Res> {
  factory _$$MultiSelectDoesNotContainFilterImplCopyWith(
          _$MultiSelectDoesNotContainFilterImpl value,
          $Res Function(_$MultiSelectDoesNotContainFilterImpl) then) =
      __$$MultiSelectDoesNotContainFilterImplCopyWithImpl<$Res>;
  @useResult
  $Res call({String value});
}

/// @nodoc
class __$$MultiSelectDoesNotContainFilterImplCopyWithImpl<$Res>
    extends _$PropertyFilterCopyWithImpl<$Res,
        _$MultiSelectDoesNotContainFilterImpl>
    implements _$$MultiSelectDoesNotContainFilterImplCopyWith<$Res> {
  __$$MultiSelectDoesNotContainFilterImplCopyWithImpl(
      _$MultiSelectDoesNotContainFilterImpl _value,
      $Res Function(_$MultiSelectDoesNotContainFilterImpl) _then)
      : super(_value, _then);

  /// Create a copy of PropertyFilter
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? value = null,
  }) {
    return _then(_$MultiSelectDoesNotContainFilterImpl(
      null == value
          ? _value.value
          : value // ignore: cast_nullable_to_non_nullable
              as String,
    ));
  }
}

/// @nodoc

class _$MultiSelectDoesNotContainFilterImpl
    extends MultiSelectDoesNotContainFilter {
  const _$MultiSelectDoesNotContainFilterImpl(this.value) : super._();

  @override
  final String value;

  @override
  String toString() {
    return 'PropertyFilter.multiSelectDoesNotContain(value: $value)';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$MultiSelectDoesNotContainFilterImpl &&
            (identical(other.value, value) || other.value == value));
  }

  @override
  int get hashCode => Object.hash(runtimeType, value);

  /// Create a copy of PropertyFilter
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  @pragma('vm:prefer-inline')
  _$$MultiSelectDoesNotContainFilterImplCopyWith<
          _$MultiSelectDoesNotContainFilterImpl>
      get copyWith => __$$MultiSelectDoesNotContainFilterImplCopyWithImpl<
          _$MultiSelectDoesNotContainFilterImpl>(this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function(String value) textEquals,
    required TResult Function(String value) textDoesNotEqual,
    required TResult Function(String value) textContains,
    required TResult Function(String value) textDoesNotContain,
    required TResult Function(String value) textStartsWith,
    required TResult Function(String value) textEndsWith,
    required TResult Function() textIsEmpty,
    required TResult Function() textIsNotEmpty,
    required TResult Function(double value) numberEquals,
    required TResult Function(double value) numberDoesNotEqual,
    required TResult Function(double value) numberGreaterThan,
    required TResult Function(double value) numberLessThan,
    required TResult Function(double value) numberGreaterThanOrEqual,
    required TResult Function(double value) numberLessThanOrEqual,
    required TResult Function() numberIsEmpty,
    required TResult Function() numberIsNotEmpty,
    required TResult Function(bool value) checkboxEquals,
    required TResult Function(String value) selectEquals,
    required TResult Function(String value) selectDoesNotEqual,
    required TResult Function() selectIsEmpty,
    required TResult Function() selectIsNotEmpty,
    required TResult Function(String value) multiSelectContains,
    required TResult Function(String value) multiSelectDoesNotContain,
    required TResult Function() multiSelectIsEmpty,
    required TResult Function() multiSelectIsNotEmpty,
    required TResult Function(String date) dateEquals,
    required TResult Function(String date) dateBefore,
    required TResult Function(String date) dateAfter,
    required TResult Function(String date) dateOnOrBefore,
    required TResult Function(String date) dateOnOrAfter,
    required TResult Function() dateIsEmpty,
    required TResult Function() dateIsNotEmpty,
    required TResult Function() datePastWeek,
    required TResult Function() datePastMonth,
    required TResult Function() datePastYear,
    required TResult Function() dateNextWeek,
    required TResult Function() dateNextMonth,
    required TResult Function() dateNextYear,
    required TResult Function(String userId) peopleContains,
    required TResult Function(String userId) peopleDoesNotContain,
    required TResult Function() peopleIsEmpty,
    required TResult Function() peopleIsNotEmpty,
    required TResult Function() filesIsEmpty,
    required TResult Function() filesIsNotEmpty,
    required TResult Function(String pageId) relationContains,
    required TResult Function(String pageId) relationDoesNotContain,
    required TResult Function() relationIsEmpty,
    required TResult Function() relationIsNotEmpty,
  }) {
    return multiSelectDoesNotContain(value);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function(String value)? textEquals,
    TResult? Function(String value)? textDoesNotEqual,
    TResult? Function(String value)? textContains,
    TResult? Function(String value)? textDoesNotContain,
    TResult? Function(String value)? textStartsWith,
    TResult? Function(String value)? textEndsWith,
    TResult? Function()? textIsEmpty,
    TResult? Function()? textIsNotEmpty,
    TResult? Function(double value)? numberEquals,
    TResult? Function(double value)? numberDoesNotEqual,
    TResult? Function(double value)? numberGreaterThan,
    TResult? Function(double value)? numberLessThan,
    TResult? Function(double value)? numberGreaterThanOrEqual,
    TResult? Function(double value)? numberLessThanOrEqual,
    TResult? Function()? numberIsEmpty,
    TResult? Function()? numberIsNotEmpty,
    TResult? Function(bool value)? checkboxEquals,
    TResult? Function(String value)? selectEquals,
    TResult? Function(String value)? selectDoesNotEqual,
    TResult? Function()? selectIsEmpty,
    TResult? Function()? selectIsNotEmpty,
    TResult? Function(String value)? multiSelectContains,
    TResult? Function(String value)? multiSelectDoesNotContain,
    TResult? Function()? multiSelectIsEmpty,
    TResult? Function()? multiSelectIsNotEmpty,
    TResult? Function(String date)? dateEquals,
    TResult? Function(String date)? dateBefore,
    TResult? Function(String date)? dateAfter,
    TResult? Function(String date)? dateOnOrBefore,
    TResult? Function(String date)? dateOnOrAfter,
    TResult? Function()? dateIsEmpty,
    TResult? Function()? dateIsNotEmpty,
    TResult? Function()? datePastWeek,
    TResult? Function()? datePastMonth,
    TResult? Function()? datePastYear,
    TResult? Function()? dateNextWeek,
    TResult? Function()? dateNextMonth,
    TResult? Function()? dateNextYear,
    TResult? Function(String userId)? peopleContains,
    TResult? Function(String userId)? peopleDoesNotContain,
    TResult? Function()? peopleIsEmpty,
    TResult? Function()? peopleIsNotEmpty,
    TResult? Function()? filesIsEmpty,
    TResult? Function()? filesIsNotEmpty,
    TResult? Function(String pageId)? relationContains,
    TResult? Function(String pageId)? relationDoesNotContain,
    TResult? Function()? relationIsEmpty,
    TResult? Function()? relationIsNotEmpty,
  }) {
    return multiSelectDoesNotContain?.call(value);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function(String value)? textEquals,
    TResult Function(String value)? textDoesNotEqual,
    TResult Function(String value)? textContains,
    TResult Function(String value)? textDoesNotContain,
    TResult Function(String value)? textStartsWith,
    TResult Function(String value)? textEndsWith,
    TResult Function()? textIsEmpty,
    TResult Function()? textIsNotEmpty,
    TResult Function(double value)? numberEquals,
    TResult Function(double value)? numberDoesNotEqual,
    TResult Function(double value)? numberGreaterThan,
    TResult Function(double value)? numberLessThan,
    TResult Function(double value)? numberGreaterThanOrEqual,
    TResult Function(double value)? numberLessThanOrEqual,
    TResult Function()? numberIsEmpty,
    TResult Function()? numberIsNotEmpty,
    TResult Function(bool value)? checkboxEquals,
    TResult Function(String value)? selectEquals,
    TResult Function(String value)? selectDoesNotEqual,
    TResult Function()? selectIsEmpty,
    TResult Function()? selectIsNotEmpty,
    TResult Function(String value)? multiSelectContains,
    TResult Function(String value)? multiSelectDoesNotContain,
    TResult Function()? multiSelectIsEmpty,
    TResult Function()? multiSelectIsNotEmpty,
    TResult Function(String date)? dateEquals,
    TResult Function(String date)? dateBefore,
    TResult Function(String date)? dateAfter,
    TResult Function(String date)? dateOnOrBefore,
    TResult Function(String date)? dateOnOrAfter,
    TResult Function()? dateIsEmpty,
    TResult Function()? dateIsNotEmpty,
    TResult Function()? datePastWeek,
    TResult Function()? datePastMonth,
    TResult Function()? datePastYear,
    TResult Function()? dateNextWeek,
    TResult Function()? dateNextMonth,
    TResult Function()? dateNextYear,
    TResult Function(String userId)? peopleContains,
    TResult Function(String userId)? peopleDoesNotContain,
    TResult Function()? peopleIsEmpty,
    TResult Function()? peopleIsNotEmpty,
    TResult Function()? filesIsEmpty,
    TResult Function()? filesIsNotEmpty,
    TResult Function(String pageId)? relationContains,
    TResult Function(String pageId)? relationDoesNotContain,
    TResult Function()? relationIsEmpty,
    TResult Function()? relationIsNotEmpty,
    required TResult orElse(),
  }) {
    if (multiSelectDoesNotContain != null) {
      return multiSelectDoesNotContain(value);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(TextEqualsFilter value) textEquals,
    required TResult Function(TextDoesNotEqualFilter value) textDoesNotEqual,
    required TResult Function(TextContainsFilter value) textContains,
    required TResult Function(TextDoesNotContainFilter value)
        textDoesNotContain,
    required TResult Function(TextStartsWithFilter value) textStartsWith,
    required TResult Function(TextEndsWithFilter value) textEndsWith,
    required TResult Function(TextIsEmptyFilter value) textIsEmpty,
    required TResult Function(TextIsNotEmptyFilter value) textIsNotEmpty,
    required TResult Function(NumberEqualsFilter value) numberEquals,
    required TResult Function(NumberDoesNotEqualFilter value)
        numberDoesNotEqual,
    required TResult Function(NumberGreaterThanFilter value) numberGreaterThan,
    required TResult Function(NumberLessThanFilter value) numberLessThan,
    required TResult Function(NumberGreaterThanOrEqualFilter value)
        numberGreaterThanOrEqual,
    required TResult Function(NumberLessThanOrEqualFilter value)
        numberLessThanOrEqual,
    required TResult Function(NumberIsEmptyFilter value) numberIsEmpty,
    required TResult Function(NumberIsNotEmptyFilter value) numberIsNotEmpty,
    required TResult Function(CheckboxEqualsFilter value) checkboxEquals,
    required TResult Function(SelectEqualsFilter value) selectEquals,
    required TResult Function(SelectDoesNotEqualFilter value)
        selectDoesNotEqual,
    required TResult Function(SelectIsEmptyFilter value) selectIsEmpty,
    required TResult Function(SelectIsNotEmptyFilter value) selectIsNotEmpty,
    required TResult Function(MultiSelectContainsFilter value)
        multiSelectContains,
    required TResult Function(MultiSelectDoesNotContainFilter value)
        multiSelectDoesNotContain,
    required TResult Function(MultiSelectIsEmptyFilter value)
        multiSelectIsEmpty,
    required TResult Function(MultiSelectIsNotEmptyFilter value)
        multiSelectIsNotEmpty,
    required TResult Function(DateEqualsFilter value) dateEquals,
    required TResult Function(DateBeforeFilter value) dateBefore,
    required TResult Function(DateAfterFilter value) dateAfter,
    required TResult Function(DateOnOrBeforeFilter value) dateOnOrBefore,
    required TResult Function(DateOnOrAfterFilter value) dateOnOrAfter,
    required TResult Function(DateIsEmptyFilter value) dateIsEmpty,
    required TResult Function(DateIsNotEmptyFilter value) dateIsNotEmpty,
    required TResult Function(DatePastWeekFilter value) datePastWeek,
    required TResult Function(DatePastMonthFilter value) datePastMonth,
    required TResult Function(DatePastYearFilter value) datePastYear,
    required TResult Function(DateNextWeekFilter value) dateNextWeek,
    required TResult Function(DateNextMonthFilter value) dateNextMonth,
    required TResult Function(DateNextYearFilter value) dateNextYear,
    required TResult Function(PeopleContainsFilter value) peopleContains,
    required TResult Function(PeopleDoesNotContainFilter value)
        peopleDoesNotContain,
    required TResult Function(PeopleIsEmptyFilter value) peopleIsEmpty,
    required TResult Function(PeopleIsNotEmptyFilter value) peopleIsNotEmpty,
    required TResult Function(FilesIsEmptyFilter value) filesIsEmpty,
    required TResult Function(FilesIsNotEmptyFilter value) filesIsNotEmpty,
    required TResult Function(RelationContainsFilter value) relationContains,
    required TResult Function(RelationDoesNotContainFilter value)
        relationDoesNotContain,
    required TResult Function(RelationIsEmptyFilter value) relationIsEmpty,
    required TResult Function(RelationIsNotEmptyFilter value)
        relationIsNotEmpty,
  }) {
    return multiSelectDoesNotContain(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(TextEqualsFilter value)? textEquals,
    TResult? Function(TextDoesNotEqualFilter value)? textDoesNotEqual,
    TResult? Function(TextContainsFilter value)? textContains,
    TResult? Function(TextDoesNotContainFilter value)? textDoesNotContain,
    TResult? Function(TextStartsWithFilter value)? textStartsWith,
    TResult? Function(TextEndsWithFilter value)? textEndsWith,
    TResult? Function(TextIsEmptyFilter value)? textIsEmpty,
    TResult? Function(TextIsNotEmptyFilter value)? textIsNotEmpty,
    TResult? Function(NumberEqualsFilter value)? numberEquals,
    TResult? Function(NumberDoesNotEqualFilter value)? numberDoesNotEqual,
    TResult? Function(NumberGreaterThanFilter value)? numberGreaterThan,
    TResult? Function(NumberLessThanFilter value)? numberLessThan,
    TResult? Function(NumberGreaterThanOrEqualFilter value)?
        numberGreaterThanOrEqual,
    TResult? Function(NumberLessThanOrEqualFilter value)? numberLessThanOrEqual,
    TResult? Function(NumberIsEmptyFilter value)? numberIsEmpty,
    TResult? Function(NumberIsNotEmptyFilter value)? numberIsNotEmpty,
    TResult? Function(CheckboxEqualsFilter value)? checkboxEquals,
    TResult? Function(SelectEqualsFilter value)? selectEquals,
    TResult? Function(SelectDoesNotEqualFilter value)? selectDoesNotEqual,
    TResult? Function(SelectIsEmptyFilter value)? selectIsEmpty,
    TResult? Function(SelectIsNotEmptyFilter value)? selectIsNotEmpty,
    TResult? Function(MultiSelectContainsFilter value)? multiSelectContains,
    TResult? Function(MultiSelectDoesNotContainFilter value)?
        multiSelectDoesNotContain,
    TResult? Function(MultiSelectIsEmptyFilter value)? multiSelectIsEmpty,
    TResult? Function(MultiSelectIsNotEmptyFilter value)? multiSelectIsNotEmpty,
    TResult? Function(DateEqualsFilter value)? dateEquals,
    TResult? Function(DateBeforeFilter value)? dateBefore,
    TResult? Function(DateAfterFilter value)? dateAfter,
    TResult? Function(DateOnOrBeforeFilter value)? dateOnOrBefore,
    TResult? Function(DateOnOrAfterFilter value)? dateOnOrAfter,
    TResult? Function(DateIsEmptyFilter value)? dateIsEmpty,
    TResult? Function(DateIsNotEmptyFilter value)? dateIsNotEmpty,
    TResult? Function(DatePastWeekFilter value)? datePastWeek,
    TResult? Function(DatePastMonthFilter value)? datePastMonth,
    TResult? Function(DatePastYearFilter value)? datePastYear,
    TResult? Function(DateNextWeekFilter value)? dateNextWeek,
    TResult? Function(DateNextMonthFilter value)? dateNextMonth,
    TResult? Function(DateNextYearFilter value)? dateNextYear,
    TResult? Function(PeopleContainsFilter value)? peopleContains,
    TResult? Function(PeopleDoesNotContainFilter value)? peopleDoesNotContain,
    TResult? Function(PeopleIsEmptyFilter value)? peopleIsEmpty,
    TResult? Function(PeopleIsNotEmptyFilter value)? peopleIsNotEmpty,
    TResult? Function(FilesIsEmptyFilter value)? filesIsEmpty,
    TResult? Function(FilesIsNotEmptyFilter value)? filesIsNotEmpty,
    TResult? Function(RelationContainsFilter value)? relationContains,
    TResult? Function(RelationDoesNotContainFilter value)?
        relationDoesNotContain,
    TResult? Function(RelationIsEmptyFilter value)? relationIsEmpty,
    TResult? Function(RelationIsNotEmptyFilter value)? relationIsNotEmpty,
  }) {
    return multiSelectDoesNotContain?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(TextEqualsFilter value)? textEquals,
    TResult Function(TextDoesNotEqualFilter value)? textDoesNotEqual,
    TResult Function(TextContainsFilter value)? textContains,
    TResult Function(TextDoesNotContainFilter value)? textDoesNotContain,
    TResult Function(TextStartsWithFilter value)? textStartsWith,
    TResult Function(TextEndsWithFilter value)? textEndsWith,
    TResult Function(TextIsEmptyFilter value)? textIsEmpty,
    TResult Function(TextIsNotEmptyFilter value)? textIsNotEmpty,
    TResult Function(NumberEqualsFilter value)? numberEquals,
    TResult Function(NumberDoesNotEqualFilter value)? numberDoesNotEqual,
    TResult Function(NumberGreaterThanFilter value)? numberGreaterThan,
    TResult Function(NumberLessThanFilter value)? numberLessThan,
    TResult Function(NumberGreaterThanOrEqualFilter value)?
        numberGreaterThanOrEqual,
    TResult Function(NumberLessThanOrEqualFilter value)? numberLessThanOrEqual,
    TResult Function(NumberIsEmptyFilter value)? numberIsEmpty,
    TResult Function(NumberIsNotEmptyFilter value)? numberIsNotEmpty,
    TResult Function(CheckboxEqualsFilter value)? checkboxEquals,
    TResult Function(SelectEqualsFilter value)? selectEquals,
    TResult Function(SelectDoesNotEqualFilter value)? selectDoesNotEqual,
    TResult Function(SelectIsEmptyFilter value)? selectIsEmpty,
    TResult Function(SelectIsNotEmptyFilter value)? selectIsNotEmpty,
    TResult Function(MultiSelectContainsFilter value)? multiSelectContains,
    TResult Function(MultiSelectDoesNotContainFilter value)?
        multiSelectDoesNotContain,
    TResult Function(MultiSelectIsEmptyFilter value)? multiSelectIsEmpty,
    TResult Function(MultiSelectIsNotEmptyFilter value)? multiSelectIsNotEmpty,
    TResult Function(DateEqualsFilter value)? dateEquals,
    TResult Function(DateBeforeFilter value)? dateBefore,
    TResult Function(DateAfterFilter value)? dateAfter,
    TResult Function(DateOnOrBeforeFilter value)? dateOnOrBefore,
    TResult Function(DateOnOrAfterFilter value)? dateOnOrAfter,
    TResult Function(DateIsEmptyFilter value)? dateIsEmpty,
    TResult Function(DateIsNotEmptyFilter value)? dateIsNotEmpty,
    TResult Function(DatePastWeekFilter value)? datePastWeek,
    TResult Function(DatePastMonthFilter value)? datePastMonth,
    TResult Function(DatePastYearFilter value)? datePastYear,
    TResult Function(DateNextWeekFilter value)? dateNextWeek,
    TResult Function(DateNextMonthFilter value)? dateNextMonth,
    TResult Function(DateNextYearFilter value)? dateNextYear,
    TResult Function(PeopleContainsFilter value)? peopleContains,
    TResult Function(PeopleDoesNotContainFilter value)? peopleDoesNotContain,
    TResult Function(PeopleIsEmptyFilter value)? peopleIsEmpty,
    TResult Function(PeopleIsNotEmptyFilter value)? peopleIsNotEmpty,
    TResult Function(FilesIsEmptyFilter value)? filesIsEmpty,
    TResult Function(FilesIsNotEmptyFilter value)? filesIsNotEmpty,
    TResult Function(RelationContainsFilter value)? relationContains,
    TResult Function(RelationDoesNotContainFilter value)?
        relationDoesNotContain,
    TResult Function(RelationIsEmptyFilter value)? relationIsEmpty,
    TResult Function(RelationIsNotEmptyFilter value)? relationIsNotEmpty,
    required TResult orElse(),
  }) {
    if (multiSelectDoesNotContain != null) {
      return multiSelectDoesNotContain(this);
    }
    return orElse();
  }
}

abstract class MultiSelectDoesNotContainFilter extends PropertyFilter {
  const factory MultiSelectDoesNotContainFilter(final String value) =
      _$MultiSelectDoesNotContainFilterImpl;
  const MultiSelectDoesNotContainFilter._() : super._();

  String get value;

  /// Create a copy of PropertyFilter
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  _$$MultiSelectDoesNotContainFilterImplCopyWith<
          _$MultiSelectDoesNotContainFilterImpl>
      get copyWith => throw _privateConstructorUsedError;
}

/// @nodoc
abstract class _$$MultiSelectIsEmptyFilterImplCopyWith<$Res> {
  factory _$$MultiSelectIsEmptyFilterImplCopyWith(
          _$MultiSelectIsEmptyFilterImpl value,
          $Res Function(_$MultiSelectIsEmptyFilterImpl) then) =
      __$$MultiSelectIsEmptyFilterImplCopyWithImpl<$Res>;
}

/// @nodoc
class __$$MultiSelectIsEmptyFilterImplCopyWithImpl<$Res>
    extends _$PropertyFilterCopyWithImpl<$Res, _$MultiSelectIsEmptyFilterImpl>
    implements _$$MultiSelectIsEmptyFilterImplCopyWith<$Res> {
  __$$MultiSelectIsEmptyFilterImplCopyWithImpl(
      _$MultiSelectIsEmptyFilterImpl _value,
      $Res Function(_$MultiSelectIsEmptyFilterImpl) _then)
      : super(_value, _then);

  /// Create a copy of PropertyFilter
  /// with the given fields replaced by the non-null parameter values.
}

/// @nodoc

class _$MultiSelectIsEmptyFilterImpl extends MultiSelectIsEmptyFilter {
  const _$MultiSelectIsEmptyFilterImpl() : super._();

  @override
  String toString() {
    return 'PropertyFilter.multiSelectIsEmpty()';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$MultiSelectIsEmptyFilterImpl);
  }

  @override
  int get hashCode => runtimeType.hashCode;

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function(String value) textEquals,
    required TResult Function(String value) textDoesNotEqual,
    required TResult Function(String value) textContains,
    required TResult Function(String value) textDoesNotContain,
    required TResult Function(String value) textStartsWith,
    required TResult Function(String value) textEndsWith,
    required TResult Function() textIsEmpty,
    required TResult Function() textIsNotEmpty,
    required TResult Function(double value) numberEquals,
    required TResult Function(double value) numberDoesNotEqual,
    required TResult Function(double value) numberGreaterThan,
    required TResult Function(double value) numberLessThan,
    required TResult Function(double value) numberGreaterThanOrEqual,
    required TResult Function(double value) numberLessThanOrEqual,
    required TResult Function() numberIsEmpty,
    required TResult Function() numberIsNotEmpty,
    required TResult Function(bool value) checkboxEquals,
    required TResult Function(String value) selectEquals,
    required TResult Function(String value) selectDoesNotEqual,
    required TResult Function() selectIsEmpty,
    required TResult Function() selectIsNotEmpty,
    required TResult Function(String value) multiSelectContains,
    required TResult Function(String value) multiSelectDoesNotContain,
    required TResult Function() multiSelectIsEmpty,
    required TResult Function() multiSelectIsNotEmpty,
    required TResult Function(String date) dateEquals,
    required TResult Function(String date) dateBefore,
    required TResult Function(String date) dateAfter,
    required TResult Function(String date) dateOnOrBefore,
    required TResult Function(String date) dateOnOrAfter,
    required TResult Function() dateIsEmpty,
    required TResult Function() dateIsNotEmpty,
    required TResult Function() datePastWeek,
    required TResult Function() datePastMonth,
    required TResult Function() datePastYear,
    required TResult Function() dateNextWeek,
    required TResult Function() dateNextMonth,
    required TResult Function() dateNextYear,
    required TResult Function(String userId) peopleContains,
    required TResult Function(String userId) peopleDoesNotContain,
    required TResult Function() peopleIsEmpty,
    required TResult Function() peopleIsNotEmpty,
    required TResult Function() filesIsEmpty,
    required TResult Function() filesIsNotEmpty,
    required TResult Function(String pageId) relationContains,
    required TResult Function(String pageId) relationDoesNotContain,
    required TResult Function() relationIsEmpty,
    required TResult Function() relationIsNotEmpty,
  }) {
    return multiSelectIsEmpty();
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function(String value)? textEquals,
    TResult? Function(String value)? textDoesNotEqual,
    TResult? Function(String value)? textContains,
    TResult? Function(String value)? textDoesNotContain,
    TResult? Function(String value)? textStartsWith,
    TResult? Function(String value)? textEndsWith,
    TResult? Function()? textIsEmpty,
    TResult? Function()? textIsNotEmpty,
    TResult? Function(double value)? numberEquals,
    TResult? Function(double value)? numberDoesNotEqual,
    TResult? Function(double value)? numberGreaterThan,
    TResult? Function(double value)? numberLessThan,
    TResult? Function(double value)? numberGreaterThanOrEqual,
    TResult? Function(double value)? numberLessThanOrEqual,
    TResult? Function()? numberIsEmpty,
    TResult? Function()? numberIsNotEmpty,
    TResult? Function(bool value)? checkboxEquals,
    TResult? Function(String value)? selectEquals,
    TResult? Function(String value)? selectDoesNotEqual,
    TResult? Function()? selectIsEmpty,
    TResult? Function()? selectIsNotEmpty,
    TResult? Function(String value)? multiSelectContains,
    TResult? Function(String value)? multiSelectDoesNotContain,
    TResult? Function()? multiSelectIsEmpty,
    TResult? Function()? multiSelectIsNotEmpty,
    TResult? Function(String date)? dateEquals,
    TResult? Function(String date)? dateBefore,
    TResult? Function(String date)? dateAfter,
    TResult? Function(String date)? dateOnOrBefore,
    TResult? Function(String date)? dateOnOrAfter,
    TResult? Function()? dateIsEmpty,
    TResult? Function()? dateIsNotEmpty,
    TResult? Function()? datePastWeek,
    TResult? Function()? datePastMonth,
    TResult? Function()? datePastYear,
    TResult? Function()? dateNextWeek,
    TResult? Function()? dateNextMonth,
    TResult? Function()? dateNextYear,
    TResult? Function(String userId)? peopleContains,
    TResult? Function(String userId)? peopleDoesNotContain,
    TResult? Function()? peopleIsEmpty,
    TResult? Function()? peopleIsNotEmpty,
    TResult? Function()? filesIsEmpty,
    TResult? Function()? filesIsNotEmpty,
    TResult? Function(String pageId)? relationContains,
    TResult? Function(String pageId)? relationDoesNotContain,
    TResult? Function()? relationIsEmpty,
    TResult? Function()? relationIsNotEmpty,
  }) {
    return multiSelectIsEmpty?.call();
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function(String value)? textEquals,
    TResult Function(String value)? textDoesNotEqual,
    TResult Function(String value)? textContains,
    TResult Function(String value)? textDoesNotContain,
    TResult Function(String value)? textStartsWith,
    TResult Function(String value)? textEndsWith,
    TResult Function()? textIsEmpty,
    TResult Function()? textIsNotEmpty,
    TResult Function(double value)? numberEquals,
    TResult Function(double value)? numberDoesNotEqual,
    TResult Function(double value)? numberGreaterThan,
    TResult Function(double value)? numberLessThan,
    TResult Function(double value)? numberGreaterThanOrEqual,
    TResult Function(double value)? numberLessThanOrEqual,
    TResult Function()? numberIsEmpty,
    TResult Function()? numberIsNotEmpty,
    TResult Function(bool value)? checkboxEquals,
    TResult Function(String value)? selectEquals,
    TResult Function(String value)? selectDoesNotEqual,
    TResult Function()? selectIsEmpty,
    TResult Function()? selectIsNotEmpty,
    TResult Function(String value)? multiSelectContains,
    TResult Function(String value)? multiSelectDoesNotContain,
    TResult Function()? multiSelectIsEmpty,
    TResult Function()? multiSelectIsNotEmpty,
    TResult Function(String date)? dateEquals,
    TResult Function(String date)? dateBefore,
    TResult Function(String date)? dateAfter,
    TResult Function(String date)? dateOnOrBefore,
    TResult Function(String date)? dateOnOrAfter,
    TResult Function()? dateIsEmpty,
    TResult Function()? dateIsNotEmpty,
    TResult Function()? datePastWeek,
    TResult Function()? datePastMonth,
    TResult Function()? datePastYear,
    TResult Function()? dateNextWeek,
    TResult Function()? dateNextMonth,
    TResult Function()? dateNextYear,
    TResult Function(String userId)? peopleContains,
    TResult Function(String userId)? peopleDoesNotContain,
    TResult Function()? peopleIsEmpty,
    TResult Function()? peopleIsNotEmpty,
    TResult Function()? filesIsEmpty,
    TResult Function()? filesIsNotEmpty,
    TResult Function(String pageId)? relationContains,
    TResult Function(String pageId)? relationDoesNotContain,
    TResult Function()? relationIsEmpty,
    TResult Function()? relationIsNotEmpty,
    required TResult orElse(),
  }) {
    if (multiSelectIsEmpty != null) {
      return multiSelectIsEmpty();
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(TextEqualsFilter value) textEquals,
    required TResult Function(TextDoesNotEqualFilter value) textDoesNotEqual,
    required TResult Function(TextContainsFilter value) textContains,
    required TResult Function(TextDoesNotContainFilter value)
        textDoesNotContain,
    required TResult Function(TextStartsWithFilter value) textStartsWith,
    required TResult Function(TextEndsWithFilter value) textEndsWith,
    required TResult Function(TextIsEmptyFilter value) textIsEmpty,
    required TResult Function(TextIsNotEmptyFilter value) textIsNotEmpty,
    required TResult Function(NumberEqualsFilter value) numberEquals,
    required TResult Function(NumberDoesNotEqualFilter value)
        numberDoesNotEqual,
    required TResult Function(NumberGreaterThanFilter value) numberGreaterThan,
    required TResult Function(NumberLessThanFilter value) numberLessThan,
    required TResult Function(NumberGreaterThanOrEqualFilter value)
        numberGreaterThanOrEqual,
    required TResult Function(NumberLessThanOrEqualFilter value)
        numberLessThanOrEqual,
    required TResult Function(NumberIsEmptyFilter value) numberIsEmpty,
    required TResult Function(NumberIsNotEmptyFilter value) numberIsNotEmpty,
    required TResult Function(CheckboxEqualsFilter value) checkboxEquals,
    required TResult Function(SelectEqualsFilter value) selectEquals,
    required TResult Function(SelectDoesNotEqualFilter value)
        selectDoesNotEqual,
    required TResult Function(SelectIsEmptyFilter value) selectIsEmpty,
    required TResult Function(SelectIsNotEmptyFilter value) selectIsNotEmpty,
    required TResult Function(MultiSelectContainsFilter value)
        multiSelectContains,
    required TResult Function(MultiSelectDoesNotContainFilter value)
        multiSelectDoesNotContain,
    required TResult Function(MultiSelectIsEmptyFilter value)
        multiSelectIsEmpty,
    required TResult Function(MultiSelectIsNotEmptyFilter value)
        multiSelectIsNotEmpty,
    required TResult Function(DateEqualsFilter value) dateEquals,
    required TResult Function(DateBeforeFilter value) dateBefore,
    required TResult Function(DateAfterFilter value) dateAfter,
    required TResult Function(DateOnOrBeforeFilter value) dateOnOrBefore,
    required TResult Function(DateOnOrAfterFilter value) dateOnOrAfter,
    required TResult Function(DateIsEmptyFilter value) dateIsEmpty,
    required TResult Function(DateIsNotEmptyFilter value) dateIsNotEmpty,
    required TResult Function(DatePastWeekFilter value) datePastWeek,
    required TResult Function(DatePastMonthFilter value) datePastMonth,
    required TResult Function(DatePastYearFilter value) datePastYear,
    required TResult Function(DateNextWeekFilter value) dateNextWeek,
    required TResult Function(DateNextMonthFilter value) dateNextMonth,
    required TResult Function(DateNextYearFilter value) dateNextYear,
    required TResult Function(PeopleContainsFilter value) peopleContains,
    required TResult Function(PeopleDoesNotContainFilter value)
        peopleDoesNotContain,
    required TResult Function(PeopleIsEmptyFilter value) peopleIsEmpty,
    required TResult Function(PeopleIsNotEmptyFilter value) peopleIsNotEmpty,
    required TResult Function(FilesIsEmptyFilter value) filesIsEmpty,
    required TResult Function(FilesIsNotEmptyFilter value) filesIsNotEmpty,
    required TResult Function(RelationContainsFilter value) relationContains,
    required TResult Function(RelationDoesNotContainFilter value)
        relationDoesNotContain,
    required TResult Function(RelationIsEmptyFilter value) relationIsEmpty,
    required TResult Function(RelationIsNotEmptyFilter value)
        relationIsNotEmpty,
  }) {
    return multiSelectIsEmpty(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(TextEqualsFilter value)? textEquals,
    TResult? Function(TextDoesNotEqualFilter value)? textDoesNotEqual,
    TResult? Function(TextContainsFilter value)? textContains,
    TResult? Function(TextDoesNotContainFilter value)? textDoesNotContain,
    TResult? Function(TextStartsWithFilter value)? textStartsWith,
    TResult? Function(TextEndsWithFilter value)? textEndsWith,
    TResult? Function(TextIsEmptyFilter value)? textIsEmpty,
    TResult? Function(TextIsNotEmptyFilter value)? textIsNotEmpty,
    TResult? Function(NumberEqualsFilter value)? numberEquals,
    TResult? Function(NumberDoesNotEqualFilter value)? numberDoesNotEqual,
    TResult? Function(NumberGreaterThanFilter value)? numberGreaterThan,
    TResult? Function(NumberLessThanFilter value)? numberLessThan,
    TResult? Function(NumberGreaterThanOrEqualFilter value)?
        numberGreaterThanOrEqual,
    TResult? Function(NumberLessThanOrEqualFilter value)? numberLessThanOrEqual,
    TResult? Function(NumberIsEmptyFilter value)? numberIsEmpty,
    TResult? Function(NumberIsNotEmptyFilter value)? numberIsNotEmpty,
    TResult? Function(CheckboxEqualsFilter value)? checkboxEquals,
    TResult? Function(SelectEqualsFilter value)? selectEquals,
    TResult? Function(SelectDoesNotEqualFilter value)? selectDoesNotEqual,
    TResult? Function(SelectIsEmptyFilter value)? selectIsEmpty,
    TResult? Function(SelectIsNotEmptyFilter value)? selectIsNotEmpty,
    TResult? Function(MultiSelectContainsFilter value)? multiSelectContains,
    TResult? Function(MultiSelectDoesNotContainFilter value)?
        multiSelectDoesNotContain,
    TResult? Function(MultiSelectIsEmptyFilter value)? multiSelectIsEmpty,
    TResult? Function(MultiSelectIsNotEmptyFilter value)? multiSelectIsNotEmpty,
    TResult? Function(DateEqualsFilter value)? dateEquals,
    TResult? Function(DateBeforeFilter value)? dateBefore,
    TResult? Function(DateAfterFilter value)? dateAfter,
    TResult? Function(DateOnOrBeforeFilter value)? dateOnOrBefore,
    TResult? Function(DateOnOrAfterFilter value)? dateOnOrAfter,
    TResult? Function(DateIsEmptyFilter value)? dateIsEmpty,
    TResult? Function(DateIsNotEmptyFilter value)? dateIsNotEmpty,
    TResult? Function(DatePastWeekFilter value)? datePastWeek,
    TResult? Function(DatePastMonthFilter value)? datePastMonth,
    TResult? Function(DatePastYearFilter value)? datePastYear,
    TResult? Function(DateNextWeekFilter value)? dateNextWeek,
    TResult? Function(DateNextMonthFilter value)? dateNextMonth,
    TResult? Function(DateNextYearFilter value)? dateNextYear,
    TResult? Function(PeopleContainsFilter value)? peopleContains,
    TResult? Function(PeopleDoesNotContainFilter value)? peopleDoesNotContain,
    TResult? Function(PeopleIsEmptyFilter value)? peopleIsEmpty,
    TResult? Function(PeopleIsNotEmptyFilter value)? peopleIsNotEmpty,
    TResult? Function(FilesIsEmptyFilter value)? filesIsEmpty,
    TResult? Function(FilesIsNotEmptyFilter value)? filesIsNotEmpty,
    TResult? Function(RelationContainsFilter value)? relationContains,
    TResult? Function(RelationDoesNotContainFilter value)?
        relationDoesNotContain,
    TResult? Function(RelationIsEmptyFilter value)? relationIsEmpty,
    TResult? Function(RelationIsNotEmptyFilter value)? relationIsNotEmpty,
  }) {
    return multiSelectIsEmpty?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(TextEqualsFilter value)? textEquals,
    TResult Function(TextDoesNotEqualFilter value)? textDoesNotEqual,
    TResult Function(TextContainsFilter value)? textContains,
    TResult Function(TextDoesNotContainFilter value)? textDoesNotContain,
    TResult Function(TextStartsWithFilter value)? textStartsWith,
    TResult Function(TextEndsWithFilter value)? textEndsWith,
    TResult Function(TextIsEmptyFilter value)? textIsEmpty,
    TResult Function(TextIsNotEmptyFilter value)? textIsNotEmpty,
    TResult Function(NumberEqualsFilter value)? numberEquals,
    TResult Function(NumberDoesNotEqualFilter value)? numberDoesNotEqual,
    TResult Function(NumberGreaterThanFilter value)? numberGreaterThan,
    TResult Function(NumberLessThanFilter value)? numberLessThan,
    TResult Function(NumberGreaterThanOrEqualFilter value)?
        numberGreaterThanOrEqual,
    TResult Function(NumberLessThanOrEqualFilter value)? numberLessThanOrEqual,
    TResult Function(NumberIsEmptyFilter value)? numberIsEmpty,
    TResult Function(NumberIsNotEmptyFilter value)? numberIsNotEmpty,
    TResult Function(CheckboxEqualsFilter value)? checkboxEquals,
    TResult Function(SelectEqualsFilter value)? selectEquals,
    TResult Function(SelectDoesNotEqualFilter value)? selectDoesNotEqual,
    TResult Function(SelectIsEmptyFilter value)? selectIsEmpty,
    TResult Function(SelectIsNotEmptyFilter value)? selectIsNotEmpty,
    TResult Function(MultiSelectContainsFilter value)? multiSelectContains,
    TResult Function(MultiSelectDoesNotContainFilter value)?
        multiSelectDoesNotContain,
    TResult Function(MultiSelectIsEmptyFilter value)? multiSelectIsEmpty,
    TResult Function(MultiSelectIsNotEmptyFilter value)? multiSelectIsNotEmpty,
    TResult Function(DateEqualsFilter value)? dateEquals,
    TResult Function(DateBeforeFilter value)? dateBefore,
    TResult Function(DateAfterFilter value)? dateAfter,
    TResult Function(DateOnOrBeforeFilter value)? dateOnOrBefore,
    TResult Function(DateOnOrAfterFilter value)? dateOnOrAfter,
    TResult Function(DateIsEmptyFilter value)? dateIsEmpty,
    TResult Function(DateIsNotEmptyFilter value)? dateIsNotEmpty,
    TResult Function(DatePastWeekFilter value)? datePastWeek,
    TResult Function(DatePastMonthFilter value)? datePastMonth,
    TResult Function(DatePastYearFilter value)? datePastYear,
    TResult Function(DateNextWeekFilter value)? dateNextWeek,
    TResult Function(DateNextMonthFilter value)? dateNextMonth,
    TResult Function(DateNextYearFilter value)? dateNextYear,
    TResult Function(PeopleContainsFilter value)? peopleContains,
    TResult Function(PeopleDoesNotContainFilter value)? peopleDoesNotContain,
    TResult Function(PeopleIsEmptyFilter value)? peopleIsEmpty,
    TResult Function(PeopleIsNotEmptyFilter value)? peopleIsNotEmpty,
    TResult Function(FilesIsEmptyFilter value)? filesIsEmpty,
    TResult Function(FilesIsNotEmptyFilter value)? filesIsNotEmpty,
    TResult Function(RelationContainsFilter value)? relationContains,
    TResult Function(RelationDoesNotContainFilter value)?
        relationDoesNotContain,
    TResult Function(RelationIsEmptyFilter value)? relationIsEmpty,
    TResult Function(RelationIsNotEmptyFilter value)? relationIsNotEmpty,
    required TResult orElse(),
  }) {
    if (multiSelectIsEmpty != null) {
      return multiSelectIsEmpty(this);
    }
    return orElse();
  }
}

abstract class MultiSelectIsEmptyFilter extends PropertyFilter {
  const factory MultiSelectIsEmptyFilter() = _$MultiSelectIsEmptyFilterImpl;
  const MultiSelectIsEmptyFilter._() : super._();
}

/// @nodoc
abstract class _$$MultiSelectIsNotEmptyFilterImplCopyWith<$Res> {
  factory _$$MultiSelectIsNotEmptyFilterImplCopyWith(
          _$MultiSelectIsNotEmptyFilterImpl value,
          $Res Function(_$MultiSelectIsNotEmptyFilterImpl) then) =
      __$$MultiSelectIsNotEmptyFilterImplCopyWithImpl<$Res>;
}

/// @nodoc
class __$$MultiSelectIsNotEmptyFilterImplCopyWithImpl<$Res>
    extends _$PropertyFilterCopyWithImpl<$Res,
        _$MultiSelectIsNotEmptyFilterImpl>
    implements _$$MultiSelectIsNotEmptyFilterImplCopyWith<$Res> {
  __$$MultiSelectIsNotEmptyFilterImplCopyWithImpl(
      _$MultiSelectIsNotEmptyFilterImpl _value,
      $Res Function(_$MultiSelectIsNotEmptyFilterImpl) _then)
      : super(_value, _then);

  /// Create a copy of PropertyFilter
  /// with the given fields replaced by the non-null parameter values.
}

/// @nodoc

class _$MultiSelectIsNotEmptyFilterImpl extends MultiSelectIsNotEmptyFilter {
  const _$MultiSelectIsNotEmptyFilterImpl() : super._();

  @override
  String toString() {
    return 'PropertyFilter.multiSelectIsNotEmpty()';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$MultiSelectIsNotEmptyFilterImpl);
  }

  @override
  int get hashCode => runtimeType.hashCode;

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function(String value) textEquals,
    required TResult Function(String value) textDoesNotEqual,
    required TResult Function(String value) textContains,
    required TResult Function(String value) textDoesNotContain,
    required TResult Function(String value) textStartsWith,
    required TResult Function(String value) textEndsWith,
    required TResult Function() textIsEmpty,
    required TResult Function() textIsNotEmpty,
    required TResult Function(double value) numberEquals,
    required TResult Function(double value) numberDoesNotEqual,
    required TResult Function(double value) numberGreaterThan,
    required TResult Function(double value) numberLessThan,
    required TResult Function(double value) numberGreaterThanOrEqual,
    required TResult Function(double value) numberLessThanOrEqual,
    required TResult Function() numberIsEmpty,
    required TResult Function() numberIsNotEmpty,
    required TResult Function(bool value) checkboxEquals,
    required TResult Function(String value) selectEquals,
    required TResult Function(String value) selectDoesNotEqual,
    required TResult Function() selectIsEmpty,
    required TResult Function() selectIsNotEmpty,
    required TResult Function(String value) multiSelectContains,
    required TResult Function(String value) multiSelectDoesNotContain,
    required TResult Function() multiSelectIsEmpty,
    required TResult Function() multiSelectIsNotEmpty,
    required TResult Function(String date) dateEquals,
    required TResult Function(String date) dateBefore,
    required TResult Function(String date) dateAfter,
    required TResult Function(String date) dateOnOrBefore,
    required TResult Function(String date) dateOnOrAfter,
    required TResult Function() dateIsEmpty,
    required TResult Function() dateIsNotEmpty,
    required TResult Function() datePastWeek,
    required TResult Function() datePastMonth,
    required TResult Function() datePastYear,
    required TResult Function() dateNextWeek,
    required TResult Function() dateNextMonth,
    required TResult Function() dateNextYear,
    required TResult Function(String userId) peopleContains,
    required TResult Function(String userId) peopleDoesNotContain,
    required TResult Function() peopleIsEmpty,
    required TResult Function() peopleIsNotEmpty,
    required TResult Function() filesIsEmpty,
    required TResult Function() filesIsNotEmpty,
    required TResult Function(String pageId) relationContains,
    required TResult Function(String pageId) relationDoesNotContain,
    required TResult Function() relationIsEmpty,
    required TResult Function() relationIsNotEmpty,
  }) {
    return multiSelectIsNotEmpty();
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function(String value)? textEquals,
    TResult? Function(String value)? textDoesNotEqual,
    TResult? Function(String value)? textContains,
    TResult? Function(String value)? textDoesNotContain,
    TResult? Function(String value)? textStartsWith,
    TResult? Function(String value)? textEndsWith,
    TResult? Function()? textIsEmpty,
    TResult? Function()? textIsNotEmpty,
    TResult? Function(double value)? numberEquals,
    TResult? Function(double value)? numberDoesNotEqual,
    TResult? Function(double value)? numberGreaterThan,
    TResult? Function(double value)? numberLessThan,
    TResult? Function(double value)? numberGreaterThanOrEqual,
    TResult? Function(double value)? numberLessThanOrEqual,
    TResult? Function()? numberIsEmpty,
    TResult? Function()? numberIsNotEmpty,
    TResult? Function(bool value)? checkboxEquals,
    TResult? Function(String value)? selectEquals,
    TResult? Function(String value)? selectDoesNotEqual,
    TResult? Function()? selectIsEmpty,
    TResult? Function()? selectIsNotEmpty,
    TResult? Function(String value)? multiSelectContains,
    TResult? Function(String value)? multiSelectDoesNotContain,
    TResult? Function()? multiSelectIsEmpty,
    TResult? Function()? multiSelectIsNotEmpty,
    TResult? Function(String date)? dateEquals,
    TResult? Function(String date)? dateBefore,
    TResult? Function(String date)? dateAfter,
    TResult? Function(String date)? dateOnOrBefore,
    TResult? Function(String date)? dateOnOrAfter,
    TResult? Function()? dateIsEmpty,
    TResult? Function()? dateIsNotEmpty,
    TResult? Function()? datePastWeek,
    TResult? Function()? datePastMonth,
    TResult? Function()? datePastYear,
    TResult? Function()? dateNextWeek,
    TResult? Function()? dateNextMonth,
    TResult? Function()? dateNextYear,
    TResult? Function(String userId)? peopleContains,
    TResult? Function(String userId)? peopleDoesNotContain,
    TResult? Function()? peopleIsEmpty,
    TResult? Function()? peopleIsNotEmpty,
    TResult? Function()? filesIsEmpty,
    TResult? Function()? filesIsNotEmpty,
    TResult? Function(String pageId)? relationContains,
    TResult? Function(String pageId)? relationDoesNotContain,
    TResult? Function()? relationIsEmpty,
    TResult? Function()? relationIsNotEmpty,
  }) {
    return multiSelectIsNotEmpty?.call();
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function(String value)? textEquals,
    TResult Function(String value)? textDoesNotEqual,
    TResult Function(String value)? textContains,
    TResult Function(String value)? textDoesNotContain,
    TResult Function(String value)? textStartsWith,
    TResult Function(String value)? textEndsWith,
    TResult Function()? textIsEmpty,
    TResult Function()? textIsNotEmpty,
    TResult Function(double value)? numberEquals,
    TResult Function(double value)? numberDoesNotEqual,
    TResult Function(double value)? numberGreaterThan,
    TResult Function(double value)? numberLessThan,
    TResult Function(double value)? numberGreaterThanOrEqual,
    TResult Function(double value)? numberLessThanOrEqual,
    TResult Function()? numberIsEmpty,
    TResult Function()? numberIsNotEmpty,
    TResult Function(bool value)? checkboxEquals,
    TResult Function(String value)? selectEquals,
    TResult Function(String value)? selectDoesNotEqual,
    TResult Function()? selectIsEmpty,
    TResult Function()? selectIsNotEmpty,
    TResult Function(String value)? multiSelectContains,
    TResult Function(String value)? multiSelectDoesNotContain,
    TResult Function()? multiSelectIsEmpty,
    TResult Function()? multiSelectIsNotEmpty,
    TResult Function(String date)? dateEquals,
    TResult Function(String date)? dateBefore,
    TResult Function(String date)? dateAfter,
    TResult Function(String date)? dateOnOrBefore,
    TResult Function(String date)? dateOnOrAfter,
    TResult Function()? dateIsEmpty,
    TResult Function()? dateIsNotEmpty,
    TResult Function()? datePastWeek,
    TResult Function()? datePastMonth,
    TResult Function()? datePastYear,
    TResult Function()? dateNextWeek,
    TResult Function()? dateNextMonth,
    TResult Function()? dateNextYear,
    TResult Function(String userId)? peopleContains,
    TResult Function(String userId)? peopleDoesNotContain,
    TResult Function()? peopleIsEmpty,
    TResult Function()? peopleIsNotEmpty,
    TResult Function()? filesIsEmpty,
    TResult Function()? filesIsNotEmpty,
    TResult Function(String pageId)? relationContains,
    TResult Function(String pageId)? relationDoesNotContain,
    TResult Function()? relationIsEmpty,
    TResult Function()? relationIsNotEmpty,
    required TResult orElse(),
  }) {
    if (multiSelectIsNotEmpty != null) {
      return multiSelectIsNotEmpty();
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(TextEqualsFilter value) textEquals,
    required TResult Function(TextDoesNotEqualFilter value) textDoesNotEqual,
    required TResult Function(TextContainsFilter value) textContains,
    required TResult Function(TextDoesNotContainFilter value)
        textDoesNotContain,
    required TResult Function(TextStartsWithFilter value) textStartsWith,
    required TResult Function(TextEndsWithFilter value) textEndsWith,
    required TResult Function(TextIsEmptyFilter value) textIsEmpty,
    required TResult Function(TextIsNotEmptyFilter value) textIsNotEmpty,
    required TResult Function(NumberEqualsFilter value) numberEquals,
    required TResult Function(NumberDoesNotEqualFilter value)
        numberDoesNotEqual,
    required TResult Function(NumberGreaterThanFilter value) numberGreaterThan,
    required TResult Function(NumberLessThanFilter value) numberLessThan,
    required TResult Function(NumberGreaterThanOrEqualFilter value)
        numberGreaterThanOrEqual,
    required TResult Function(NumberLessThanOrEqualFilter value)
        numberLessThanOrEqual,
    required TResult Function(NumberIsEmptyFilter value) numberIsEmpty,
    required TResult Function(NumberIsNotEmptyFilter value) numberIsNotEmpty,
    required TResult Function(CheckboxEqualsFilter value) checkboxEquals,
    required TResult Function(SelectEqualsFilter value) selectEquals,
    required TResult Function(SelectDoesNotEqualFilter value)
        selectDoesNotEqual,
    required TResult Function(SelectIsEmptyFilter value) selectIsEmpty,
    required TResult Function(SelectIsNotEmptyFilter value) selectIsNotEmpty,
    required TResult Function(MultiSelectContainsFilter value)
        multiSelectContains,
    required TResult Function(MultiSelectDoesNotContainFilter value)
        multiSelectDoesNotContain,
    required TResult Function(MultiSelectIsEmptyFilter value)
        multiSelectIsEmpty,
    required TResult Function(MultiSelectIsNotEmptyFilter value)
        multiSelectIsNotEmpty,
    required TResult Function(DateEqualsFilter value) dateEquals,
    required TResult Function(DateBeforeFilter value) dateBefore,
    required TResult Function(DateAfterFilter value) dateAfter,
    required TResult Function(DateOnOrBeforeFilter value) dateOnOrBefore,
    required TResult Function(DateOnOrAfterFilter value) dateOnOrAfter,
    required TResult Function(DateIsEmptyFilter value) dateIsEmpty,
    required TResult Function(DateIsNotEmptyFilter value) dateIsNotEmpty,
    required TResult Function(DatePastWeekFilter value) datePastWeek,
    required TResult Function(DatePastMonthFilter value) datePastMonth,
    required TResult Function(DatePastYearFilter value) datePastYear,
    required TResult Function(DateNextWeekFilter value) dateNextWeek,
    required TResult Function(DateNextMonthFilter value) dateNextMonth,
    required TResult Function(DateNextYearFilter value) dateNextYear,
    required TResult Function(PeopleContainsFilter value) peopleContains,
    required TResult Function(PeopleDoesNotContainFilter value)
        peopleDoesNotContain,
    required TResult Function(PeopleIsEmptyFilter value) peopleIsEmpty,
    required TResult Function(PeopleIsNotEmptyFilter value) peopleIsNotEmpty,
    required TResult Function(FilesIsEmptyFilter value) filesIsEmpty,
    required TResult Function(FilesIsNotEmptyFilter value) filesIsNotEmpty,
    required TResult Function(RelationContainsFilter value) relationContains,
    required TResult Function(RelationDoesNotContainFilter value)
        relationDoesNotContain,
    required TResult Function(RelationIsEmptyFilter value) relationIsEmpty,
    required TResult Function(RelationIsNotEmptyFilter value)
        relationIsNotEmpty,
  }) {
    return multiSelectIsNotEmpty(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(TextEqualsFilter value)? textEquals,
    TResult? Function(TextDoesNotEqualFilter value)? textDoesNotEqual,
    TResult? Function(TextContainsFilter value)? textContains,
    TResult? Function(TextDoesNotContainFilter value)? textDoesNotContain,
    TResult? Function(TextStartsWithFilter value)? textStartsWith,
    TResult? Function(TextEndsWithFilter value)? textEndsWith,
    TResult? Function(TextIsEmptyFilter value)? textIsEmpty,
    TResult? Function(TextIsNotEmptyFilter value)? textIsNotEmpty,
    TResult? Function(NumberEqualsFilter value)? numberEquals,
    TResult? Function(NumberDoesNotEqualFilter value)? numberDoesNotEqual,
    TResult? Function(NumberGreaterThanFilter value)? numberGreaterThan,
    TResult? Function(NumberLessThanFilter value)? numberLessThan,
    TResult? Function(NumberGreaterThanOrEqualFilter value)?
        numberGreaterThanOrEqual,
    TResult? Function(NumberLessThanOrEqualFilter value)? numberLessThanOrEqual,
    TResult? Function(NumberIsEmptyFilter value)? numberIsEmpty,
    TResult? Function(NumberIsNotEmptyFilter value)? numberIsNotEmpty,
    TResult? Function(CheckboxEqualsFilter value)? checkboxEquals,
    TResult? Function(SelectEqualsFilter value)? selectEquals,
    TResult? Function(SelectDoesNotEqualFilter value)? selectDoesNotEqual,
    TResult? Function(SelectIsEmptyFilter value)? selectIsEmpty,
    TResult? Function(SelectIsNotEmptyFilter value)? selectIsNotEmpty,
    TResult? Function(MultiSelectContainsFilter value)? multiSelectContains,
    TResult? Function(MultiSelectDoesNotContainFilter value)?
        multiSelectDoesNotContain,
    TResult? Function(MultiSelectIsEmptyFilter value)? multiSelectIsEmpty,
    TResult? Function(MultiSelectIsNotEmptyFilter value)? multiSelectIsNotEmpty,
    TResult? Function(DateEqualsFilter value)? dateEquals,
    TResult? Function(DateBeforeFilter value)? dateBefore,
    TResult? Function(DateAfterFilter value)? dateAfter,
    TResult? Function(DateOnOrBeforeFilter value)? dateOnOrBefore,
    TResult? Function(DateOnOrAfterFilter value)? dateOnOrAfter,
    TResult? Function(DateIsEmptyFilter value)? dateIsEmpty,
    TResult? Function(DateIsNotEmptyFilter value)? dateIsNotEmpty,
    TResult? Function(DatePastWeekFilter value)? datePastWeek,
    TResult? Function(DatePastMonthFilter value)? datePastMonth,
    TResult? Function(DatePastYearFilter value)? datePastYear,
    TResult? Function(DateNextWeekFilter value)? dateNextWeek,
    TResult? Function(DateNextMonthFilter value)? dateNextMonth,
    TResult? Function(DateNextYearFilter value)? dateNextYear,
    TResult? Function(PeopleContainsFilter value)? peopleContains,
    TResult? Function(PeopleDoesNotContainFilter value)? peopleDoesNotContain,
    TResult? Function(PeopleIsEmptyFilter value)? peopleIsEmpty,
    TResult? Function(PeopleIsNotEmptyFilter value)? peopleIsNotEmpty,
    TResult? Function(FilesIsEmptyFilter value)? filesIsEmpty,
    TResult? Function(FilesIsNotEmptyFilter value)? filesIsNotEmpty,
    TResult? Function(RelationContainsFilter value)? relationContains,
    TResult? Function(RelationDoesNotContainFilter value)?
        relationDoesNotContain,
    TResult? Function(RelationIsEmptyFilter value)? relationIsEmpty,
    TResult? Function(RelationIsNotEmptyFilter value)? relationIsNotEmpty,
  }) {
    return multiSelectIsNotEmpty?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(TextEqualsFilter value)? textEquals,
    TResult Function(TextDoesNotEqualFilter value)? textDoesNotEqual,
    TResult Function(TextContainsFilter value)? textContains,
    TResult Function(TextDoesNotContainFilter value)? textDoesNotContain,
    TResult Function(TextStartsWithFilter value)? textStartsWith,
    TResult Function(TextEndsWithFilter value)? textEndsWith,
    TResult Function(TextIsEmptyFilter value)? textIsEmpty,
    TResult Function(TextIsNotEmptyFilter value)? textIsNotEmpty,
    TResult Function(NumberEqualsFilter value)? numberEquals,
    TResult Function(NumberDoesNotEqualFilter value)? numberDoesNotEqual,
    TResult Function(NumberGreaterThanFilter value)? numberGreaterThan,
    TResult Function(NumberLessThanFilter value)? numberLessThan,
    TResult Function(NumberGreaterThanOrEqualFilter value)?
        numberGreaterThanOrEqual,
    TResult Function(NumberLessThanOrEqualFilter value)? numberLessThanOrEqual,
    TResult Function(NumberIsEmptyFilter value)? numberIsEmpty,
    TResult Function(NumberIsNotEmptyFilter value)? numberIsNotEmpty,
    TResult Function(CheckboxEqualsFilter value)? checkboxEquals,
    TResult Function(SelectEqualsFilter value)? selectEquals,
    TResult Function(SelectDoesNotEqualFilter value)? selectDoesNotEqual,
    TResult Function(SelectIsEmptyFilter value)? selectIsEmpty,
    TResult Function(SelectIsNotEmptyFilter value)? selectIsNotEmpty,
    TResult Function(MultiSelectContainsFilter value)? multiSelectContains,
    TResult Function(MultiSelectDoesNotContainFilter value)?
        multiSelectDoesNotContain,
    TResult Function(MultiSelectIsEmptyFilter value)? multiSelectIsEmpty,
    TResult Function(MultiSelectIsNotEmptyFilter value)? multiSelectIsNotEmpty,
    TResult Function(DateEqualsFilter value)? dateEquals,
    TResult Function(DateBeforeFilter value)? dateBefore,
    TResult Function(DateAfterFilter value)? dateAfter,
    TResult Function(DateOnOrBeforeFilter value)? dateOnOrBefore,
    TResult Function(DateOnOrAfterFilter value)? dateOnOrAfter,
    TResult Function(DateIsEmptyFilter value)? dateIsEmpty,
    TResult Function(DateIsNotEmptyFilter value)? dateIsNotEmpty,
    TResult Function(DatePastWeekFilter value)? datePastWeek,
    TResult Function(DatePastMonthFilter value)? datePastMonth,
    TResult Function(DatePastYearFilter value)? datePastYear,
    TResult Function(DateNextWeekFilter value)? dateNextWeek,
    TResult Function(DateNextMonthFilter value)? dateNextMonth,
    TResult Function(DateNextYearFilter value)? dateNextYear,
    TResult Function(PeopleContainsFilter value)? peopleContains,
    TResult Function(PeopleDoesNotContainFilter value)? peopleDoesNotContain,
    TResult Function(PeopleIsEmptyFilter value)? peopleIsEmpty,
    TResult Function(PeopleIsNotEmptyFilter value)? peopleIsNotEmpty,
    TResult Function(FilesIsEmptyFilter value)? filesIsEmpty,
    TResult Function(FilesIsNotEmptyFilter value)? filesIsNotEmpty,
    TResult Function(RelationContainsFilter value)? relationContains,
    TResult Function(RelationDoesNotContainFilter value)?
        relationDoesNotContain,
    TResult Function(RelationIsEmptyFilter value)? relationIsEmpty,
    TResult Function(RelationIsNotEmptyFilter value)? relationIsNotEmpty,
    required TResult orElse(),
  }) {
    if (multiSelectIsNotEmpty != null) {
      return multiSelectIsNotEmpty(this);
    }
    return orElse();
  }
}

abstract class MultiSelectIsNotEmptyFilter extends PropertyFilter {
  const factory MultiSelectIsNotEmptyFilter() =
      _$MultiSelectIsNotEmptyFilterImpl;
  const MultiSelectIsNotEmptyFilter._() : super._();
}

/// @nodoc
abstract class _$$DateEqualsFilterImplCopyWith<$Res> {
  factory _$$DateEqualsFilterImplCopyWith(_$DateEqualsFilterImpl value,
          $Res Function(_$DateEqualsFilterImpl) then) =
      __$$DateEqualsFilterImplCopyWithImpl<$Res>;
  @useResult
  $Res call({String date});
}

/// @nodoc
class __$$DateEqualsFilterImplCopyWithImpl<$Res>
    extends _$PropertyFilterCopyWithImpl<$Res, _$DateEqualsFilterImpl>
    implements _$$DateEqualsFilterImplCopyWith<$Res> {
  __$$DateEqualsFilterImplCopyWithImpl(_$DateEqualsFilterImpl _value,
      $Res Function(_$DateEqualsFilterImpl) _then)
      : super(_value, _then);

  /// Create a copy of PropertyFilter
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? date = null,
  }) {
    return _then(_$DateEqualsFilterImpl(
      null == date
          ? _value.date
          : date // ignore: cast_nullable_to_non_nullable
              as String,
    ));
  }
}

/// @nodoc

class _$DateEqualsFilterImpl extends DateEqualsFilter {
  const _$DateEqualsFilterImpl(this.date) : super._();

  @override
  final String date;

  @override
  String toString() {
    return 'PropertyFilter.dateEquals(date: $date)';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$DateEqualsFilterImpl &&
            (identical(other.date, date) || other.date == date));
  }

  @override
  int get hashCode => Object.hash(runtimeType, date);

  /// Create a copy of PropertyFilter
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  @pragma('vm:prefer-inline')
  _$$DateEqualsFilterImplCopyWith<_$DateEqualsFilterImpl> get copyWith =>
      __$$DateEqualsFilterImplCopyWithImpl<_$DateEqualsFilterImpl>(
          this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function(String value) textEquals,
    required TResult Function(String value) textDoesNotEqual,
    required TResult Function(String value) textContains,
    required TResult Function(String value) textDoesNotContain,
    required TResult Function(String value) textStartsWith,
    required TResult Function(String value) textEndsWith,
    required TResult Function() textIsEmpty,
    required TResult Function() textIsNotEmpty,
    required TResult Function(double value) numberEquals,
    required TResult Function(double value) numberDoesNotEqual,
    required TResult Function(double value) numberGreaterThan,
    required TResult Function(double value) numberLessThan,
    required TResult Function(double value) numberGreaterThanOrEqual,
    required TResult Function(double value) numberLessThanOrEqual,
    required TResult Function() numberIsEmpty,
    required TResult Function() numberIsNotEmpty,
    required TResult Function(bool value) checkboxEquals,
    required TResult Function(String value) selectEquals,
    required TResult Function(String value) selectDoesNotEqual,
    required TResult Function() selectIsEmpty,
    required TResult Function() selectIsNotEmpty,
    required TResult Function(String value) multiSelectContains,
    required TResult Function(String value) multiSelectDoesNotContain,
    required TResult Function() multiSelectIsEmpty,
    required TResult Function() multiSelectIsNotEmpty,
    required TResult Function(String date) dateEquals,
    required TResult Function(String date) dateBefore,
    required TResult Function(String date) dateAfter,
    required TResult Function(String date) dateOnOrBefore,
    required TResult Function(String date) dateOnOrAfter,
    required TResult Function() dateIsEmpty,
    required TResult Function() dateIsNotEmpty,
    required TResult Function() datePastWeek,
    required TResult Function() datePastMonth,
    required TResult Function() datePastYear,
    required TResult Function() dateNextWeek,
    required TResult Function() dateNextMonth,
    required TResult Function() dateNextYear,
    required TResult Function(String userId) peopleContains,
    required TResult Function(String userId) peopleDoesNotContain,
    required TResult Function() peopleIsEmpty,
    required TResult Function() peopleIsNotEmpty,
    required TResult Function() filesIsEmpty,
    required TResult Function() filesIsNotEmpty,
    required TResult Function(String pageId) relationContains,
    required TResult Function(String pageId) relationDoesNotContain,
    required TResult Function() relationIsEmpty,
    required TResult Function() relationIsNotEmpty,
  }) {
    return dateEquals(date);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function(String value)? textEquals,
    TResult? Function(String value)? textDoesNotEqual,
    TResult? Function(String value)? textContains,
    TResult? Function(String value)? textDoesNotContain,
    TResult? Function(String value)? textStartsWith,
    TResult? Function(String value)? textEndsWith,
    TResult? Function()? textIsEmpty,
    TResult? Function()? textIsNotEmpty,
    TResult? Function(double value)? numberEquals,
    TResult? Function(double value)? numberDoesNotEqual,
    TResult? Function(double value)? numberGreaterThan,
    TResult? Function(double value)? numberLessThan,
    TResult? Function(double value)? numberGreaterThanOrEqual,
    TResult? Function(double value)? numberLessThanOrEqual,
    TResult? Function()? numberIsEmpty,
    TResult? Function()? numberIsNotEmpty,
    TResult? Function(bool value)? checkboxEquals,
    TResult? Function(String value)? selectEquals,
    TResult? Function(String value)? selectDoesNotEqual,
    TResult? Function()? selectIsEmpty,
    TResult? Function()? selectIsNotEmpty,
    TResult? Function(String value)? multiSelectContains,
    TResult? Function(String value)? multiSelectDoesNotContain,
    TResult? Function()? multiSelectIsEmpty,
    TResult? Function()? multiSelectIsNotEmpty,
    TResult? Function(String date)? dateEquals,
    TResult? Function(String date)? dateBefore,
    TResult? Function(String date)? dateAfter,
    TResult? Function(String date)? dateOnOrBefore,
    TResult? Function(String date)? dateOnOrAfter,
    TResult? Function()? dateIsEmpty,
    TResult? Function()? dateIsNotEmpty,
    TResult? Function()? datePastWeek,
    TResult? Function()? datePastMonth,
    TResult? Function()? datePastYear,
    TResult? Function()? dateNextWeek,
    TResult? Function()? dateNextMonth,
    TResult? Function()? dateNextYear,
    TResult? Function(String userId)? peopleContains,
    TResult? Function(String userId)? peopleDoesNotContain,
    TResult? Function()? peopleIsEmpty,
    TResult? Function()? peopleIsNotEmpty,
    TResult? Function()? filesIsEmpty,
    TResult? Function()? filesIsNotEmpty,
    TResult? Function(String pageId)? relationContains,
    TResult? Function(String pageId)? relationDoesNotContain,
    TResult? Function()? relationIsEmpty,
    TResult? Function()? relationIsNotEmpty,
  }) {
    return dateEquals?.call(date);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function(String value)? textEquals,
    TResult Function(String value)? textDoesNotEqual,
    TResult Function(String value)? textContains,
    TResult Function(String value)? textDoesNotContain,
    TResult Function(String value)? textStartsWith,
    TResult Function(String value)? textEndsWith,
    TResult Function()? textIsEmpty,
    TResult Function()? textIsNotEmpty,
    TResult Function(double value)? numberEquals,
    TResult Function(double value)? numberDoesNotEqual,
    TResult Function(double value)? numberGreaterThan,
    TResult Function(double value)? numberLessThan,
    TResult Function(double value)? numberGreaterThanOrEqual,
    TResult Function(double value)? numberLessThanOrEqual,
    TResult Function()? numberIsEmpty,
    TResult Function()? numberIsNotEmpty,
    TResult Function(bool value)? checkboxEquals,
    TResult Function(String value)? selectEquals,
    TResult Function(String value)? selectDoesNotEqual,
    TResult Function()? selectIsEmpty,
    TResult Function()? selectIsNotEmpty,
    TResult Function(String value)? multiSelectContains,
    TResult Function(String value)? multiSelectDoesNotContain,
    TResult Function()? multiSelectIsEmpty,
    TResult Function()? multiSelectIsNotEmpty,
    TResult Function(String date)? dateEquals,
    TResult Function(String date)? dateBefore,
    TResult Function(String date)? dateAfter,
    TResult Function(String date)? dateOnOrBefore,
    TResult Function(String date)? dateOnOrAfter,
    TResult Function()? dateIsEmpty,
    TResult Function()? dateIsNotEmpty,
    TResult Function()? datePastWeek,
    TResult Function()? datePastMonth,
    TResult Function()? datePastYear,
    TResult Function()? dateNextWeek,
    TResult Function()? dateNextMonth,
    TResult Function()? dateNextYear,
    TResult Function(String userId)? peopleContains,
    TResult Function(String userId)? peopleDoesNotContain,
    TResult Function()? peopleIsEmpty,
    TResult Function()? peopleIsNotEmpty,
    TResult Function()? filesIsEmpty,
    TResult Function()? filesIsNotEmpty,
    TResult Function(String pageId)? relationContains,
    TResult Function(String pageId)? relationDoesNotContain,
    TResult Function()? relationIsEmpty,
    TResult Function()? relationIsNotEmpty,
    required TResult orElse(),
  }) {
    if (dateEquals != null) {
      return dateEquals(date);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(TextEqualsFilter value) textEquals,
    required TResult Function(TextDoesNotEqualFilter value) textDoesNotEqual,
    required TResult Function(TextContainsFilter value) textContains,
    required TResult Function(TextDoesNotContainFilter value)
        textDoesNotContain,
    required TResult Function(TextStartsWithFilter value) textStartsWith,
    required TResult Function(TextEndsWithFilter value) textEndsWith,
    required TResult Function(TextIsEmptyFilter value) textIsEmpty,
    required TResult Function(TextIsNotEmptyFilter value) textIsNotEmpty,
    required TResult Function(NumberEqualsFilter value) numberEquals,
    required TResult Function(NumberDoesNotEqualFilter value)
        numberDoesNotEqual,
    required TResult Function(NumberGreaterThanFilter value) numberGreaterThan,
    required TResult Function(NumberLessThanFilter value) numberLessThan,
    required TResult Function(NumberGreaterThanOrEqualFilter value)
        numberGreaterThanOrEqual,
    required TResult Function(NumberLessThanOrEqualFilter value)
        numberLessThanOrEqual,
    required TResult Function(NumberIsEmptyFilter value) numberIsEmpty,
    required TResult Function(NumberIsNotEmptyFilter value) numberIsNotEmpty,
    required TResult Function(CheckboxEqualsFilter value) checkboxEquals,
    required TResult Function(SelectEqualsFilter value) selectEquals,
    required TResult Function(SelectDoesNotEqualFilter value)
        selectDoesNotEqual,
    required TResult Function(SelectIsEmptyFilter value) selectIsEmpty,
    required TResult Function(SelectIsNotEmptyFilter value) selectIsNotEmpty,
    required TResult Function(MultiSelectContainsFilter value)
        multiSelectContains,
    required TResult Function(MultiSelectDoesNotContainFilter value)
        multiSelectDoesNotContain,
    required TResult Function(MultiSelectIsEmptyFilter value)
        multiSelectIsEmpty,
    required TResult Function(MultiSelectIsNotEmptyFilter value)
        multiSelectIsNotEmpty,
    required TResult Function(DateEqualsFilter value) dateEquals,
    required TResult Function(DateBeforeFilter value) dateBefore,
    required TResult Function(DateAfterFilter value) dateAfter,
    required TResult Function(DateOnOrBeforeFilter value) dateOnOrBefore,
    required TResult Function(DateOnOrAfterFilter value) dateOnOrAfter,
    required TResult Function(DateIsEmptyFilter value) dateIsEmpty,
    required TResult Function(DateIsNotEmptyFilter value) dateIsNotEmpty,
    required TResult Function(DatePastWeekFilter value) datePastWeek,
    required TResult Function(DatePastMonthFilter value) datePastMonth,
    required TResult Function(DatePastYearFilter value) datePastYear,
    required TResult Function(DateNextWeekFilter value) dateNextWeek,
    required TResult Function(DateNextMonthFilter value) dateNextMonth,
    required TResult Function(DateNextYearFilter value) dateNextYear,
    required TResult Function(PeopleContainsFilter value) peopleContains,
    required TResult Function(PeopleDoesNotContainFilter value)
        peopleDoesNotContain,
    required TResult Function(PeopleIsEmptyFilter value) peopleIsEmpty,
    required TResult Function(PeopleIsNotEmptyFilter value) peopleIsNotEmpty,
    required TResult Function(FilesIsEmptyFilter value) filesIsEmpty,
    required TResult Function(FilesIsNotEmptyFilter value) filesIsNotEmpty,
    required TResult Function(RelationContainsFilter value) relationContains,
    required TResult Function(RelationDoesNotContainFilter value)
        relationDoesNotContain,
    required TResult Function(RelationIsEmptyFilter value) relationIsEmpty,
    required TResult Function(RelationIsNotEmptyFilter value)
        relationIsNotEmpty,
  }) {
    return dateEquals(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(TextEqualsFilter value)? textEquals,
    TResult? Function(TextDoesNotEqualFilter value)? textDoesNotEqual,
    TResult? Function(TextContainsFilter value)? textContains,
    TResult? Function(TextDoesNotContainFilter value)? textDoesNotContain,
    TResult? Function(TextStartsWithFilter value)? textStartsWith,
    TResult? Function(TextEndsWithFilter value)? textEndsWith,
    TResult? Function(TextIsEmptyFilter value)? textIsEmpty,
    TResult? Function(TextIsNotEmptyFilter value)? textIsNotEmpty,
    TResult? Function(NumberEqualsFilter value)? numberEquals,
    TResult? Function(NumberDoesNotEqualFilter value)? numberDoesNotEqual,
    TResult? Function(NumberGreaterThanFilter value)? numberGreaterThan,
    TResult? Function(NumberLessThanFilter value)? numberLessThan,
    TResult? Function(NumberGreaterThanOrEqualFilter value)?
        numberGreaterThanOrEqual,
    TResult? Function(NumberLessThanOrEqualFilter value)? numberLessThanOrEqual,
    TResult? Function(NumberIsEmptyFilter value)? numberIsEmpty,
    TResult? Function(NumberIsNotEmptyFilter value)? numberIsNotEmpty,
    TResult? Function(CheckboxEqualsFilter value)? checkboxEquals,
    TResult? Function(SelectEqualsFilter value)? selectEquals,
    TResult? Function(SelectDoesNotEqualFilter value)? selectDoesNotEqual,
    TResult? Function(SelectIsEmptyFilter value)? selectIsEmpty,
    TResult? Function(SelectIsNotEmptyFilter value)? selectIsNotEmpty,
    TResult? Function(MultiSelectContainsFilter value)? multiSelectContains,
    TResult? Function(MultiSelectDoesNotContainFilter value)?
        multiSelectDoesNotContain,
    TResult? Function(MultiSelectIsEmptyFilter value)? multiSelectIsEmpty,
    TResult? Function(MultiSelectIsNotEmptyFilter value)? multiSelectIsNotEmpty,
    TResult? Function(DateEqualsFilter value)? dateEquals,
    TResult? Function(DateBeforeFilter value)? dateBefore,
    TResult? Function(DateAfterFilter value)? dateAfter,
    TResult? Function(DateOnOrBeforeFilter value)? dateOnOrBefore,
    TResult? Function(DateOnOrAfterFilter value)? dateOnOrAfter,
    TResult? Function(DateIsEmptyFilter value)? dateIsEmpty,
    TResult? Function(DateIsNotEmptyFilter value)? dateIsNotEmpty,
    TResult? Function(DatePastWeekFilter value)? datePastWeek,
    TResult? Function(DatePastMonthFilter value)? datePastMonth,
    TResult? Function(DatePastYearFilter value)? datePastYear,
    TResult? Function(DateNextWeekFilter value)? dateNextWeek,
    TResult? Function(DateNextMonthFilter value)? dateNextMonth,
    TResult? Function(DateNextYearFilter value)? dateNextYear,
    TResult? Function(PeopleContainsFilter value)? peopleContains,
    TResult? Function(PeopleDoesNotContainFilter value)? peopleDoesNotContain,
    TResult? Function(PeopleIsEmptyFilter value)? peopleIsEmpty,
    TResult? Function(PeopleIsNotEmptyFilter value)? peopleIsNotEmpty,
    TResult? Function(FilesIsEmptyFilter value)? filesIsEmpty,
    TResult? Function(FilesIsNotEmptyFilter value)? filesIsNotEmpty,
    TResult? Function(RelationContainsFilter value)? relationContains,
    TResult? Function(RelationDoesNotContainFilter value)?
        relationDoesNotContain,
    TResult? Function(RelationIsEmptyFilter value)? relationIsEmpty,
    TResult? Function(RelationIsNotEmptyFilter value)? relationIsNotEmpty,
  }) {
    return dateEquals?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(TextEqualsFilter value)? textEquals,
    TResult Function(TextDoesNotEqualFilter value)? textDoesNotEqual,
    TResult Function(TextContainsFilter value)? textContains,
    TResult Function(TextDoesNotContainFilter value)? textDoesNotContain,
    TResult Function(TextStartsWithFilter value)? textStartsWith,
    TResult Function(TextEndsWithFilter value)? textEndsWith,
    TResult Function(TextIsEmptyFilter value)? textIsEmpty,
    TResult Function(TextIsNotEmptyFilter value)? textIsNotEmpty,
    TResult Function(NumberEqualsFilter value)? numberEquals,
    TResult Function(NumberDoesNotEqualFilter value)? numberDoesNotEqual,
    TResult Function(NumberGreaterThanFilter value)? numberGreaterThan,
    TResult Function(NumberLessThanFilter value)? numberLessThan,
    TResult Function(NumberGreaterThanOrEqualFilter value)?
        numberGreaterThanOrEqual,
    TResult Function(NumberLessThanOrEqualFilter value)? numberLessThanOrEqual,
    TResult Function(NumberIsEmptyFilter value)? numberIsEmpty,
    TResult Function(NumberIsNotEmptyFilter value)? numberIsNotEmpty,
    TResult Function(CheckboxEqualsFilter value)? checkboxEquals,
    TResult Function(SelectEqualsFilter value)? selectEquals,
    TResult Function(SelectDoesNotEqualFilter value)? selectDoesNotEqual,
    TResult Function(SelectIsEmptyFilter value)? selectIsEmpty,
    TResult Function(SelectIsNotEmptyFilter value)? selectIsNotEmpty,
    TResult Function(MultiSelectContainsFilter value)? multiSelectContains,
    TResult Function(MultiSelectDoesNotContainFilter value)?
        multiSelectDoesNotContain,
    TResult Function(MultiSelectIsEmptyFilter value)? multiSelectIsEmpty,
    TResult Function(MultiSelectIsNotEmptyFilter value)? multiSelectIsNotEmpty,
    TResult Function(DateEqualsFilter value)? dateEquals,
    TResult Function(DateBeforeFilter value)? dateBefore,
    TResult Function(DateAfterFilter value)? dateAfter,
    TResult Function(DateOnOrBeforeFilter value)? dateOnOrBefore,
    TResult Function(DateOnOrAfterFilter value)? dateOnOrAfter,
    TResult Function(DateIsEmptyFilter value)? dateIsEmpty,
    TResult Function(DateIsNotEmptyFilter value)? dateIsNotEmpty,
    TResult Function(DatePastWeekFilter value)? datePastWeek,
    TResult Function(DatePastMonthFilter value)? datePastMonth,
    TResult Function(DatePastYearFilter value)? datePastYear,
    TResult Function(DateNextWeekFilter value)? dateNextWeek,
    TResult Function(DateNextMonthFilter value)? dateNextMonth,
    TResult Function(DateNextYearFilter value)? dateNextYear,
    TResult Function(PeopleContainsFilter value)? peopleContains,
    TResult Function(PeopleDoesNotContainFilter value)? peopleDoesNotContain,
    TResult Function(PeopleIsEmptyFilter value)? peopleIsEmpty,
    TResult Function(PeopleIsNotEmptyFilter value)? peopleIsNotEmpty,
    TResult Function(FilesIsEmptyFilter value)? filesIsEmpty,
    TResult Function(FilesIsNotEmptyFilter value)? filesIsNotEmpty,
    TResult Function(RelationContainsFilter value)? relationContains,
    TResult Function(RelationDoesNotContainFilter value)?
        relationDoesNotContain,
    TResult Function(RelationIsEmptyFilter value)? relationIsEmpty,
    TResult Function(RelationIsNotEmptyFilter value)? relationIsNotEmpty,
    required TResult orElse(),
  }) {
    if (dateEquals != null) {
      return dateEquals(this);
    }
    return orElse();
  }
}

abstract class DateEqualsFilter extends PropertyFilter {
  const factory DateEqualsFilter(final String date) = _$DateEqualsFilterImpl;
  const DateEqualsFilter._() : super._();

  String get date;

  /// Create a copy of PropertyFilter
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  _$$DateEqualsFilterImplCopyWith<_$DateEqualsFilterImpl> get copyWith =>
      throw _privateConstructorUsedError;
}

/// @nodoc
abstract class _$$DateBeforeFilterImplCopyWith<$Res> {
  factory _$$DateBeforeFilterImplCopyWith(_$DateBeforeFilterImpl value,
          $Res Function(_$DateBeforeFilterImpl) then) =
      __$$DateBeforeFilterImplCopyWithImpl<$Res>;
  @useResult
  $Res call({String date});
}

/// @nodoc
class __$$DateBeforeFilterImplCopyWithImpl<$Res>
    extends _$PropertyFilterCopyWithImpl<$Res, _$DateBeforeFilterImpl>
    implements _$$DateBeforeFilterImplCopyWith<$Res> {
  __$$DateBeforeFilterImplCopyWithImpl(_$DateBeforeFilterImpl _value,
      $Res Function(_$DateBeforeFilterImpl) _then)
      : super(_value, _then);

  /// Create a copy of PropertyFilter
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? date = null,
  }) {
    return _then(_$DateBeforeFilterImpl(
      null == date
          ? _value.date
          : date // ignore: cast_nullable_to_non_nullable
              as String,
    ));
  }
}

/// @nodoc

class _$DateBeforeFilterImpl extends DateBeforeFilter {
  const _$DateBeforeFilterImpl(this.date) : super._();

  @override
  final String date;

  @override
  String toString() {
    return 'PropertyFilter.dateBefore(date: $date)';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$DateBeforeFilterImpl &&
            (identical(other.date, date) || other.date == date));
  }

  @override
  int get hashCode => Object.hash(runtimeType, date);

  /// Create a copy of PropertyFilter
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  @pragma('vm:prefer-inline')
  _$$DateBeforeFilterImplCopyWith<_$DateBeforeFilterImpl> get copyWith =>
      __$$DateBeforeFilterImplCopyWithImpl<_$DateBeforeFilterImpl>(
          this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function(String value) textEquals,
    required TResult Function(String value) textDoesNotEqual,
    required TResult Function(String value) textContains,
    required TResult Function(String value) textDoesNotContain,
    required TResult Function(String value) textStartsWith,
    required TResult Function(String value) textEndsWith,
    required TResult Function() textIsEmpty,
    required TResult Function() textIsNotEmpty,
    required TResult Function(double value) numberEquals,
    required TResult Function(double value) numberDoesNotEqual,
    required TResult Function(double value) numberGreaterThan,
    required TResult Function(double value) numberLessThan,
    required TResult Function(double value) numberGreaterThanOrEqual,
    required TResult Function(double value) numberLessThanOrEqual,
    required TResult Function() numberIsEmpty,
    required TResult Function() numberIsNotEmpty,
    required TResult Function(bool value) checkboxEquals,
    required TResult Function(String value) selectEquals,
    required TResult Function(String value) selectDoesNotEqual,
    required TResult Function() selectIsEmpty,
    required TResult Function() selectIsNotEmpty,
    required TResult Function(String value) multiSelectContains,
    required TResult Function(String value) multiSelectDoesNotContain,
    required TResult Function() multiSelectIsEmpty,
    required TResult Function() multiSelectIsNotEmpty,
    required TResult Function(String date) dateEquals,
    required TResult Function(String date) dateBefore,
    required TResult Function(String date) dateAfter,
    required TResult Function(String date) dateOnOrBefore,
    required TResult Function(String date) dateOnOrAfter,
    required TResult Function() dateIsEmpty,
    required TResult Function() dateIsNotEmpty,
    required TResult Function() datePastWeek,
    required TResult Function() datePastMonth,
    required TResult Function() datePastYear,
    required TResult Function() dateNextWeek,
    required TResult Function() dateNextMonth,
    required TResult Function() dateNextYear,
    required TResult Function(String userId) peopleContains,
    required TResult Function(String userId) peopleDoesNotContain,
    required TResult Function() peopleIsEmpty,
    required TResult Function() peopleIsNotEmpty,
    required TResult Function() filesIsEmpty,
    required TResult Function() filesIsNotEmpty,
    required TResult Function(String pageId) relationContains,
    required TResult Function(String pageId) relationDoesNotContain,
    required TResult Function() relationIsEmpty,
    required TResult Function() relationIsNotEmpty,
  }) {
    return dateBefore(date);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function(String value)? textEquals,
    TResult? Function(String value)? textDoesNotEqual,
    TResult? Function(String value)? textContains,
    TResult? Function(String value)? textDoesNotContain,
    TResult? Function(String value)? textStartsWith,
    TResult? Function(String value)? textEndsWith,
    TResult? Function()? textIsEmpty,
    TResult? Function()? textIsNotEmpty,
    TResult? Function(double value)? numberEquals,
    TResult? Function(double value)? numberDoesNotEqual,
    TResult? Function(double value)? numberGreaterThan,
    TResult? Function(double value)? numberLessThan,
    TResult? Function(double value)? numberGreaterThanOrEqual,
    TResult? Function(double value)? numberLessThanOrEqual,
    TResult? Function()? numberIsEmpty,
    TResult? Function()? numberIsNotEmpty,
    TResult? Function(bool value)? checkboxEquals,
    TResult? Function(String value)? selectEquals,
    TResult? Function(String value)? selectDoesNotEqual,
    TResult? Function()? selectIsEmpty,
    TResult? Function()? selectIsNotEmpty,
    TResult? Function(String value)? multiSelectContains,
    TResult? Function(String value)? multiSelectDoesNotContain,
    TResult? Function()? multiSelectIsEmpty,
    TResult? Function()? multiSelectIsNotEmpty,
    TResult? Function(String date)? dateEquals,
    TResult? Function(String date)? dateBefore,
    TResult? Function(String date)? dateAfter,
    TResult? Function(String date)? dateOnOrBefore,
    TResult? Function(String date)? dateOnOrAfter,
    TResult? Function()? dateIsEmpty,
    TResult? Function()? dateIsNotEmpty,
    TResult? Function()? datePastWeek,
    TResult? Function()? datePastMonth,
    TResult? Function()? datePastYear,
    TResult? Function()? dateNextWeek,
    TResult? Function()? dateNextMonth,
    TResult? Function()? dateNextYear,
    TResult? Function(String userId)? peopleContains,
    TResult? Function(String userId)? peopleDoesNotContain,
    TResult? Function()? peopleIsEmpty,
    TResult? Function()? peopleIsNotEmpty,
    TResult? Function()? filesIsEmpty,
    TResult? Function()? filesIsNotEmpty,
    TResult? Function(String pageId)? relationContains,
    TResult? Function(String pageId)? relationDoesNotContain,
    TResult? Function()? relationIsEmpty,
    TResult? Function()? relationIsNotEmpty,
  }) {
    return dateBefore?.call(date);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function(String value)? textEquals,
    TResult Function(String value)? textDoesNotEqual,
    TResult Function(String value)? textContains,
    TResult Function(String value)? textDoesNotContain,
    TResult Function(String value)? textStartsWith,
    TResult Function(String value)? textEndsWith,
    TResult Function()? textIsEmpty,
    TResult Function()? textIsNotEmpty,
    TResult Function(double value)? numberEquals,
    TResult Function(double value)? numberDoesNotEqual,
    TResult Function(double value)? numberGreaterThan,
    TResult Function(double value)? numberLessThan,
    TResult Function(double value)? numberGreaterThanOrEqual,
    TResult Function(double value)? numberLessThanOrEqual,
    TResult Function()? numberIsEmpty,
    TResult Function()? numberIsNotEmpty,
    TResult Function(bool value)? checkboxEquals,
    TResult Function(String value)? selectEquals,
    TResult Function(String value)? selectDoesNotEqual,
    TResult Function()? selectIsEmpty,
    TResult Function()? selectIsNotEmpty,
    TResult Function(String value)? multiSelectContains,
    TResult Function(String value)? multiSelectDoesNotContain,
    TResult Function()? multiSelectIsEmpty,
    TResult Function()? multiSelectIsNotEmpty,
    TResult Function(String date)? dateEquals,
    TResult Function(String date)? dateBefore,
    TResult Function(String date)? dateAfter,
    TResult Function(String date)? dateOnOrBefore,
    TResult Function(String date)? dateOnOrAfter,
    TResult Function()? dateIsEmpty,
    TResult Function()? dateIsNotEmpty,
    TResult Function()? datePastWeek,
    TResult Function()? datePastMonth,
    TResult Function()? datePastYear,
    TResult Function()? dateNextWeek,
    TResult Function()? dateNextMonth,
    TResult Function()? dateNextYear,
    TResult Function(String userId)? peopleContains,
    TResult Function(String userId)? peopleDoesNotContain,
    TResult Function()? peopleIsEmpty,
    TResult Function()? peopleIsNotEmpty,
    TResult Function()? filesIsEmpty,
    TResult Function()? filesIsNotEmpty,
    TResult Function(String pageId)? relationContains,
    TResult Function(String pageId)? relationDoesNotContain,
    TResult Function()? relationIsEmpty,
    TResult Function()? relationIsNotEmpty,
    required TResult orElse(),
  }) {
    if (dateBefore != null) {
      return dateBefore(date);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(TextEqualsFilter value) textEquals,
    required TResult Function(TextDoesNotEqualFilter value) textDoesNotEqual,
    required TResult Function(TextContainsFilter value) textContains,
    required TResult Function(TextDoesNotContainFilter value)
        textDoesNotContain,
    required TResult Function(TextStartsWithFilter value) textStartsWith,
    required TResult Function(TextEndsWithFilter value) textEndsWith,
    required TResult Function(TextIsEmptyFilter value) textIsEmpty,
    required TResult Function(TextIsNotEmptyFilter value) textIsNotEmpty,
    required TResult Function(NumberEqualsFilter value) numberEquals,
    required TResult Function(NumberDoesNotEqualFilter value)
        numberDoesNotEqual,
    required TResult Function(NumberGreaterThanFilter value) numberGreaterThan,
    required TResult Function(NumberLessThanFilter value) numberLessThan,
    required TResult Function(NumberGreaterThanOrEqualFilter value)
        numberGreaterThanOrEqual,
    required TResult Function(NumberLessThanOrEqualFilter value)
        numberLessThanOrEqual,
    required TResult Function(NumberIsEmptyFilter value) numberIsEmpty,
    required TResult Function(NumberIsNotEmptyFilter value) numberIsNotEmpty,
    required TResult Function(CheckboxEqualsFilter value) checkboxEquals,
    required TResult Function(SelectEqualsFilter value) selectEquals,
    required TResult Function(SelectDoesNotEqualFilter value)
        selectDoesNotEqual,
    required TResult Function(SelectIsEmptyFilter value) selectIsEmpty,
    required TResult Function(SelectIsNotEmptyFilter value) selectIsNotEmpty,
    required TResult Function(MultiSelectContainsFilter value)
        multiSelectContains,
    required TResult Function(MultiSelectDoesNotContainFilter value)
        multiSelectDoesNotContain,
    required TResult Function(MultiSelectIsEmptyFilter value)
        multiSelectIsEmpty,
    required TResult Function(MultiSelectIsNotEmptyFilter value)
        multiSelectIsNotEmpty,
    required TResult Function(DateEqualsFilter value) dateEquals,
    required TResult Function(DateBeforeFilter value) dateBefore,
    required TResult Function(DateAfterFilter value) dateAfter,
    required TResult Function(DateOnOrBeforeFilter value) dateOnOrBefore,
    required TResult Function(DateOnOrAfterFilter value) dateOnOrAfter,
    required TResult Function(DateIsEmptyFilter value) dateIsEmpty,
    required TResult Function(DateIsNotEmptyFilter value) dateIsNotEmpty,
    required TResult Function(DatePastWeekFilter value) datePastWeek,
    required TResult Function(DatePastMonthFilter value) datePastMonth,
    required TResult Function(DatePastYearFilter value) datePastYear,
    required TResult Function(DateNextWeekFilter value) dateNextWeek,
    required TResult Function(DateNextMonthFilter value) dateNextMonth,
    required TResult Function(DateNextYearFilter value) dateNextYear,
    required TResult Function(PeopleContainsFilter value) peopleContains,
    required TResult Function(PeopleDoesNotContainFilter value)
        peopleDoesNotContain,
    required TResult Function(PeopleIsEmptyFilter value) peopleIsEmpty,
    required TResult Function(PeopleIsNotEmptyFilter value) peopleIsNotEmpty,
    required TResult Function(FilesIsEmptyFilter value) filesIsEmpty,
    required TResult Function(FilesIsNotEmptyFilter value) filesIsNotEmpty,
    required TResult Function(RelationContainsFilter value) relationContains,
    required TResult Function(RelationDoesNotContainFilter value)
        relationDoesNotContain,
    required TResult Function(RelationIsEmptyFilter value) relationIsEmpty,
    required TResult Function(RelationIsNotEmptyFilter value)
        relationIsNotEmpty,
  }) {
    return dateBefore(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(TextEqualsFilter value)? textEquals,
    TResult? Function(TextDoesNotEqualFilter value)? textDoesNotEqual,
    TResult? Function(TextContainsFilter value)? textContains,
    TResult? Function(TextDoesNotContainFilter value)? textDoesNotContain,
    TResult? Function(TextStartsWithFilter value)? textStartsWith,
    TResult? Function(TextEndsWithFilter value)? textEndsWith,
    TResult? Function(TextIsEmptyFilter value)? textIsEmpty,
    TResult? Function(TextIsNotEmptyFilter value)? textIsNotEmpty,
    TResult? Function(NumberEqualsFilter value)? numberEquals,
    TResult? Function(NumberDoesNotEqualFilter value)? numberDoesNotEqual,
    TResult? Function(NumberGreaterThanFilter value)? numberGreaterThan,
    TResult? Function(NumberLessThanFilter value)? numberLessThan,
    TResult? Function(NumberGreaterThanOrEqualFilter value)?
        numberGreaterThanOrEqual,
    TResult? Function(NumberLessThanOrEqualFilter value)? numberLessThanOrEqual,
    TResult? Function(NumberIsEmptyFilter value)? numberIsEmpty,
    TResult? Function(NumberIsNotEmptyFilter value)? numberIsNotEmpty,
    TResult? Function(CheckboxEqualsFilter value)? checkboxEquals,
    TResult? Function(SelectEqualsFilter value)? selectEquals,
    TResult? Function(SelectDoesNotEqualFilter value)? selectDoesNotEqual,
    TResult? Function(SelectIsEmptyFilter value)? selectIsEmpty,
    TResult? Function(SelectIsNotEmptyFilter value)? selectIsNotEmpty,
    TResult? Function(MultiSelectContainsFilter value)? multiSelectContains,
    TResult? Function(MultiSelectDoesNotContainFilter value)?
        multiSelectDoesNotContain,
    TResult? Function(MultiSelectIsEmptyFilter value)? multiSelectIsEmpty,
    TResult? Function(MultiSelectIsNotEmptyFilter value)? multiSelectIsNotEmpty,
    TResult? Function(DateEqualsFilter value)? dateEquals,
    TResult? Function(DateBeforeFilter value)? dateBefore,
    TResult? Function(DateAfterFilter value)? dateAfter,
    TResult? Function(DateOnOrBeforeFilter value)? dateOnOrBefore,
    TResult? Function(DateOnOrAfterFilter value)? dateOnOrAfter,
    TResult? Function(DateIsEmptyFilter value)? dateIsEmpty,
    TResult? Function(DateIsNotEmptyFilter value)? dateIsNotEmpty,
    TResult? Function(DatePastWeekFilter value)? datePastWeek,
    TResult? Function(DatePastMonthFilter value)? datePastMonth,
    TResult? Function(DatePastYearFilter value)? datePastYear,
    TResult? Function(DateNextWeekFilter value)? dateNextWeek,
    TResult? Function(DateNextMonthFilter value)? dateNextMonth,
    TResult? Function(DateNextYearFilter value)? dateNextYear,
    TResult? Function(PeopleContainsFilter value)? peopleContains,
    TResult? Function(PeopleDoesNotContainFilter value)? peopleDoesNotContain,
    TResult? Function(PeopleIsEmptyFilter value)? peopleIsEmpty,
    TResult? Function(PeopleIsNotEmptyFilter value)? peopleIsNotEmpty,
    TResult? Function(FilesIsEmptyFilter value)? filesIsEmpty,
    TResult? Function(FilesIsNotEmptyFilter value)? filesIsNotEmpty,
    TResult? Function(RelationContainsFilter value)? relationContains,
    TResult? Function(RelationDoesNotContainFilter value)?
        relationDoesNotContain,
    TResult? Function(RelationIsEmptyFilter value)? relationIsEmpty,
    TResult? Function(RelationIsNotEmptyFilter value)? relationIsNotEmpty,
  }) {
    return dateBefore?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(TextEqualsFilter value)? textEquals,
    TResult Function(TextDoesNotEqualFilter value)? textDoesNotEqual,
    TResult Function(TextContainsFilter value)? textContains,
    TResult Function(TextDoesNotContainFilter value)? textDoesNotContain,
    TResult Function(TextStartsWithFilter value)? textStartsWith,
    TResult Function(TextEndsWithFilter value)? textEndsWith,
    TResult Function(TextIsEmptyFilter value)? textIsEmpty,
    TResult Function(TextIsNotEmptyFilter value)? textIsNotEmpty,
    TResult Function(NumberEqualsFilter value)? numberEquals,
    TResult Function(NumberDoesNotEqualFilter value)? numberDoesNotEqual,
    TResult Function(NumberGreaterThanFilter value)? numberGreaterThan,
    TResult Function(NumberLessThanFilter value)? numberLessThan,
    TResult Function(NumberGreaterThanOrEqualFilter value)?
        numberGreaterThanOrEqual,
    TResult Function(NumberLessThanOrEqualFilter value)? numberLessThanOrEqual,
    TResult Function(NumberIsEmptyFilter value)? numberIsEmpty,
    TResult Function(NumberIsNotEmptyFilter value)? numberIsNotEmpty,
    TResult Function(CheckboxEqualsFilter value)? checkboxEquals,
    TResult Function(SelectEqualsFilter value)? selectEquals,
    TResult Function(SelectDoesNotEqualFilter value)? selectDoesNotEqual,
    TResult Function(SelectIsEmptyFilter value)? selectIsEmpty,
    TResult Function(SelectIsNotEmptyFilter value)? selectIsNotEmpty,
    TResult Function(MultiSelectContainsFilter value)? multiSelectContains,
    TResult Function(MultiSelectDoesNotContainFilter value)?
        multiSelectDoesNotContain,
    TResult Function(MultiSelectIsEmptyFilter value)? multiSelectIsEmpty,
    TResult Function(MultiSelectIsNotEmptyFilter value)? multiSelectIsNotEmpty,
    TResult Function(DateEqualsFilter value)? dateEquals,
    TResult Function(DateBeforeFilter value)? dateBefore,
    TResult Function(DateAfterFilter value)? dateAfter,
    TResult Function(DateOnOrBeforeFilter value)? dateOnOrBefore,
    TResult Function(DateOnOrAfterFilter value)? dateOnOrAfter,
    TResult Function(DateIsEmptyFilter value)? dateIsEmpty,
    TResult Function(DateIsNotEmptyFilter value)? dateIsNotEmpty,
    TResult Function(DatePastWeekFilter value)? datePastWeek,
    TResult Function(DatePastMonthFilter value)? datePastMonth,
    TResult Function(DatePastYearFilter value)? datePastYear,
    TResult Function(DateNextWeekFilter value)? dateNextWeek,
    TResult Function(DateNextMonthFilter value)? dateNextMonth,
    TResult Function(DateNextYearFilter value)? dateNextYear,
    TResult Function(PeopleContainsFilter value)? peopleContains,
    TResult Function(PeopleDoesNotContainFilter value)? peopleDoesNotContain,
    TResult Function(PeopleIsEmptyFilter value)? peopleIsEmpty,
    TResult Function(PeopleIsNotEmptyFilter value)? peopleIsNotEmpty,
    TResult Function(FilesIsEmptyFilter value)? filesIsEmpty,
    TResult Function(FilesIsNotEmptyFilter value)? filesIsNotEmpty,
    TResult Function(RelationContainsFilter value)? relationContains,
    TResult Function(RelationDoesNotContainFilter value)?
        relationDoesNotContain,
    TResult Function(RelationIsEmptyFilter value)? relationIsEmpty,
    TResult Function(RelationIsNotEmptyFilter value)? relationIsNotEmpty,
    required TResult orElse(),
  }) {
    if (dateBefore != null) {
      return dateBefore(this);
    }
    return orElse();
  }
}

abstract class DateBeforeFilter extends PropertyFilter {
  const factory DateBeforeFilter(final String date) = _$DateBeforeFilterImpl;
  const DateBeforeFilter._() : super._();

  String get date;

  /// Create a copy of PropertyFilter
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  _$$DateBeforeFilterImplCopyWith<_$DateBeforeFilterImpl> get copyWith =>
      throw _privateConstructorUsedError;
}

/// @nodoc
abstract class _$$DateAfterFilterImplCopyWith<$Res> {
  factory _$$DateAfterFilterImplCopyWith(_$DateAfterFilterImpl value,
          $Res Function(_$DateAfterFilterImpl) then) =
      __$$DateAfterFilterImplCopyWithImpl<$Res>;
  @useResult
  $Res call({String date});
}

/// @nodoc
class __$$DateAfterFilterImplCopyWithImpl<$Res>
    extends _$PropertyFilterCopyWithImpl<$Res, _$DateAfterFilterImpl>
    implements _$$DateAfterFilterImplCopyWith<$Res> {
  __$$DateAfterFilterImplCopyWithImpl(
      _$DateAfterFilterImpl _value, $Res Function(_$DateAfterFilterImpl) _then)
      : super(_value, _then);

  /// Create a copy of PropertyFilter
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? date = null,
  }) {
    return _then(_$DateAfterFilterImpl(
      null == date
          ? _value.date
          : date // ignore: cast_nullable_to_non_nullable
              as String,
    ));
  }
}

/// @nodoc

class _$DateAfterFilterImpl extends DateAfterFilter {
  const _$DateAfterFilterImpl(this.date) : super._();

  @override
  final String date;

  @override
  String toString() {
    return 'PropertyFilter.dateAfter(date: $date)';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$DateAfterFilterImpl &&
            (identical(other.date, date) || other.date == date));
  }

  @override
  int get hashCode => Object.hash(runtimeType, date);

  /// Create a copy of PropertyFilter
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  @pragma('vm:prefer-inline')
  _$$DateAfterFilterImplCopyWith<_$DateAfterFilterImpl> get copyWith =>
      __$$DateAfterFilterImplCopyWithImpl<_$DateAfterFilterImpl>(
          this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function(String value) textEquals,
    required TResult Function(String value) textDoesNotEqual,
    required TResult Function(String value) textContains,
    required TResult Function(String value) textDoesNotContain,
    required TResult Function(String value) textStartsWith,
    required TResult Function(String value) textEndsWith,
    required TResult Function() textIsEmpty,
    required TResult Function() textIsNotEmpty,
    required TResult Function(double value) numberEquals,
    required TResult Function(double value) numberDoesNotEqual,
    required TResult Function(double value) numberGreaterThan,
    required TResult Function(double value) numberLessThan,
    required TResult Function(double value) numberGreaterThanOrEqual,
    required TResult Function(double value) numberLessThanOrEqual,
    required TResult Function() numberIsEmpty,
    required TResult Function() numberIsNotEmpty,
    required TResult Function(bool value) checkboxEquals,
    required TResult Function(String value) selectEquals,
    required TResult Function(String value) selectDoesNotEqual,
    required TResult Function() selectIsEmpty,
    required TResult Function() selectIsNotEmpty,
    required TResult Function(String value) multiSelectContains,
    required TResult Function(String value) multiSelectDoesNotContain,
    required TResult Function() multiSelectIsEmpty,
    required TResult Function() multiSelectIsNotEmpty,
    required TResult Function(String date) dateEquals,
    required TResult Function(String date) dateBefore,
    required TResult Function(String date) dateAfter,
    required TResult Function(String date) dateOnOrBefore,
    required TResult Function(String date) dateOnOrAfter,
    required TResult Function() dateIsEmpty,
    required TResult Function() dateIsNotEmpty,
    required TResult Function() datePastWeek,
    required TResult Function() datePastMonth,
    required TResult Function() datePastYear,
    required TResult Function() dateNextWeek,
    required TResult Function() dateNextMonth,
    required TResult Function() dateNextYear,
    required TResult Function(String userId) peopleContains,
    required TResult Function(String userId) peopleDoesNotContain,
    required TResult Function() peopleIsEmpty,
    required TResult Function() peopleIsNotEmpty,
    required TResult Function() filesIsEmpty,
    required TResult Function() filesIsNotEmpty,
    required TResult Function(String pageId) relationContains,
    required TResult Function(String pageId) relationDoesNotContain,
    required TResult Function() relationIsEmpty,
    required TResult Function() relationIsNotEmpty,
  }) {
    return dateAfter(date);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function(String value)? textEquals,
    TResult? Function(String value)? textDoesNotEqual,
    TResult? Function(String value)? textContains,
    TResult? Function(String value)? textDoesNotContain,
    TResult? Function(String value)? textStartsWith,
    TResult? Function(String value)? textEndsWith,
    TResult? Function()? textIsEmpty,
    TResult? Function()? textIsNotEmpty,
    TResult? Function(double value)? numberEquals,
    TResult? Function(double value)? numberDoesNotEqual,
    TResult? Function(double value)? numberGreaterThan,
    TResult? Function(double value)? numberLessThan,
    TResult? Function(double value)? numberGreaterThanOrEqual,
    TResult? Function(double value)? numberLessThanOrEqual,
    TResult? Function()? numberIsEmpty,
    TResult? Function()? numberIsNotEmpty,
    TResult? Function(bool value)? checkboxEquals,
    TResult? Function(String value)? selectEquals,
    TResult? Function(String value)? selectDoesNotEqual,
    TResult? Function()? selectIsEmpty,
    TResult? Function()? selectIsNotEmpty,
    TResult? Function(String value)? multiSelectContains,
    TResult? Function(String value)? multiSelectDoesNotContain,
    TResult? Function()? multiSelectIsEmpty,
    TResult? Function()? multiSelectIsNotEmpty,
    TResult? Function(String date)? dateEquals,
    TResult? Function(String date)? dateBefore,
    TResult? Function(String date)? dateAfter,
    TResult? Function(String date)? dateOnOrBefore,
    TResult? Function(String date)? dateOnOrAfter,
    TResult? Function()? dateIsEmpty,
    TResult? Function()? dateIsNotEmpty,
    TResult? Function()? datePastWeek,
    TResult? Function()? datePastMonth,
    TResult? Function()? datePastYear,
    TResult? Function()? dateNextWeek,
    TResult? Function()? dateNextMonth,
    TResult? Function()? dateNextYear,
    TResult? Function(String userId)? peopleContains,
    TResult? Function(String userId)? peopleDoesNotContain,
    TResult? Function()? peopleIsEmpty,
    TResult? Function()? peopleIsNotEmpty,
    TResult? Function()? filesIsEmpty,
    TResult? Function()? filesIsNotEmpty,
    TResult? Function(String pageId)? relationContains,
    TResult? Function(String pageId)? relationDoesNotContain,
    TResult? Function()? relationIsEmpty,
    TResult? Function()? relationIsNotEmpty,
  }) {
    return dateAfter?.call(date);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function(String value)? textEquals,
    TResult Function(String value)? textDoesNotEqual,
    TResult Function(String value)? textContains,
    TResult Function(String value)? textDoesNotContain,
    TResult Function(String value)? textStartsWith,
    TResult Function(String value)? textEndsWith,
    TResult Function()? textIsEmpty,
    TResult Function()? textIsNotEmpty,
    TResult Function(double value)? numberEquals,
    TResult Function(double value)? numberDoesNotEqual,
    TResult Function(double value)? numberGreaterThan,
    TResult Function(double value)? numberLessThan,
    TResult Function(double value)? numberGreaterThanOrEqual,
    TResult Function(double value)? numberLessThanOrEqual,
    TResult Function()? numberIsEmpty,
    TResult Function()? numberIsNotEmpty,
    TResult Function(bool value)? checkboxEquals,
    TResult Function(String value)? selectEquals,
    TResult Function(String value)? selectDoesNotEqual,
    TResult Function()? selectIsEmpty,
    TResult Function()? selectIsNotEmpty,
    TResult Function(String value)? multiSelectContains,
    TResult Function(String value)? multiSelectDoesNotContain,
    TResult Function()? multiSelectIsEmpty,
    TResult Function()? multiSelectIsNotEmpty,
    TResult Function(String date)? dateEquals,
    TResult Function(String date)? dateBefore,
    TResult Function(String date)? dateAfter,
    TResult Function(String date)? dateOnOrBefore,
    TResult Function(String date)? dateOnOrAfter,
    TResult Function()? dateIsEmpty,
    TResult Function()? dateIsNotEmpty,
    TResult Function()? datePastWeek,
    TResult Function()? datePastMonth,
    TResult Function()? datePastYear,
    TResult Function()? dateNextWeek,
    TResult Function()? dateNextMonth,
    TResult Function()? dateNextYear,
    TResult Function(String userId)? peopleContains,
    TResult Function(String userId)? peopleDoesNotContain,
    TResult Function()? peopleIsEmpty,
    TResult Function()? peopleIsNotEmpty,
    TResult Function()? filesIsEmpty,
    TResult Function()? filesIsNotEmpty,
    TResult Function(String pageId)? relationContains,
    TResult Function(String pageId)? relationDoesNotContain,
    TResult Function()? relationIsEmpty,
    TResult Function()? relationIsNotEmpty,
    required TResult orElse(),
  }) {
    if (dateAfter != null) {
      return dateAfter(date);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(TextEqualsFilter value) textEquals,
    required TResult Function(TextDoesNotEqualFilter value) textDoesNotEqual,
    required TResult Function(TextContainsFilter value) textContains,
    required TResult Function(TextDoesNotContainFilter value)
        textDoesNotContain,
    required TResult Function(TextStartsWithFilter value) textStartsWith,
    required TResult Function(TextEndsWithFilter value) textEndsWith,
    required TResult Function(TextIsEmptyFilter value) textIsEmpty,
    required TResult Function(TextIsNotEmptyFilter value) textIsNotEmpty,
    required TResult Function(NumberEqualsFilter value) numberEquals,
    required TResult Function(NumberDoesNotEqualFilter value)
        numberDoesNotEqual,
    required TResult Function(NumberGreaterThanFilter value) numberGreaterThan,
    required TResult Function(NumberLessThanFilter value) numberLessThan,
    required TResult Function(NumberGreaterThanOrEqualFilter value)
        numberGreaterThanOrEqual,
    required TResult Function(NumberLessThanOrEqualFilter value)
        numberLessThanOrEqual,
    required TResult Function(NumberIsEmptyFilter value) numberIsEmpty,
    required TResult Function(NumberIsNotEmptyFilter value) numberIsNotEmpty,
    required TResult Function(CheckboxEqualsFilter value) checkboxEquals,
    required TResult Function(SelectEqualsFilter value) selectEquals,
    required TResult Function(SelectDoesNotEqualFilter value)
        selectDoesNotEqual,
    required TResult Function(SelectIsEmptyFilter value) selectIsEmpty,
    required TResult Function(SelectIsNotEmptyFilter value) selectIsNotEmpty,
    required TResult Function(MultiSelectContainsFilter value)
        multiSelectContains,
    required TResult Function(MultiSelectDoesNotContainFilter value)
        multiSelectDoesNotContain,
    required TResult Function(MultiSelectIsEmptyFilter value)
        multiSelectIsEmpty,
    required TResult Function(MultiSelectIsNotEmptyFilter value)
        multiSelectIsNotEmpty,
    required TResult Function(DateEqualsFilter value) dateEquals,
    required TResult Function(DateBeforeFilter value) dateBefore,
    required TResult Function(DateAfterFilter value) dateAfter,
    required TResult Function(DateOnOrBeforeFilter value) dateOnOrBefore,
    required TResult Function(DateOnOrAfterFilter value) dateOnOrAfter,
    required TResult Function(DateIsEmptyFilter value) dateIsEmpty,
    required TResult Function(DateIsNotEmptyFilter value) dateIsNotEmpty,
    required TResult Function(DatePastWeekFilter value) datePastWeek,
    required TResult Function(DatePastMonthFilter value) datePastMonth,
    required TResult Function(DatePastYearFilter value) datePastYear,
    required TResult Function(DateNextWeekFilter value) dateNextWeek,
    required TResult Function(DateNextMonthFilter value) dateNextMonth,
    required TResult Function(DateNextYearFilter value) dateNextYear,
    required TResult Function(PeopleContainsFilter value) peopleContains,
    required TResult Function(PeopleDoesNotContainFilter value)
        peopleDoesNotContain,
    required TResult Function(PeopleIsEmptyFilter value) peopleIsEmpty,
    required TResult Function(PeopleIsNotEmptyFilter value) peopleIsNotEmpty,
    required TResult Function(FilesIsEmptyFilter value) filesIsEmpty,
    required TResult Function(FilesIsNotEmptyFilter value) filesIsNotEmpty,
    required TResult Function(RelationContainsFilter value) relationContains,
    required TResult Function(RelationDoesNotContainFilter value)
        relationDoesNotContain,
    required TResult Function(RelationIsEmptyFilter value) relationIsEmpty,
    required TResult Function(RelationIsNotEmptyFilter value)
        relationIsNotEmpty,
  }) {
    return dateAfter(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(TextEqualsFilter value)? textEquals,
    TResult? Function(TextDoesNotEqualFilter value)? textDoesNotEqual,
    TResult? Function(TextContainsFilter value)? textContains,
    TResult? Function(TextDoesNotContainFilter value)? textDoesNotContain,
    TResult? Function(TextStartsWithFilter value)? textStartsWith,
    TResult? Function(TextEndsWithFilter value)? textEndsWith,
    TResult? Function(TextIsEmptyFilter value)? textIsEmpty,
    TResult? Function(TextIsNotEmptyFilter value)? textIsNotEmpty,
    TResult? Function(NumberEqualsFilter value)? numberEquals,
    TResult? Function(NumberDoesNotEqualFilter value)? numberDoesNotEqual,
    TResult? Function(NumberGreaterThanFilter value)? numberGreaterThan,
    TResult? Function(NumberLessThanFilter value)? numberLessThan,
    TResult? Function(NumberGreaterThanOrEqualFilter value)?
        numberGreaterThanOrEqual,
    TResult? Function(NumberLessThanOrEqualFilter value)? numberLessThanOrEqual,
    TResult? Function(NumberIsEmptyFilter value)? numberIsEmpty,
    TResult? Function(NumberIsNotEmptyFilter value)? numberIsNotEmpty,
    TResult? Function(CheckboxEqualsFilter value)? checkboxEquals,
    TResult? Function(SelectEqualsFilter value)? selectEquals,
    TResult? Function(SelectDoesNotEqualFilter value)? selectDoesNotEqual,
    TResult? Function(SelectIsEmptyFilter value)? selectIsEmpty,
    TResult? Function(SelectIsNotEmptyFilter value)? selectIsNotEmpty,
    TResult? Function(MultiSelectContainsFilter value)? multiSelectContains,
    TResult? Function(MultiSelectDoesNotContainFilter value)?
        multiSelectDoesNotContain,
    TResult? Function(MultiSelectIsEmptyFilter value)? multiSelectIsEmpty,
    TResult? Function(MultiSelectIsNotEmptyFilter value)? multiSelectIsNotEmpty,
    TResult? Function(DateEqualsFilter value)? dateEquals,
    TResult? Function(DateBeforeFilter value)? dateBefore,
    TResult? Function(DateAfterFilter value)? dateAfter,
    TResult? Function(DateOnOrBeforeFilter value)? dateOnOrBefore,
    TResult? Function(DateOnOrAfterFilter value)? dateOnOrAfter,
    TResult? Function(DateIsEmptyFilter value)? dateIsEmpty,
    TResult? Function(DateIsNotEmptyFilter value)? dateIsNotEmpty,
    TResult? Function(DatePastWeekFilter value)? datePastWeek,
    TResult? Function(DatePastMonthFilter value)? datePastMonth,
    TResult? Function(DatePastYearFilter value)? datePastYear,
    TResult? Function(DateNextWeekFilter value)? dateNextWeek,
    TResult? Function(DateNextMonthFilter value)? dateNextMonth,
    TResult? Function(DateNextYearFilter value)? dateNextYear,
    TResult? Function(PeopleContainsFilter value)? peopleContains,
    TResult? Function(PeopleDoesNotContainFilter value)? peopleDoesNotContain,
    TResult? Function(PeopleIsEmptyFilter value)? peopleIsEmpty,
    TResult? Function(PeopleIsNotEmptyFilter value)? peopleIsNotEmpty,
    TResult? Function(FilesIsEmptyFilter value)? filesIsEmpty,
    TResult? Function(FilesIsNotEmptyFilter value)? filesIsNotEmpty,
    TResult? Function(RelationContainsFilter value)? relationContains,
    TResult? Function(RelationDoesNotContainFilter value)?
        relationDoesNotContain,
    TResult? Function(RelationIsEmptyFilter value)? relationIsEmpty,
    TResult? Function(RelationIsNotEmptyFilter value)? relationIsNotEmpty,
  }) {
    return dateAfter?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(TextEqualsFilter value)? textEquals,
    TResult Function(TextDoesNotEqualFilter value)? textDoesNotEqual,
    TResult Function(TextContainsFilter value)? textContains,
    TResult Function(TextDoesNotContainFilter value)? textDoesNotContain,
    TResult Function(TextStartsWithFilter value)? textStartsWith,
    TResult Function(TextEndsWithFilter value)? textEndsWith,
    TResult Function(TextIsEmptyFilter value)? textIsEmpty,
    TResult Function(TextIsNotEmptyFilter value)? textIsNotEmpty,
    TResult Function(NumberEqualsFilter value)? numberEquals,
    TResult Function(NumberDoesNotEqualFilter value)? numberDoesNotEqual,
    TResult Function(NumberGreaterThanFilter value)? numberGreaterThan,
    TResult Function(NumberLessThanFilter value)? numberLessThan,
    TResult Function(NumberGreaterThanOrEqualFilter value)?
        numberGreaterThanOrEqual,
    TResult Function(NumberLessThanOrEqualFilter value)? numberLessThanOrEqual,
    TResult Function(NumberIsEmptyFilter value)? numberIsEmpty,
    TResult Function(NumberIsNotEmptyFilter value)? numberIsNotEmpty,
    TResult Function(CheckboxEqualsFilter value)? checkboxEquals,
    TResult Function(SelectEqualsFilter value)? selectEquals,
    TResult Function(SelectDoesNotEqualFilter value)? selectDoesNotEqual,
    TResult Function(SelectIsEmptyFilter value)? selectIsEmpty,
    TResult Function(SelectIsNotEmptyFilter value)? selectIsNotEmpty,
    TResult Function(MultiSelectContainsFilter value)? multiSelectContains,
    TResult Function(MultiSelectDoesNotContainFilter value)?
        multiSelectDoesNotContain,
    TResult Function(MultiSelectIsEmptyFilter value)? multiSelectIsEmpty,
    TResult Function(MultiSelectIsNotEmptyFilter value)? multiSelectIsNotEmpty,
    TResult Function(DateEqualsFilter value)? dateEquals,
    TResult Function(DateBeforeFilter value)? dateBefore,
    TResult Function(DateAfterFilter value)? dateAfter,
    TResult Function(DateOnOrBeforeFilter value)? dateOnOrBefore,
    TResult Function(DateOnOrAfterFilter value)? dateOnOrAfter,
    TResult Function(DateIsEmptyFilter value)? dateIsEmpty,
    TResult Function(DateIsNotEmptyFilter value)? dateIsNotEmpty,
    TResult Function(DatePastWeekFilter value)? datePastWeek,
    TResult Function(DatePastMonthFilter value)? datePastMonth,
    TResult Function(DatePastYearFilter value)? datePastYear,
    TResult Function(DateNextWeekFilter value)? dateNextWeek,
    TResult Function(DateNextMonthFilter value)? dateNextMonth,
    TResult Function(DateNextYearFilter value)? dateNextYear,
    TResult Function(PeopleContainsFilter value)? peopleContains,
    TResult Function(PeopleDoesNotContainFilter value)? peopleDoesNotContain,
    TResult Function(PeopleIsEmptyFilter value)? peopleIsEmpty,
    TResult Function(PeopleIsNotEmptyFilter value)? peopleIsNotEmpty,
    TResult Function(FilesIsEmptyFilter value)? filesIsEmpty,
    TResult Function(FilesIsNotEmptyFilter value)? filesIsNotEmpty,
    TResult Function(RelationContainsFilter value)? relationContains,
    TResult Function(RelationDoesNotContainFilter value)?
        relationDoesNotContain,
    TResult Function(RelationIsEmptyFilter value)? relationIsEmpty,
    TResult Function(RelationIsNotEmptyFilter value)? relationIsNotEmpty,
    required TResult orElse(),
  }) {
    if (dateAfter != null) {
      return dateAfter(this);
    }
    return orElse();
  }
}

abstract class DateAfterFilter extends PropertyFilter {
  const factory DateAfterFilter(final String date) = _$DateAfterFilterImpl;
  const DateAfterFilter._() : super._();

  String get date;

  /// Create a copy of PropertyFilter
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  _$$DateAfterFilterImplCopyWith<_$DateAfterFilterImpl> get copyWith =>
      throw _privateConstructorUsedError;
}

/// @nodoc
abstract class _$$DateOnOrBeforeFilterImplCopyWith<$Res> {
  factory _$$DateOnOrBeforeFilterImplCopyWith(_$DateOnOrBeforeFilterImpl value,
          $Res Function(_$DateOnOrBeforeFilterImpl) then) =
      __$$DateOnOrBeforeFilterImplCopyWithImpl<$Res>;
  @useResult
  $Res call({String date});
}

/// @nodoc
class __$$DateOnOrBeforeFilterImplCopyWithImpl<$Res>
    extends _$PropertyFilterCopyWithImpl<$Res, _$DateOnOrBeforeFilterImpl>
    implements _$$DateOnOrBeforeFilterImplCopyWith<$Res> {
  __$$DateOnOrBeforeFilterImplCopyWithImpl(_$DateOnOrBeforeFilterImpl _value,
      $Res Function(_$DateOnOrBeforeFilterImpl) _then)
      : super(_value, _then);

  /// Create a copy of PropertyFilter
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? date = null,
  }) {
    return _then(_$DateOnOrBeforeFilterImpl(
      null == date
          ? _value.date
          : date // ignore: cast_nullable_to_non_nullable
              as String,
    ));
  }
}

/// @nodoc

class _$DateOnOrBeforeFilterImpl extends DateOnOrBeforeFilter {
  const _$DateOnOrBeforeFilterImpl(this.date) : super._();

  @override
  final String date;

  @override
  String toString() {
    return 'PropertyFilter.dateOnOrBefore(date: $date)';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$DateOnOrBeforeFilterImpl &&
            (identical(other.date, date) || other.date == date));
  }

  @override
  int get hashCode => Object.hash(runtimeType, date);

  /// Create a copy of PropertyFilter
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  @pragma('vm:prefer-inline')
  _$$DateOnOrBeforeFilterImplCopyWith<_$DateOnOrBeforeFilterImpl>
      get copyWith =>
          __$$DateOnOrBeforeFilterImplCopyWithImpl<_$DateOnOrBeforeFilterImpl>(
              this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function(String value) textEquals,
    required TResult Function(String value) textDoesNotEqual,
    required TResult Function(String value) textContains,
    required TResult Function(String value) textDoesNotContain,
    required TResult Function(String value) textStartsWith,
    required TResult Function(String value) textEndsWith,
    required TResult Function() textIsEmpty,
    required TResult Function() textIsNotEmpty,
    required TResult Function(double value) numberEquals,
    required TResult Function(double value) numberDoesNotEqual,
    required TResult Function(double value) numberGreaterThan,
    required TResult Function(double value) numberLessThan,
    required TResult Function(double value) numberGreaterThanOrEqual,
    required TResult Function(double value) numberLessThanOrEqual,
    required TResult Function() numberIsEmpty,
    required TResult Function() numberIsNotEmpty,
    required TResult Function(bool value) checkboxEquals,
    required TResult Function(String value) selectEquals,
    required TResult Function(String value) selectDoesNotEqual,
    required TResult Function() selectIsEmpty,
    required TResult Function() selectIsNotEmpty,
    required TResult Function(String value) multiSelectContains,
    required TResult Function(String value) multiSelectDoesNotContain,
    required TResult Function() multiSelectIsEmpty,
    required TResult Function() multiSelectIsNotEmpty,
    required TResult Function(String date) dateEquals,
    required TResult Function(String date) dateBefore,
    required TResult Function(String date) dateAfter,
    required TResult Function(String date) dateOnOrBefore,
    required TResult Function(String date) dateOnOrAfter,
    required TResult Function() dateIsEmpty,
    required TResult Function() dateIsNotEmpty,
    required TResult Function() datePastWeek,
    required TResult Function() datePastMonth,
    required TResult Function() datePastYear,
    required TResult Function() dateNextWeek,
    required TResult Function() dateNextMonth,
    required TResult Function() dateNextYear,
    required TResult Function(String userId) peopleContains,
    required TResult Function(String userId) peopleDoesNotContain,
    required TResult Function() peopleIsEmpty,
    required TResult Function() peopleIsNotEmpty,
    required TResult Function() filesIsEmpty,
    required TResult Function() filesIsNotEmpty,
    required TResult Function(String pageId) relationContains,
    required TResult Function(String pageId) relationDoesNotContain,
    required TResult Function() relationIsEmpty,
    required TResult Function() relationIsNotEmpty,
  }) {
    return dateOnOrBefore(date);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function(String value)? textEquals,
    TResult? Function(String value)? textDoesNotEqual,
    TResult? Function(String value)? textContains,
    TResult? Function(String value)? textDoesNotContain,
    TResult? Function(String value)? textStartsWith,
    TResult? Function(String value)? textEndsWith,
    TResult? Function()? textIsEmpty,
    TResult? Function()? textIsNotEmpty,
    TResult? Function(double value)? numberEquals,
    TResult? Function(double value)? numberDoesNotEqual,
    TResult? Function(double value)? numberGreaterThan,
    TResult? Function(double value)? numberLessThan,
    TResult? Function(double value)? numberGreaterThanOrEqual,
    TResult? Function(double value)? numberLessThanOrEqual,
    TResult? Function()? numberIsEmpty,
    TResult? Function()? numberIsNotEmpty,
    TResult? Function(bool value)? checkboxEquals,
    TResult? Function(String value)? selectEquals,
    TResult? Function(String value)? selectDoesNotEqual,
    TResult? Function()? selectIsEmpty,
    TResult? Function()? selectIsNotEmpty,
    TResult? Function(String value)? multiSelectContains,
    TResult? Function(String value)? multiSelectDoesNotContain,
    TResult? Function()? multiSelectIsEmpty,
    TResult? Function()? multiSelectIsNotEmpty,
    TResult? Function(String date)? dateEquals,
    TResult? Function(String date)? dateBefore,
    TResult? Function(String date)? dateAfter,
    TResult? Function(String date)? dateOnOrBefore,
    TResult? Function(String date)? dateOnOrAfter,
    TResult? Function()? dateIsEmpty,
    TResult? Function()? dateIsNotEmpty,
    TResult? Function()? datePastWeek,
    TResult? Function()? datePastMonth,
    TResult? Function()? datePastYear,
    TResult? Function()? dateNextWeek,
    TResult? Function()? dateNextMonth,
    TResult? Function()? dateNextYear,
    TResult? Function(String userId)? peopleContains,
    TResult? Function(String userId)? peopleDoesNotContain,
    TResult? Function()? peopleIsEmpty,
    TResult? Function()? peopleIsNotEmpty,
    TResult? Function()? filesIsEmpty,
    TResult? Function()? filesIsNotEmpty,
    TResult? Function(String pageId)? relationContains,
    TResult? Function(String pageId)? relationDoesNotContain,
    TResult? Function()? relationIsEmpty,
    TResult? Function()? relationIsNotEmpty,
  }) {
    return dateOnOrBefore?.call(date);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function(String value)? textEquals,
    TResult Function(String value)? textDoesNotEqual,
    TResult Function(String value)? textContains,
    TResult Function(String value)? textDoesNotContain,
    TResult Function(String value)? textStartsWith,
    TResult Function(String value)? textEndsWith,
    TResult Function()? textIsEmpty,
    TResult Function()? textIsNotEmpty,
    TResult Function(double value)? numberEquals,
    TResult Function(double value)? numberDoesNotEqual,
    TResult Function(double value)? numberGreaterThan,
    TResult Function(double value)? numberLessThan,
    TResult Function(double value)? numberGreaterThanOrEqual,
    TResult Function(double value)? numberLessThanOrEqual,
    TResult Function()? numberIsEmpty,
    TResult Function()? numberIsNotEmpty,
    TResult Function(bool value)? checkboxEquals,
    TResult Function(String value)? selectEquals,
    TResult Function(String value)? selectDoesNotEqual,
    TResult Function()? selectIsEmpty,
    TResult Function()? selectIsNotEmpty,
    TResult Function(String value)? multiSelectContains,
    TResult Function(String value)? multiSelectDoesNotContain,
    TResult Function()? multiSelectIsEmpty,
    TResult Function()? multiSelectIsNotEmpty,
    TResult Function(String date)? dateEquals,
    TResult Function(String date)? dateBefore,
    TResult Function(String date)? dateAfter,
    TResult Function(String date)? dateOnOrBefore,
    TResult Function(String date)? dateOnOrAfter,
    TResult Function()? dateIsEmpty,
    TResult Function()? dateIsNotEmpty,
    TResult Function()? datePastWeek,
    TResult Function()? datePastMonth,
    TResult Function()? datePastYear,
    TResult Function()? dateNextWeek,
    TResult Function()? dateNextMonth,
    TResult Function()? dateNextYear,
    TResult Function(String userId)? peopleContains,
    TResult Function(String userId)? peopleDoesNotContain,
    TResult Function()? peopleIsEmpty,
    TResult Function()? peopleIsNotEmpty,
    TResult Function()? filesIsEmpty,
    TResult Function()? filesIsNotEmpty,
    TResult Function(String pageId)? relationContains,
    TResult Function(String pageId)? relationDoesNotContain,
    TResult Function()? relationIsEmpty,
    TResult Function()? relationIsNotEmpty,
    required TResult orElse(),
  }) {
    if (dateOnOrBefore != null) {
      return dateOnOrBefore(date);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(TextEqualsFilter value) textEquals,
    required TResult Function(TextDoesNotEqualFilter value) textDoesNotEqual,
    required TResult Function(TextContainsFilter value) textContains,
    required TResult Function(TextDoesNotContainFilter value)
        textDoesNotContain,
    required TResult Function(TextStartsWithFilter value) textStartsWith,
    required TResult Function(TextEndsWithFilter value) textEndsWith,
    required TResult Function(TextIsEmptyFilter value) textIsEmpty,
    required TResult Function(TextIsNotEmptyFilter value) textIsNotEmpty,
    required TResult Function(NumberEqualsFilter value) numberEquals,
    required TResult Function(NumberDoesNotEqualFilter value)
        numberDoesNotEqual,
    required TResult Function(NumberGreaterThanFilter value) numberGreaterThan,
    required TResult Function(NumberLessThanFilter value) numberLessThan,
    required TResult Function(NumberGreaterThanOrEqualFilter value)
        numberGreaterThanOrEqual,
    required TResult Function(NumberLessThanOrEqualFilter value)
        numberLessThanOrEqual,
    required TResult Function(NumberIsEmptyFilter value) numberIsEmpty,
    required TResult Function(NumberIsNotEmptyFilter value) numberIsNotEmpty,
    required TResult Function(CheckboxEqualsFilter value) checkboxEquals,
    required TResult Function(SelectEqualsFilter value) selectEquals,
    required TResult Function(SelectDoesNotEqualFilter value)
        selectDoesNotEqual,
    required TResult Function(SelectIsEmptyFilter value) selectIsEmpty,
    required TResult Function(SelectIsNotEmptyFilter value) selectIsNotEmpty,
    required TResult Function(MultiSelectContainsFilter value)
        multiSelectContains,
    required TResult Function(MultiSelectDoesNotContainFilter value)
        multiSelectDoesNotContain,
    required TResult Function(MultiSelectIsEmptyFilter value)
        multiSelectIsEmpty,
    required TResult Function(MultiSelectIsNotEmptyFilter value)
        multiSelectIsNotEmpty,
    required TResult Function(DateEqualsFilter value) dateEquals,
    required TResult Function(DateBeforeFilter value) dateBefore,
    required TResult Function(DateAfterFilter value) dateAfter,
    required TResult Function(DateOnOrBeforeFilter value) dateOnOrBefore,
    required TResult Function(DateOnOrAfterFilter value) dateOnOrAfter,
    required TResult Function(DateIsEmptyFilter value) dateIsEmpty,
    required TResult Function(DateIsNotEmptyFilter value) dateIsNotEmpty,
    required TResult Function(DatePastWeekFilter value) datePastWeek,
    required TResult Function(DatePastMonthFilter value) datePastMonth,
    required TResult Function(DatePastYearFilter value) datePastYear,
    required TResult Function(DateNextWeekFilter value) dateNextWeek,
    required TResult Function(DateNextMonthFilter value) dateNextMonth,
    required TResult Function(DateNextYearFilter value) dateNextYear,
    required TResult Function(PeopleContainsFilter value) peopleContains,
    required TResult Function(PeopleDoesNotContainFilter value)
        peopleDoesNotContain,
    required TResult Function(PeopleIsEmptyFilter value) peopleIsEmpty,
    required TResult Function(PeopleIsNotEmptyFilter value) peopleIsNotEmpty,
    required TResult Function(FilesIsEmptyFilter value) filesIsEmpty,
    required TResult Function(FilesIsNotEmptyFilter value) filesIsNotEmpty,
    required TResult Function(RelationContainsFilter value) relationContains,
    required TResult Function(RelationDoesNotContainFilter value)
        relationDoesNotContain,
    required TResult Function(RelationIsEmptyFilter value) relationIsEmpty,
    required TResult Function(RelationIsNotEmptyFilter value)
        relationIsNotEmpty,
  }) {
    return dateOnOrBefore(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(TextEqualsFilter value)? textEquals,
    TResult? Function(TextDoesNotEqualFilter value)? textDoesNotEqual,
    TResult? Function(TextContainsFilter value)? textContains,
    TResult? Function(TextDoesNotContainFilter value)? textDoesNotContain,
    TResult? Function(TextStartsWithFilter value)? textStartsWith,
    TResult? Function(TextEndsWithFilter value)? textEndsWith,
    TResult? Function(TextIsEmptyFilter value)? textIsEmpty,
    TResult? Function(TextIsNotEmptyFilter value)? textIsNotEmpty,
    TResult? Function(NumberEqualsFilter value)? numberEquals,
    TResult? Function(NumberDoesNotEqualFilter value)? numberDoesNotEqual,
    TResult? Function(NumberGreaterThanFilter value)? numberGreaterThan,
    TResult? Function(NumberLessThanFilter value)? numberLessThan,
    TResult? Function(NumberGreaterThanOrEqualFilter value)?
        numberGreaterThanOrEqual,
    TResult? Function(NumberLessThanOrEqualFilter value)? numberLessThanOrEqual,
    TResult? Function(NumberIsEmptyFilter value)? numberIsEmpty,
    TResult? Function(NumberIsNotEmptyFilter value)? numberIsNotEmpty,
    TResult? Function(CheckboxEqualsFilter value)? checkboxEquals,
    TResult? Function(SelectEqualsFilter value)? selectEquals,
    TResult? Function(SelectDoesNotEqualFilter value)? selectDoesNotEqual,
    TResult? Function(SelectIsEmptyFilter value)? selectIsEmpty,
    TResult? Function(SelectIsNotEmptyFilter value)? selectIsNotEmpty,
    TResult? Function(MultiSelectContainsFilter value)? multiSelectContains,
    TResult? Function(MultiSelectDoesNotContainFilter value)?
        multiSelectDoesNotContain,
    TResult? Function(MultiSelectIsEmptyFilter value)? multiSelectIsEmpty,
    TResult? Function(MultiSelectIsNotEmptyFilter value)? multiSelectIsNotEmpty,
    TResult? Function(DateEqualsFilter value)? dateEquals,
    TResult? Function(DateBeforeFilter value)? dateBefore,
    TResult? Function(DateAfterFilter value)? dateAfter,
    TResult? Function(DateOnOrBeforeFilter value)? dateOnOrBefore,
    TResult? Function(DateOnOrAfterFilter value)? dateOnOrAfter,
    TResult? Function(DateIsEmptyFilter value)? dateIsEmpty,
    TResult? Function(DateIsNotEmptyFilter value)? dateIsNotEmpty,
    TResult? Function(DatePastWeekFilter value)? datePastWeek,
    TResult? Function(DatePastMonthFilter value)? datePastMonth,
    TResult? Function(DatePastYearFilter value)? datePastYear,
    TResult? Function(DateNextWeekFilter value)? dateNextWeek,
    TResult? Function(DateNextMonthFilter value)? dateNextMonth,
    TResult? Function(DateNextYearFilter value)? dateNextYear,
    TResult? Function(PeopleContainsFilter value)? peopleContains,
    TResult? Function(PeopleDoesNotContainFilter value)? peopleDoesNotContain,
    TResult? Function(PeopleIsEmptyFilter value)? peopleIsEmpty,
    TResult? Function(PeopleIsNotEmptyFilter value)? peopleIsNotEmpty,
    TResult? Function(FilesIsEmptyFilter value)? filesIsEmpty,
    TResult? Function(FilesIsNotEmptyFilter value)? filesIsNotEmpty,
    TResult? Function(RelationContainsFilter value)? relationContains,
    TResult? Function(RelationDoesNotContainFilter value)?
        relationDoesNotContain,
    TResult? Function(RelationIsEmptyFilter value)? relationIsEmpty,
    TResult? Function(RelationIsNotEmptyFilter value)? relationIsNotEmpty,
  }) {
    return dateOnOrBefore?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(TextEqualsFilter value)? textEquals,
    TResult Function(TextDoesNotEqualFilter value)? textDoesNotEqual,
    TResult Function(TextContainsFilter value)? textContains,
    TResult Function(TextDoesNotContainFilter value)? textDoesNotContain,
    TResult Function(TextStartsWithFilter value)? textStartsWith,
    TResult Function(TextEndsWithFilter value)? textEndsWith,
    TResult Function(TextIsEmptyFilter value)? textIsEmpty,
    TResult Function(TextIsNotEmptyFilter value)? textIsNotEmpty,
    TResult Function(NumberEqualsFilter value)? numberEquals,
    TResult Function(NumberDoesNotEqualFilter value)? numberDoesNotEqual,
    TResult Function(NumberGreaterThanFilter value)? numberGreaterThan,
    TResult Function(NumberLessThanFilter value)? numberLessThan,
    TResult Function(NumberGreaterThanOrEqualFilter value)?
        numberGreaterThanOrEqual,
    TResult Function(NumberLessThanOrEqualFilter value)? numberLessThanOrEqual,
    TResult Function(NumberIsEmptyFilter value)? numberIsEmpty,
    TResult Function(NumberIsNotEmptyFilter value)? numberIsNotEmpty,
    TResult Function(CheckboxEqualsFilter value)? checkboxEquals,
    TResult Function(SelectEqualsFilter value)? selectEquals,
    TResult Function(SelectDoesNotEqualFilter value)? selectDoesNotEqual,
    TResult Function(SelectIsEmptyFilter value)? selectIsEmpty,
    TResult Function(SelectIsNotEmptyFilter value)? selectIsNotEmpty,
    TResult Function(MultiSelectContainsFilter value)? multiSelectContains,
    TResult Function(MultiSelectDoesNotContainFilter value)?
        multiSelectDoesNotContain,
    TResult Function(MultiSelectIsEmptyFilter value)? multiSelectIsEmpty,
    TResult Function(MultiSelectIsNotEmptyFilter value)? multiSelectIsNotEmpty,
    TResult Function(DateEqualsFilter value)? dateEquals,
    TResult Function(DateBeforeFilter value)? dateBefore,
    TResult Function(DateAfterFilter value)? dateAfter,
    TResult Function(DateOnOrBeforeFilter value)? dateOnOrBefore,
    TResult Function(DateOnOrAfterFilter value)? dateOnOrAfter,
    TResult Function(DateIsEmptyFilter value)? dateIsEmpty,
    TResult Function(DateIsNotEmptyFilter value)? dateIsNotEmpty,
    TResult Function(DatePastWeekFilter value)? datePastWeek,
    TResult Function(DatePastMonthFilter value)? datePastMonth,
    TResult Function(DatePastYearFilter value)? datePastYear,
    TResult Function(DateNextWeekFilter value)? dateNextWeek,
    TResult Function(DateNextMonthFilter value)? dateNextMonth,
    TResult Function(DateNextYearFilter value)? dateNextYear,
    TResult Function(PeopleContainsFilter value)? peopleContains,
    TResult Function(PeopleDoesNotContainFilter value)? peopleDoesNotContain,
    TResult Function(PeopleIsEmptyFilter value)? peopleIsEmpty,
    TResult Function(PeopleIsNotEmptyFilter value)? peopleIsNotEmpty,
    TResult Function(FilesIsEmptyFilter value)? filesIsEmpty,
    TResult Function(FilesIsNotEmptyFilter value)? filesIsNotEmpty,
    TResult Function(RelationContainsFilter value)? relationContains,
    TResult Function(RelationDoesNotContainFilter value)?
        relationDoesNotContain,
    TResult Function(RelationIsEmptyFilter value)? relationIsEmpty,
    TResult Function(RelationIsNotEmptyFilter value)? relationIsNotEmpty,
    required TResult orElse(),
  }) {
    if (dateOnOrBefore != null) {
      return dateOnOrBefore(this);
    }
    return orElse();
  }
}

abstract class DateOnOrBeforeFilter extends PropertyFilter {
  const factory DateOnOrBeforeFilter(final String date) =
      _$DateOnOrBeforeFilterImpl;
  const DateOnOrBeforeFilter._() : super._();

  String get date;

  /// Create a copy of PropertyFilter
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  _$$DateOnOrBeforeFilterImplCopyWith<_$DateOnOrBeforeFilterImpl>
      get copyWith => throw _privateConstructorUsedError;
}

/// @nodoc
abstract class _$$DateOnOrAfterFilterImplCopyWith<$Res> {
  factory _$$DateOnOrAfterFilterImplCopyWith(_$DateOnOrAfterFilterImpl value,
          $Res Function(_$DateOnOrAfterFilterImpl) then) =
      __$$DateOnOrAfterFilterImplCopyWithImpl<$Res>;
  @useResult
  $Res call({String date});
}

/// @nodoc
class __$$DateOnOrAfterFilterImplCopyWithImpl<$Res>
    extends _$PropertyFilterCopyWithImpl<$Res, _$DateOnOrAfterFilterImpl>
    implements _$$DateOnOrAfterFilterImplCopyWith<$Res> {
  __$$DateOnOrAfterFilterImplCopyWithImpl(_$DateOnOrAfterFilterImpl _value,
      $Res Function(_$DateOnOrAfterFilterImpl) _then)
      : super(_value, _then);

  /// Create a copy of PropertyFilter
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? date = null,
  }) {
    return _then(_$DateOnOrAfterFilterImpl(
      null == date
          ? _value.date
          : date // ignore: cast_nullable_to_non_nullable
              as String,
    ));
  }
}

/// @nodoc

class _$DateOnOrAfterFilterImpl extends DateOnOrAfterFilter {
  const _$DateOnOrAfterFilterImpl(this.date) : super._();

  @override
  final String date;

  @override
  String toString() {
    return 'PropertyFilter.dateOnOrAfter(date: $date)';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$DateOnOrAfterFilterImpl &&
            (identical(other.date, date) || other.date == date));
  }

  @override
  int get hashCode => Object.hash(runtimeType, date);

  /// Create a copy of PropertyFilter
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  @pragma('vm:prefer-inline')
  _$$DateOnOrAfterFilterImplCopyWith<_$DateOnOrAfterFilterImpl> get copyWith =>
      __$$DateOnOrAfterFilterImplCopyWithImpl<_$DateOnOrAfterFilterImpl>(
          this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function(String value) textEquals,
    required TResult Function(String value) textDoesNotEqual,
    required TResult Function(String value) textContains,
    required TResult Function(String value) textDoesNotContain,
    required TResult Function(String value) textStartsWith,
    required TResult Function(String value) textEndsWith,
    required TResult Function() textIsEmpty,
    required TResult Function() textIsNotEmpty,
    required TResult Function(double value) numberEquals,
    required TResult Function(double value) numberDoesNotEqual,
    required TResult Function(double value) numberGreaterThan,
    required TResult Function(double value) numberLessThan,
    required TResult Function(double value) numberGreaterThanOrEqual,
    required TResult Function(double value) numberLessThanOrEqual,
    required TResult Function() numberIsEmpty,
    required TResult Function() numberIsNotEmpty,
    required TResult Function(bool value) checkboxEquals,
    required TResult Function(String value) selectEquals,
    required TResult Function(String value) selectDoesNotEqual,
    required TResult Function() selectIsEmpty,
    required TResult Function() selectIsNotEmpty,
    required TResult Function(String value) multiSelectContains,
    required TResult Function(String value) multiSelectDoesNotContain,
    required TResult Function() multiSelectIsEmpty,
    required TResult Function() multiSelectIsNotEmpty,
    required TResult Function(String date) dateEquals,
    required TResult Function(String date) dateBefore,
    required TResult Function(String date) dateAfter,
    required TResult Function(String date) dateOnOrBefore,
    required TResult Function(String date) dateOnOrAfter,
    required TResult Function() dateIsEmpty,
    required TResult Function() dateIsNotEmpty,
    required TResult Function() datePastWeek,
    required TResult Function() datePastMonth,
    required TResult Function() datePastYear,
    required TResult Function() dateNextWeek,
    required TResult Function() dateNextMonth,
    required TResult Function() dateNextYear,
    required TResult Function(String userId) peopleContains,
    required TResult Function(String userId) peopleDoesNotContain,
    required TResult Function() peopleIsEmpty,
    required TResult Function() peopleIsNotEmpty,
    required TResult Function() filesIsEmpty,
    required TResult Function() filesIsNotEmpty,
    required TResult Function(String pageId) relationContains,
    required TResult Function(String pageId) relationDoesNotContain,
    required TResult Function() relationIsEmpty,
    required TResult Function() relationIsNotEmpty,
  }) {
    return dateOnOrAfter(date);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function(String value)? textEquals,
    TResult? Function(String value)? textDoesNotEqual,
    TResult? Function(String value)? textContains,
    TResult? Function(String value)? textDoesNotContain,
    TResult? Function(String value)? textStartsWith,
    TResult? Function(String value)? textEndsWith,
    TResult? Function()? textIsEmpty,
    TResult? Function()? textIsNotEmpty,
    TResult? Function(double value)? numberEquals,
    TResult? Function(double value)? numberDoesNotEqual,
    TResult? Function(double value)? numberGreaterThan,
    TResult? Function(double value)? numberLessThan,
    TResult? Function(double value)? numberGreaterThanOrEqual,
    TResult? Function(double value)? numberLessThanOrEqual,
    TResult? Function()? numberIsEmpty,
    TResult? Function()? numberIsNotEmpty,
    TResult? Function(bool value)? checkboxEquals,
    TResult? Function(String value)? selectEquals,
    TResult? Function(String value)? selectDoesNotEqual,
    TResult? Function()? selectIsEmpty,
    TResult? Function()? selectIsNotEmpty,
    TResult? Function(String value)? multiSelectContains,
    TResult? Function(String value)? multiSelectDoesNotContain,
    TResult? Function()? multiSelectIsEmpty,
    TResult? Function()? multiSelectIsNotEmpty,
    TResult? Function(String date)? dateEquals,
    TResult? Function(String date)? dateBefore,
    TResult? Function(String date)? dateAfter,
    TResult? Function(String date)? dateOnOrBefore,
    TResult? Function(String date)? dateOnOrAfter,
    TResult? Function()? dateIsEmpty,
    TResult? Function()? dateIsNotEmpty,
    TResult? Function()? datePastWeek,
    TResult? Function()? datePastMonth,
    TResult? Function()? datePastYear,
    TResult? Function()? dateNextWeek,
    TResult? Function()? dateNextMonth,
    TResult? Function()? dateNextYear,
    TResult? Function(String userId)? peopleContains,
    TResult? Function(String userId)? peopleDoesNotContain,
    TResult? Function()? peopleIsEmpty,
    TResult? Function()? peopleIsNotEmpty,
    TResult? Function()? filesIsEmpty,
    TResult? Function()? filesIsNotEmpty,
    TResult? Function(String pageId)? relationContains,
    TResult? Function(String pageId)? relationDoesNotContain,
    TResult? Function()? relationIsEmpty,
    TResult? Function()? relationIsNotEmpty,
  }) {
    return dateOnOrAfter?.call(date);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function(String value)? textEquals,
    TResult Function(String value)? textDoesNotEqual,
    TResult Function(String value)? textContains,
    TResult Function(String value)? textDoesNotContain,
    TResult Function(String value)? textStartsWith,
    TResult Function(String value)? textEndsWith,
    TResult Function()? textIsEmpty,
    TResult Function()? textIsNotEmpty,
    TResult Function(double value)? numberEquals,
    TResult Function(double value)? numberDoesNotEqual,
    TResult Function(double value)? numberGreaterThan,
    TResult Function(double value)? numberLessThan,
    TResult Function(double value)? numberGreaterThanOrEqual,
    TResult Function(double value)? numberLessThanOrEqual,
    TResult Function()? numberIsEmpty,
    TResult Function()? numberIsNotEmpty,
    TResult Function(bool value)? checkboxEquals,
    TResult Function(String value)? selectEquals,
    TResult Function(String value)? selectDoesNotEqual,
    TResult Function()? selectIsEmpty,
    TResult Function()? selectIsNotEmpty,
    TResult Function(String value)? multiSelectContains,
    TResult Function(String value)? multiSelectDoesNotContain,
    TResult Function()? multiSelectIsEmpty,
    TResult Function()? multiSelectIsNotEmpty,
    TResult Function(String date)? dateEquals,
    TResult Function(String date)? dateBefore,
    TResult Function(String date)? dateAfter,
    TResult Function(String date)? dateOnOrBefore,
    TResult Function(String date)? dateOnOrAfter,
    TResult Function()? dateIsEmpty,
    TResult Function()? dateIsNotEmpty,
    TResult Function()? datePastWeek,
    TResult Function()? datePastMonth,
    TResult Function()? datePastYear,
    TResult Function()? dateNextWeek,
    TResult Function()? dateNextMonth,
    TResult Function()? dateNextYear,
    TResult Function(String userId)? peopleContains,
    TResult Function(String userId)? peopleDoesNotContain,
    TResult Function()? peopleIsEmpty,
    TResult Function()? peopleIsNotEmpty,
    TResult Function()? filesIsEmpty,
    TResult Function()? filesIsNotEmpty,
    TResult Function(String pageId)? relationContains,
    TResult Function(String pageId)? relationDoesNotContain,
    TResult Function()? relationIsEmpty,
    TResult Function()? relationIsNotEmpty,
    required TResult orElse(),
  }) {
    if (dateOnOrAfter != null) {
      return dateOnOrAfter(date);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(TextEqualsFilter value) textEquals,
    required TResult Function(TextDoesNotEqualFilter value) textDoesNotEqual,
    required TResult Function(TextContainsFilter value) textContains,
    required TResult Function(TextDoesNotContainFilter value)
        textDoesNotContain,
    required TResult Function(TextStartsWithFilter value) textStartsWith,
    required TResult Function(TextEndsWithFilter value) textEndsWith,
    required TResult Function(TextIsEmptyFilter value) textIsEmpty,
    required TResult Function(TextIsNotEmptyFilter value) textIsNotEmpty,
    required TResult Function(NumberEqualsFilter value) numberEquals,
    required TResult Function(NumberDoesNotEqualFilter value)
        numberDoesNotEqual,
    required TResult Function(NumberGreaterThanFilter value) numberGreaterThan,
    required TResult Function(NumberLessThanFilter value) numberLessThan,
    required TResult Function(NumberGreaterThanOrEqualFilter value)
        numberGreaterThanOrEqual,
    required TResult Function(NumberLessThanOrEqualFilter value)
        numberLessThanOrEqual,
    required TResult Function(NumberIsEmptyFilter value) numberIsEmpty,
    required TResult Function(NumberIsNotEmptyFilter value) numberIsNotEmpty,
    required TResult Function(CheckboxEqualsFilter value) checkboxEquals,
    required TResult Function(SelectEqualsFilter value) selectEquals,
    required TResult Function(SelectDoesNotEqualFilter value)
        selectDoesNotEqual,
    required TResult Function(SelectIsEmptyFilter value) selectIsEmpty,
    required TResult Function(SelectIsNotEmptyFilter value) selectIsNotEmpty,
    required TResult Function(MultiSelectContainsFilter value)
        multiSelectContains,
    required TResult Function(MultiSelectDoesNotContainFilter value)
        multiSelectDoesNotContain,
    required TResult Function(MultiSelectIsEmptyFilter value)
        multiSelectIsEmpty,
    required TResult Function(MultiSelectIsNotEmptyFilter value)
        multiSelectIsNotEmpty,
    required TResult Function(DateEqualsFilter value) dateEquals,
    required TResult Function(DateBeforeFilter value) dateBefore,
    required TResult Function(DateAfterFilter value) dateAfter,
    required TResult Function(DateOnOrBeforeFilter value) dateOnOrBefore,
    required TResult Function(DateOnOrAfterFilter value) dateOnOrAfter,
    required TResult Function(DateIsEmptyFilter value) dateIsEmpty,
    required TResult Function(DateIsNotEmptyFilter value) dateIsNotEmpty,
    required TResult Function(DatePastWeekFilter value) datePastWeek,
    required TResult Function(DatePastMonthFilter value) datePastMonth,
    required TResult Function(DatePastYearFilter value) datePastYear,
    required TResult Function(DateNextWeekFilter value) dateNextWeek,
    required TResult Function(DateNextMonthFilter value) dateNextMonth,
    required TResult Function(DateNextYearFilter value) dateNextYear,
    required TResult Function(PeopleContainsFilter value) peopleContains,
    required TResult Function(PeopleDoesNotContainFilter value)
        peopleDoesNotContain,
    required TResult Function(PeopleIsEmptyFilter value) peopleIsEmpty,
    required TResult Function(PeopleIsNotEmptyFilter value) peopleIsNotEmpty,
    required TResult Function(FilesIsEmptyFilter value) filesIsEmpty,
    required TResult Function(FilesIsNotEmptyFilter value) filesIsNotEmpty,
    required TResult Function(RelationContainsFilter value) relationContains,
    required TResult Function(RelationDoesNotContainFilter value)
        relationDoesNotContain,
    required TResult Function(RelationIsEmptyFilter value) relationIsEmpty,
    required TResult Function(RelationIsNotEmptyFilter value)
        relationIsNotEmpty,
  }) {
    return dateOnOrAfter(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(TextEqualsFilter value)? textEquals,
    TResult? Function(TextDoesNotEqualFilter value)? textDoesNotEqual,
    TResult? Function(TextContainsFilter value)? textContains,
    TResult? Function(TextDoesNotContainFilter value)? textDoesNotContain,
    TResult? Function(TextStartsWithFilter value)? textStartsWith,
    TResult? Function(TextEndsWithFilter value)? textEndsWith,
    TResult? Function(TextIsEmptyFilter value)? textIsEmpty,
    TResult? Function(TextIsNotEmptyFilter value)? textIsNotEmpty,
    TResult? Function(NumberEqualsFilter value)? numberEquals,
    TResult? Function(NumberDoesNotEqualFilter value)? numberDoesNotEqual,
    TResult? Function(NumberGreaterThanFilter value)? numberGreaterThan,
    TResult? Function(NumberLessThanFilter value)? numberLessThan,
    TResult? Function(NumberGreaterThanOrEqualFilter value)?
        numberGreaterThanOrEqual,
    TResult? Function(NumberLessThanOrEqualFilter value)? numberLessThanOrEqual,
    TResult? Function(NumberIsEmptyFilter value)? numberIsEmpty,
    TResult? Function(NumberIsNotEmptyFilter value)? numberIsNotEmpty,
    TResult? Function(CheckboxEqualsFilter value)? checkboxEquals,
    TResult? Function(SelectEqualsFilter value)? selectEquals,
    TResult? Function(SelectDoesNotEqualFilter value)? selectDoesNotEqual,
    TResult? Function(SelectIsEmptyFilter value)? selectIsEmpty,
    TResult? Function(SelectIsNotEmptyFilter value)? selectIsNotEmpty,
    TResult? Function(MultiSelectContainsFilter value)? multiSelectContains,
    TResult? Function(MultiSelectDoesNotContainFilter value)?
        multiSelectDoesNotContain,
    TResult? Function(MultiSelectIsEmptyFilter value)? multiSelectIsEmpty,
    TResult? Function(MultiSelectIsNotEmptyFilter value)? multiSelectIsNotEmpty,
    TResult? Function(DateEqualsFilter value)? dateEquals,
    TResult? Function(DateBeforeFilter value)? dateBefore,
    TResult? Function(DateAfterFilter value)? dateAfter,
    TResult? Function(DateOnOrBeforeFilter value)? dateOnOrBefore,
    TResult? Function(DateOnOrAfterFilter value)? dateOnOrAfter,
    TResult? Function(DateIsEmptyFilter value)? dateIsEmpty,
    TResult? Function(DateIsNotEmptyFilter value)? dateIsNotEmpty,
    TResult? Function(DatePastWeekFilter value)? datePastWeek,
    TResult? Function(DatePastMonthFilter value)? datePastMonth,
    TResult? Function(DatePastYearFilter value)? datePastYear,
    TResult? Function(DateNextWeekFilter value)? dateNextWeek,
    TResult? Function(DateNextMonthFilter value)? dateNextMonth,
    TResult? Function(DateNextYearFilter value)? dateNextYear,
    TResult? Function(PeopleContainsFilter value)? peopleContains,
    TResult? Function(PeopleDoesNotContainFilter value)? peopleDoesNotContain,
    TResult? Function(PeopleIsEmptyFilter value)? peopleIsEmpty,
    TResult? Function(PeopleIsNotEmptyFilter value)? peopleIsNotEmpty,
    TResult? Function(FilesIsEmptyFilter value)? filesIsEmpty,
    TResult? Function(FilesIsNotEmptyFilter value)? filesIsNotEmpty,
    TResult? Function(RelationContainsFilter value)? relationContains,
    TResult? Function(RelationDoesNotContainFilter value)?
        relationDoesNotContain,
    TResult? Function(RelationIsEmptyFilter value)? relationIsEmpty,
    TResult? Function(RelationIsNotEmptyFilter value)? relationIsNotEmpty,
  }) {
    return dateOnOrAfter?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(TextEqualsFilter value)? textEquals,
    TResult Function(TextDoesNotEqualFilter value)? textDoesNotEqual,
    TResult Function(TextContainsFilter value)? textContains,
    TResult Function(TextDoesNotContainFilter value)? textDoesNotContain,
    TResult Function(TextStartsWithFilter value)? textStartsWith,
    TResult Function(TextEndsWithFilter value)? textEndsWith,
    TResult Function(TextIsEmptyFilter value)? textIsEmpty,
    TResult Function(TextIsNotEmptyFilter value)? textIsNotEmpty,
    TResult Function(NumberEqualsFilter value)? numberEquals,
    TResult Function(NumberDoesNotEqualFilter value)? numberDoesNotEqual,
    TResult Function(NumberGreaterThanFilter value)? numberGreaterThan,
    TResult Function(NumberLessThanFilter value)? numberLessThan,
    TResult Function(NumberGreaterThanOrEqualFilter value)?
        numberGreaterThanOrEqual,
    TResult Function(NumberLessThanOrEqualFilter value)? numberLessThanOrEqual,
    TResult Function(NumberIsEmptyFilter value)? numberIsEmpty,
    TResult Function(NumberIsNotEmptyFilter value)? numberIsNotEmpty,
    TResult Function(CheckboxEqualsFilter value)? checkboxEquals,
    TResult Function(SelectEqualsFilter value)? selectEquals,
    TResult Function(SelectDoesNotEqualFilter value)? selectDoesNotEqual,
    TResult Function(SelectIsEmptyFilter value)? selectIsEmpty,
    TResult Function(SelectIsNotEmptyFilter value)? selectIsNotEmpty,
    TResult Function(MultiSelectContainsFilter value)? multiSelectContains,
    TResult Function(MultiSelectDoesNotContainFilter value)?
        multiSelectDoesNotContain,
    TResult Function(MultiSelectIsEmptyFilter value)? multiSelectIsEmpty,
    TResult Function(MultiSelectIsNotEmptyFilter value)? multiSelectIsNotEmpty,
    TResult Function(DateEqualsFilter value)? dateEquals,
    TResult Function(DateBeforeFilter value)? dateBefore,
    TResult Function(DateAfterFilter value)? dateAfter,
    TResult Function(DateOnOrBeforeFilter value)? dateOnOrBefore,
    TResult Function(DateOnOrAfterFilter value)? dateOnOrAfter,
    TResult Function(DateIsEmptyFilter value)? dateIsEmpty,
    TResult Function(DateIsNotEmptyFilter value)? dateIsNotEmpty,
    TResult Function(DatePastWeekFilter value)? datePastWeek,
    TResult Function(DatePastMonthFilter value)? datePastMonth,
    TResult Function(DatePastYearFilter value)? datePastYear,
    TResult Function(DateNextWeekFilter value)? dateNextWeek,
    TResult Function(DateNextMonthFilter value)? dateNextMonth,
    TResult Function(DateNextYearFilter value)? dateNextYear,
    TResult Function(PeopleContainsFilter value)? peopleContains,
    TResult Function(PeopleDoesNotContainFilter value)? peopleDoesNotContain,
    TResult Function(PeopleIsEmptyFilter value)? peopleIsEmpty,
    TResult Function(PeopleIsNotEmptyFilter value)? peopleIsNotEmpty,
    TResult Function(FilesIsEmptyFilter value)? filesIsEmpty,
    TResult Function(FilesIsNotEmptyFilter value)? filesIsNotEmpty,
    TResult Function(RelationContainsFilter value)? relationContains,
    TResult Function(RelationDoesNotContainFilter value)?
        relationDoesNotContain,
    TResult Function(RelationIsEmptyFilter value)? relationIsEmpty,
    TResult Function(RelationIsNotEmptyFilter value)? relationIsNotEmpty,
    required TResult orElse(),
  }) {
    if (dateOnOrAfter != null) {
      return dateOnOrAfter(this);
    }
    return orElse();
  }
}

abstract class DateOnOrAfterFilter extends PropertyFilter {
  const factory DateOnOrAfterFilter(final String date) =
      _$DateOnOrAfterFilterImpl;
  const DateOnOrAfterFilter._() : super._();

  String get date;

  /// Create a copy of PropertyFilter
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  _$$DateOnOrAfterFilterImplCopyWith<_$DateOnOrAfterFilterImpl> get copyWith =>
      throw _privateConstructorUsedError;
}

/// @nodoc
abstract class _$$DateIsEmptyFilterImplCopyWith<$Res> {
  factory _$$DateIsEmptyFilterImplCopyWith(_$DateIsEmptyFilterImpl value,
          $Res Function(_$DateIsEmptyFilterImpl) then) =
      __$$DateIsEmptyFilterImplCopyWithImpl<$Res>;
}

/// @nodoc
class __$$DateIsEmptyFilterImplCopyWithImpl<$Res>
    extends _$PropertyFilterCopyWithImpl<$Res, _$DateIsEmptyFilterImpl>
    implements _$$DateIsEmptyFilterImplCopyWith<$Res> {
  __$$DateIsEmptyFilterImplCopyWithImpl(_$DateIsEmptyFilterImpl _value,
      $Res Function(_$DateIsEmptyFilterImpl) _then)
      : super(_value, _then);

  /// Create a copy of PropertyFilter
  /// with the given fields replaced by the non-null parameter values.
}

/// @nodoc

class _$DateIsEmptyFilterImpl extends DateIsEmptyFilter {
  const _$DateIsEmptyFilterImpl() : super._();

  @override
  String toString() {
    return 'PropertyFilter.dateIsEmpty()';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType && other is _$DateIsEmptyFilterImpl);
  }

  @override
  int get hashCode => runtimeType.hashCode;

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function(String value) textEquals,
    required TResult Function(String value) textDoesNotEqual,
    required TResult Function(String value) textContains,
    required TResult Function(String value) textDoesNotContain,
    required TResult Function(String value) textStartsWith,
    required TResult Function(String value) textEndsWith,
    required TResult Function() textIsEmpty,
    required TResult Function() textIsNotEmpty,
    required TResult Function(double value) numberEquals,
    required TResult Function(double value) numberDoesNotEqual,
    required TResult Function(double value) numberGreaterThan,
    required TResult Function(double value) numberLessThan,
    required TResult Function(double value) numberGreaterThanOrEqual,
    required TResult Function(double value) numberLessThanOrEqual,
    required TResult Function() numberIsEmpty,
    required TResult Function() numberIsNotEmpty,
    required TResult Function(bool value) checkboxEquals,
    required TResult Function(String value) selectEquals,
    required TResult Function(String value) selectDoesNotEqual,
    required TResult Function() selectIsEmpty,
    required TResult Function() selectIsNotEmpty,
    required TResult Function(String value) multiSelectContains,
    required TResult Function(String value) multiSelectDoesNotContain,
    required TResult Function() multiSelectIsEmpty,
    required TResult Function() multiSelectIsNotEmpty,
    required TResult Function(String date) dateEquals,
    required TResult Function(String date) dateBefore,
    required TResult Function(String date) dateAfter,
    required TResult Function(String date) dateOnOrBefore,
    required TResult Function(String date) dateOnOrAfter,
    required TResult Function() dateIsEmpty,
    required TResult Function() dateIsNotEmpty,
    required TResult Function() datePastWeek,
    required TResult Function() datePastMonth,
    required TResult Function() datePastYear,
    required TResult Function() dateNextWeek,
    required TResult Function() dateNextMonth,
    required TResult Function() dateNextYear,
    required TResult Function(String userId) peopleContains,
    required TResult Function(String userId) peopleDoesNotContain,
    required TResult Function() peopleIsEmpty,
    required TResult Function() peopleIsNotEmpty,
    required TResult Function() filesIsEmpty,
    required TResult Function() filesIsNotEmpty,
    required TResult Function(String pageId) relationContains,
    required TResult Function(String pageId) relationDoesNotContain,
    required TResult Function() relationIsEmpty,
    required TResult Function() relationIsNotEmpty,
  }) {
    return dateIsEmpty();
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function(String value)? textEquals,
    TResult? Function(String value)? textDoesNotEqual,
    TResult? Function(String value)? textContains,
    TResult? Function(String value)? textDoesNotContain,
    TResult? Function(String value)? textStartsWith,
    TResult? Function(String value)? textEndsWith,
    TResult? Function()? textIsEmpty,
    TResult? Function()? textIsNotEmpty,
    TResult? Function(double value)? numberEquals,
    TResult? Function(double value)? numberDoesNotEqual,
    TResult? Function(double value)? numberGreaterThan,
    TResult? Function(double value)? numberLessThan,
    TResult? Function(double value)? numberGreaterThanOrEqual,
    TResult? Function(double value)? numberLessThanOrEqual,
    TResult? Function()? numberIsEmpty,
    TResult? Function()? numberIsNotEmpty,
    TResult? Function(bool value)? checkboxEquals,
    TResult? Function(String value)? selectEquals,
    TResult? Function(String value)? selectDoesNotEqual,
    TResult? Function()? selectIsEmpty,
    TResult? Function()? selectIsNotEmpty,
    TResult? Function(String value)? multiSelectContains,
    TResult? Function(String value)? multiSelectDoesNotContain,
    TResult? Function()? multiSelectIsEmpty,
    TResult? Function()? multiSelectIsNotEmpty,
    TResult? Function(String date)? dateEquals,
    TResult? Function(String date)? dateBefore,
    TResult? Function(String date)? dateAfter,
    TResult? Function(String date)? dateOnOrBefore,
    TResult? Function(String date)? dateOnOrAfter,
    TResult? Function()? dateIsEmpty,
    TResult? Function()? dateIsNotEmpty,
    TResult? Function()? datePastWeek,
    TResult? Function()? datePastMonth,
    TResult? Function()? datePastYear,
    TResult? Function()? dateNextWeek,
    TResult? Function()? dateNextMonth,
    TResult? Function()? dateNextYear,
    TResult? Function(String userId)? peopleContains,
    TResult? Function(String userId)? peopleDoesNotContain,
    TResult? Function()? peopleIsEmpty,
    TResult? Function()? peopleIsNotEmpty,
    TResult? Function()? filesIsEmpty,
    TResult? Function()? filesIsNotEmpty,
    TResult? Function(String pageId)? relationContains,
    TResult? Function(String pageId)? relationDoesNotContain,
    TResult? Function()? relationIsEmpty,
    TResult? Function()? relationIsNotEmpty,
  }) {
    return dateIsEmpty?.call();
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function(String value)? textEquals,
    TResult Function(String value)? textDoesNotEqual,
    TResult Function(String value)? textContains,
    TResult Function(String value)? textDoesNotContain,
    TResult Function(String value)? textStartsWith,
    TResult Function(String value)? textEndsWith,
    TResult Function()? textIsEmpty,
    TResult Function()? textIsNotEmpty,
    TResult Function(double value)? numberEquals,
    TResult Function(double value)? numberDoesNotEqual,
    TResult Function(double value)? numberGreaterThan,
    TResult Function(double value)? numberLessThan,
    TResult Function(double value)? numberGreaterThanOrEqual,
    TResult Function(double value)? numberLessThanOrEqual,
    TResult Function()? numberIsEmpty,
    TResult Function()? numberIsNotEmpty,
    TResult Function(bool value)? checkboxEquals,
    TResult Function(String value)? selectEquals,
    TResult Function(String value)? selectDoesNotEqual,
    TResult Function()? selectIsEmpty,
    TResult Function()? selectIsNotEmpty,
    TResult Function(String value)? multiSelectContains,
    TResult Function(String value)? multiSelectDoesNotContain,
    TResult Function()? multiSelectIsEmpty,
    TResult Function()? multiSelectIsNotEmpty,
    TResult Function(String date)? dateEquals,
    TResult Function(String date)? dateBefore,
    TResult Function(String date)? dateAfter,
    TResult Function(String date)? dateOnOrBefore,
    TResult Function(String date)? dateOnOrAfter,
    TResult Function()? dateIsEmpty,
    TResult Function()? dateIsNotEmpty,
    TResult Function()? datePastWeek,
    TResult Function()? datePastMonth,
    TResult Function()? datePastYear,
    TResult Function()? dateNextWeek,
    TResult Function()? dateNextMonth,
    TResult Function()? dateNextYear,
    TResult Function(String userId)? peopleContains,
    TResult Function(String userId)? peopleDoesNotContain,
    TResult Function()? peopleIsEmpty,
    TResult Function()? peopleIsNotEmpty,
    TResult Function()? filesIsEmpty,
    TResult Function()? filesIsNotEmpty,
    TResult Function(String pageId)? relationContains,
    TResult Function(String pageId)? relationDoesNotContain,
    TResult Function()? relationIsEmpty,
    TResult Function()? relationIsNotEmpty,
    required TResult orElse(),
  }) {
    if (dateIsEmpty != null) {
      return dateIsEmpty();
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(TextEqualsFilter value) textEquals,
    required TResult Function(TextDoesNotEqualFilter value) textDoesNotEqual,
    required TResult Function(TextContainsFilter value) textContains,
    required TResult Function(TextDoesNotContainFilter value)
        textDoesNotContain,
    required TResult Function(TextStartsWithFilter value) textStartsWith,
    required TResult Function(TextEndsWithFilter value) textEndsWith,
    required TResult Function(TextIsEmptyFilter value) textIsEmpty,
    required TResult Function(TextIsNotEmptyFilter value) textIsNotEmpty,
    required TResult Function(NumberEqualsFilter value) numberEquals,
    required TResult Function(NumberDoesNotEqualFilter value)
        numberDoesNotEqual,
    required TResult Function(NumberGreaterThanFilter value) numberGreaterThan,
    required TResult Function(NumberLessThanFilter value) numberLessThan,
    required TResult Function(NumberGreaterThanOrEqualFilter value)
        numberGreaterThanOrEqual,
    required TResult Function(NumberLessThanOrEqualFilter value)
        numberLessThanOrEqual,
    required TResult Function(NumberIsEmptyFilter value) numberIsEmpty,
    required TResult Function(NumberIsNotEmptyFilter value) numberIsNotEmpty,
    required TResult Function(CheckboxEqualsFilter value) checkboxEquals,
    required TResult Function(SelectEqualsFilter value) selectEquals,
    required TResult Function(SelectDoesNotEqualFilter value)
        selectDoesNotEqual,
    required TResult Function(SelectIsEmptyFilter value) selectIsEmpty,
    required TResult Function(SelectIsNotEmptyFilter value) selectIsNotEmpty,
    required TResult Function(MultiSelectContainsFilter value)
        multiSelectContains,
    required TResult Function(MultiSelectDoesNotContainFilter value)
        multiSelectDoesNotContain,
    required TResult Function(MultiSelectIsEmptyFilter value)
        multiSelectIsEmpty,
    required TResult Function(MultiSelectIsNotEmptyFilter value)
        multiSelectIsNotEmpty,
    required TResult Function(DateEqualsFilter value) dateEquals,
    required TResult Function(DateBeforeFilter value) dateBefore,
    required TResult Function(DateAfterFilter value) dateAfter,
    required TResult Function(DateOnOrBeforeFilter value) dateOnOrBefore,
    required TResult Function(DateOnOrAfterFilter value) dateOnOrAfter,
    required TResult Function(DateIsEmptyFilter value) dateIsEmpty,
    required TResult Function(DateIsNotEmptyFilter value) dateIsNotEmpty,
    required TResult Function(DatePastWeekFilter value) datePastWeek,
    required TResult Function(DatePastMonthFilter value) datePastMonth,
    required TResult Function(DatePastYearFilter value) datePastYear,
    required TResult Function(DateNextWeekFilter value) dateNextWeek,
    required TResult Function(DateNextMonthFilter value) dateNextMonth,
    required TResult Function(DateNextYearFilter value) dateNextYear,
    required TResult Function(PeopleContainsFilter value) peopleContains,
    required TResult Function(PeopleDoesNotContainFilter value)
        peopleDoesNotContain,
    required TResult Function(PeopleIsEmptyFilter value) peopleIsEmpty,
    required TResult Function(PeopleIsNotEmptyFilter value) peopleIsNotEmpty,
    required TResult Function(FilesIsEmptyFilter value) filesIsEmpty,
    required TResult Function(FilesIsNotEmptyFilter value) filesIsNotEmpty,
    required TResult Function(RelationContainsFilter value) relationContains,
    required TResult Function(RelationDoesNotContainFilter value)
        relationDoesNotContain,
    required TResult Function(RelationIsEmptyFilter value) relationIsEmpty,
    required TResult Function(RelationIsNotEmptyFilter value)
        relationIsNotEmpty,
  }) {
    return dateIsEmpty(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(TextEqualsFilter value)? textEquals,
    TResult? Function(TextDoesNotEqualFilter value)? textDoesNotEqual,
    TResult? Function(TextContainsFilter value)? textContains,
    TResult? Function(TextDoesNotContainFilter value)? textDoesNotContain,
    TResult? Function(TextStartsWithFilter value)? textStartsWith,
    TResult? Function(TextEndsWithFilter value)? textEndsWith,
    TResult? Function(TextIsEmptyFilter value)? textIsEmpty,
    TResult? Function(TextIsNotEmptyFilter value)? textIsNotEmpty,
    TResult? Function(NumberEqualsFilter value)? numberEquals,
    TResult? Function(NumberDoesNotEqualFilter value)? numberDoesNotEqual,
    TResult? Function(NumberGreaterThanFilter value)? numberGreaterThan,
    TResult? Function(NumberLessThanFilter value)? numberLessThan,
    TResult? Function(NumberGreaterThanOrEqualFilter value)?
        numberGreaterThanOrEqual,
    TResult? Function(NumberLessThanOrEqualFilter value)? numberLessThanOrEqual,
    TResult? Function(NumberIsEmptyFilter value)? numberIsEmpty,
    TResult? Function(NumberIsNotEmptyFilter value)? numberIsNotEmpty,
    TResult? Function(CheckboxEqualsFilter value)? checkboxEquals,
    TResult? Function(SelectEqualsFilter value)? selectEquals,
    TResult? Function(SelectDoesNotEqualFilter value)? selectDoesNotEqual,
    TResult? Function(SelectIsEmptyFilter value)? selectIsEmpty,
    TResult? Function(SelectIsNotEmptyFilter value)? selectIsNotEmpty,
    TResult? Function(MultiSelectContainsFilter value)? multiSelectContains,
    TResult? Function(MultiSelectDoesNotContainFilter value)?
        multiSelectDoesNotContain,
    TResult? Function(MultiSelectIsEmptyFilter value)? multiSelectIsEmpty,
    TResult? Function(MultiSelectIsNotEmptyFilter value)? multiSelectIsNotEmpty,
    TResult? Function(DateEqualsFilter value)? dateEquals,
    TResult? Function(DateBeforeFilter value)? dateBefore,
    TResult? Function(DateAfterFilter value)? dateAfter,
    TResult? Function(DateOnOrBeforeFilter value)? dateOnOrBefore,
    TResult? Function(DateOnOrAfterFilter value)? dateOnOrAfter,
    TResult? Function(DateIsEmptyFilter value)? dateIsEmpty,
    TResult? Function(DateIsNotEmptyFilter value)? dateIsNotEmpty,
    TResult? Function(DatePastWeekFilter value)? datePastWeek,
    TResult? Function(DatePastMonthFilter value)? datePastMonth,
    TResult? Function(DatePastYearFilter value)? datePastYear,
    TResult? Function(DateNextWeekFilter value)? dateNextWeek,
    TResult? Function(DateNextMonthFilter value)? dateNextMonth,
    TResult? Function(DateNextYearFilter value)? dateNextYear,
    TResult? Function(PeopleContainsFilter value)? peopleContains,
    TResult? Function(PeopleDoesNotContainFilter value)? peopleDoesNotContain,
    TResult? Function(PeopleIsEmptyFilter value)? peopleIsEmpty,
    TResult? Function(PeopleIsNotEmptyFilter value)? peopleIsNotEmpty,
    TResult? Function(FilesIsEmptyFilter value)? filesIsEmpty,
    TResult? Function(FilesIsNotEmptyFilter value)? filesIsNotEmpty,
    TResult? Function(RelationContainsFilter value)? relationContains,
    TResult? Function(RelationDoesNotContainFilter value)?
        relationDoesNotContain,
    TResult? Function(RelationIsEmptyFilter value)? relationIsEmpty,
    TResult? Function(RelationIsNotEmptyFilter value)? relationIsNotEmpty,
  }) {
    return dateIsEmpty?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(TextEqualsFilter value)? textEquals,
    TResult Function(TextDoesNotEqualFilter value)? textDoesNotEqual,
    TResult Function(TextContainsFilter value)? textContains,
    TResult Function(TextDoesNotContainFilter value)? textDoesNotContain,
    TResult Function(TextStartsWithFilter value)? textStartsWith,
    TResult Function(TextEndsWithFilter value)? textEndsWith,
    TResult Function(TextIsEmptyFilter value)? textIsEmpty,
    TResult Function(TextIsNotEmptyFilter value)? textIsNotEmpty,
    TResult Function(NumberEqualsFilter value)? numberEquals,
    TResult Function(NumberDoesNotEqualFilter value)? numberDoesNotEqual,
    TResult Function(NumberGreaterThanFilter value)? numberGreaterThan,
    TResult Function(NumberLessThanFilter value)? numberLessThan,
    TResult Function(NumberGreaterThanOrEqualFilter value)?
        numberGreaterThanOrEqual,
    TResult Function(NumberLessThanOrEqualFilter value)? numberLessThanOrEqual,
    TResult Function(NumberIsEmptyFilter value)? numberIsEmpty,
    TResult Function(NumberIsNotEmptyFilter value)? numberIsNotEmpty,
    TResult Function(CheckboxEqualsFilter value)? checkboxEquals,
    TResult Function(SelectEqualsFilter value)? selectEquals,
    TResult Function(SelectDoesNotEqualFilter value)? selectDoesNotEqual,
    TResult Function(SelectIsEmptyFilter value)? selectIsEmpty,
    TResult Function(SelectIsNotEmptyFilter value)? selectIsNotEmpty,
    TResult Function(MultiSelectContainsFilter value)? multiSelectContains,
    TResult Function(MultiSelectDoesNotContainFilter value)?
        multiSelectDoesNotContain,
    TResult Function(MultiSelectIsEmptyFilter value)? multiSelectIsEmpty,
    TResult Function(MultiSelectIsNotEmptyFilter value)? multiSelectIsNotEmpty,
    TResult Function(DateEqualsFilter value)? dateEquals,
    TResult Function(DateBeforeFilter value)? dateBefore,
    TResult Function(DateAfterFilter value)? dateAfter,
    TResult Function(DateOnOrBeforeFilter value)? dateOnOrBefore,
    TResult Function(DateOnOrAfterFilter value)? dateOnOrAfter,
    TResult Function(DateIsEmptyFilter value)? dateIsEmpty,
    TResult Function(DateIsNotEmptyFilter value)? dateIsNotEmpty,
    TResult Function(DatePastWeekFilter value)? datePastWeek,
    TResult Function(DatePastMonthFilter value)? datePastMonth,
    TResult Function(DatePastYearFilter value)? datePastYear,
    TResult Function(DateNextWeekFilter value)? dateNextWeek,
    TResult Function(DateNextMonthFilter value)? dateNextMonth,
    TResult Function(DateNextYearFilter value)? dateNextYear,
    TResult Function(PeopleContainsFilter value)? peopleContains,
    TResult Function(PeopleDoesNotContainFilter value)? peopleDoesNotContain,
    TResult Function(PeopleIsEmptyFilter value)? peopleIsEmpty,
    TResult Function(PeopleIsNotEmptyFilter value)? peopleIsNotEmpty,
    TResult Function(FilesIsEmptyFilter value)? filesIsEmpty,
    TResult Function(FilesIsNotEmptyFilter value)? filesIsNotEmpty,
    TResult Function(RelationContainsFilter value)? relationContains,
    TResult Function(RelationDoesNotContainFilter value)?
        relationDoesNotContain,
    TResult Function(RelationIsEmptyFilter value)? relationIsEmpty,
    TResult Function(RelationIsNotEmptyFilter value)? relationIsNotEmpty,
    required TResult orElse(),
  }) {
    if (dateIsEmpty != null) {
      return dateIsEmpty(this);
    }
    return orElse();
  }
}

abstract class DateIsEmptyFilter extends PropertyFilter {
  const factory DateIsEmptyFilter() = _$DateIsEmptyFilterImpl;
  const DateIsEmptyFilter._() : super._();
}

/// @nodoc
abstract class _$$DateIsNotEmptyFilterImplCopyWith<$Res> {
  factory _$$DateIsNotEmptyFilterImplCopyWith(_$DateIsNotEmptyFilterImpl value,
          $Res Function(_$DateIsNotEmptyFilterImpl) then) =
      __$$DateIsNotEmptyFilterImplCopyWithImpl<$Res>;
}

/// @nodoc
class __$$DateIsNotEmptyFilterImplCopyWithImpl<$Res>
    extends _$PropertyFilterCopyWithImpl<$Res, _$DateIsNotEmptyFilterImpl>
    implements _$$DateIsNotEmptyFilterImplCopyWith<$Res> {
  __$$DateIsNotEmptyFilterImplCopyWithImpl(_$DateIsNotEmptyFilterImpl _value,
      $Res Function(_$DateIsNotEmptyFilterImpl) _then)
      : super(_value, _then);

  /// Create a copy of PropertyFilter
  /// with the given fields replaced by the non-null parameter values.
}

/// @nodoc

class _$DateIsNotEmptyFilterImpl extends DateIsNotEmptyFilter {
  const _$DateIsNotEmptyFilterImpl() : super._();

  @override
  String toString() {
    return 'PropertyFilter.dateIsNotEmpty()';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$DateIsNotEmptyFilterImpl);
  }

  @override
  int get hashCode => runtimeType.hashCode;

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function(String value) textEquals,
    required TResult Function(String value) textDoesNotEqual,
    required TResult Function(String value) textContains,
    required TResult Function(String value) textDoesNotContain,
    required TResult Function(String value) textStartsWith,
    required TResult Function(String value) textEndsWith,
    required TResult Function() textIsEmpty,
    required TResult Function() textIsNotEmpty,
    required TResult Function(double value) numberEquals,
    required TResult Function(double value) numberDoesNotEqual,
    required TResult Function(double value) numberGreaterThan,
    required TResult Function(double value) numberLessThan,
    required TResult Function(double value) numberGreaterThanOrEqual,
    required TResult Function(double value) numberLessThanOrEqual,
    required TResult Function() numberIsEmpty,
    required TResult Function() numberIsNotEmpty,
    required TResult Function(bool value) checkboxEquals,
    required TResult Function(String value) selectEquals,
    required TResult Function(String value) selectDoesNotEqual,
    required TResult Function() selectIsEmpty,
    required TResult Function() selectIsNotEmpty,
    required TResult Function(String value) multiSelectContains,
    required TResult Function(String value) multiSelectDoesNotContain,
    required TResult Function() multiSelectIsEmpty,
    required TResult Function() multiSelectIsNotEmpty,
    required TResult Function(String date) dateEquals,
    required TResult Function(String date) dateBefore,
    required TResult Function(String date) dateAfter,
    required TResult Function(String date) dateOnOrBefore,
    required TResult Function(String date) dateOnOrAfter,
    required TResult Function() dateIsEmpty,
    required TResult Function() dateIsNotEmpty,
    required TResult Function() datePastWeek,
    required TResult Function() datePastMonth,
    required TResult Function() datePastYear,
    required TResult Function() dateNextWeek,
    required TResult Function() dateNextMonth,
    required TResult Function() dateNextYear,
    required TResult Function(String userId) peopleContains,
    required TResult Function(String userId) peopleDoesNotContain,
    required TResult Function() peopleIsEmpty,
    required TResult Function() peopleIsNotEmpty,
    required TResult Function() filesIsEmpty,
    required TResult Function() filesIsNotEmpty,
    required TResult Function(String pageId) relationContains,
    required TResult Function(String pageId) relationDoesNotContain,
    required TResult Function() relationIsEmpty,
    required TResult Function() relationIsNotEmpty,
  }) {
    return dateIsNotEmpty();
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function(String value)? textEquals,
    TResult? Function(String value)? textDoesNotEqual,
    TResult? Function(String value)? textContains,
    TResult? Function(String value)? textDoesNotContain,
    TResult? Function(String value)? textStartsWith,
    TResult? Function(String value)? textEndsWith,
    TResult? Function()? textIsEmpty,
    TResult? Function()? textIsNotEmpty,
    TResult? Function(double value)? numberEquals,
    TResult? Function(double value)? numberDoesNotEqual,
    TResult? Function(double value)? numberGreaterThan,
    TResult? Function(double value)? numberLessThan,
    TResult? Function(double value)? numberGreaterThanOrEqual,
    TResult? Function(double value)? numberLessThanOrEqual,
    TResult? Function()? numberIsEmpty,
    TResult? Function()? numberIsNotEmpty,
    TResult? Function(bool value)? checkboxEquals,
    TResult? Function(String value)? selectEquals,
    TResult? Function(String value)? selectDoesNotEqual,
    TResult? Function()? selectIsEmpty,
    TResult? Function()? selectIsNotEmpty,
    TResult? Function(String value)? multiSelectContains,
    TResult? Function(String value)? multiSelectDoesNotContain,
    TResult? Function()? multiSelectIsEmpty,
    TResult? Function()? multiSelectIsNotEmpty,
    TResult? Function(String date)? dateEquals,
    TResult? Function(String date)? dateBefore,
    TResult? Function(String date)? dateAfter,
    TResult? Function(String date)? dateOnOrBefore,
    TResult? Function(String date)? dateOnOrAfter,
    TResult? Function()? dateIsEmpty,
    TResult? Function()? dateIsNotEmpty,
    TResult? Function()? datePastWeek,
    TResult? Function()? datePastMonth,
    TResult? Function()? datePastYear,
    TResult? Function()? dateNextWeek,
    TResult? Function()? dateNextMonth,
    TResult? Function()? dateNextYear,
    TResult? Function(String userId)? peopleContains,
    TResult? Function(String userId)? peopleDoesNotContain,
    TResult? Function()? peopleIsEmpty,
    TResult? Function()? peopleIsNotEmpty,
    TResult? Function()? filesIsEmpty,
    TResult? Function()? filesIsNotEmpty,
    TResult? Function(String pageId)? relationContains,
    TResult? Function(String pageId)? relationDoesNotContain,
    TResult? Function()? relationIsEmpty,
    TResult? Function()? relationIsNotEmpty,
  }) {
    return dateIsNotEmpty?.call();
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function(String value)? textEquals,
    TResult Function(String value)? textDoesNotEqual,
    TResult Function(String value)? textContains,
    TResult Function(String value)? textDoesNotContain,
    TResult Function(String value)? textStartsWith,
    TResult Function(String value)? textEndsWith,
    TResult Function()? textIsEmpty,
    TResult Function()? textIsNotEmpty,
    TResult Function(double value)? numberEquals,
    TResult Function(double value)? numberDoesNotEqual,
    TResult Function(double value)? numberGreaterThan,
    TResult Function(double value)? numberLessThan,
    TResult Function(double value)? numberGreaterThanOrEqual,
    TResult Function(double value)? numberLessThanOrEqual,
    TResult Function()? numberIsEmpty,
    TResult Function()? numberIsNotEmpty,
    TResult Function(bool value)? checkboxEquals,
    TResult Function(String value)? selectEquals,
    TResult Function(String value)? selectDoesNotEqual,
    TResult Function()? selectIsEmpty,
    TResult Function()? selectIsNotEmpty,
    TResult Function(String value)? multiSelectContains,
    TResult Function(String value)? multiSelectDoesNotContain,
    TResult Function()? multiSelectIsEmpty,
    TResult Function()? multiSelectIsNotEmpty,
    TResult Function(String date)? dateEquals,
    TResult Function(String date)? dateBefore,
    TResult Function(String date)? dateAfter,
    TResult Function(String date)? dateOnOrBefore,
    TResult Function(String date)? dateOnOrAfter,
    TResult Function()? dateIsEmpty,
    TResult Function()? dateIsNotEmpty,
    TResult Function()? datePastWeek,
    TResult Function()? datePastMonth,
    TResult Function()? datePastYear,
    TResult Function()? dateNextWeek,
    TResult Function()? dateNextMonth,
    TResult Function()? dateNextYear,
    TResult Function(String userId)? peopleContains,
    TResult Function(String userId)? peopleDoesNotContain,
    TResult Function()? peopleIsEmpty,
    TResult Function()? peopleIsNotEmpty,
    TResult Function()? filesIsEmpty,
    TResult Function()? filesIsNotEmpty,
    TResult Function(String pageId)? relationContains,
    TResult Function(String pageId)? relationDoesNotContain,
    TResult Function()? relationIsEmpty,
    TResult Function()? relationIsNotEmpty,
    required TResult orElse(),
  }) {
    if (dateIsNotEmpty != null) {
      return dateIsNotEmpty();
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(TextEqualsFilter value) textEquals,
    required TResult Function(TextDoesNotEqualFilter value) textDoesNotEqual,
    required TResult Function(TextContainsFilter value) textContains,
    required TResult Function(TextDoesNotContainFilter value)
        textDoesNotContain,
    required TResult Function(TextStartsWithFilter value) textStartsWith,
    required TResult Function(TextEndsWithFilter value) textEndsWith,
    required TResult Function(TextIsEmptyFilter value) textIsEmpty,
    required TResult Function(TextIsNotEmptyFilter value) textIsNotEmpty,
    required TResult Function(NumberEqualsFilter value) numberEquals,
    required TResult Function(NumberDoesNotEqualFilter value)
        numberDoesNotEqual,
    required TResult Function(NumberGreaterThanFilter value) numberGreaterThan,
    required TResult Function(NumberLessThanFilter value) numberLessThan,
    required TResult Function(NumberGreaterThanOrEqualFilter value)
        numberGreaterThanOrEqual,
    required TResult Function(NumberLessThanOrEqualFilter value)
        numberLessThanOrEqual,
    required TResult Function(NumberIsEmptyFilter value) numberIsEmpty,
    required TResult Function(NumberIsNotEmptyFilter value) numberIsNotEmpty,
    required TResult Function(CheckboxEqualsFilter value) checkboxEquals,
    required TResult Function(SelectEqualsFilter value) selectEquals,
    required TResult Function(SelectDoesNotEqualFilter value)
        selectDoesNotEqual,
    required TResult Function(SelectIsEmptyFilter value) selectIsEmpty,
    required TResult Function(SelectIsNotEmptyFilter value) selectIsNotEmpty,
    required TResult Function(MultiSelectContainsFilter value)
        multiSelectContains,
    required TResult Function(MultiSelectDoesNotContainFilter value)
        multiSelectDoesNotContain,
    required TResult Function(MultiSelectIsEmptyFilter value)
        multiSelectIsEmpty,
    required TResult Function(MultiSelectIsNotEmptyFilter value)
        multiSelectIsNotEmpty,
    required TResult Function(DateEqualsFilter value) dateEquals,
    required TResult Function(DateBeforeFilter value) dateBefore,
    required TResult Function(DateAfterFilter value) dateAfter,
    required TResult Function(DateOnOrBeforeFilter value) dateOnOrBefore,
    required TResult Function(DateOnOrAfterFilter value) dateOnOrAfter,
    required TResult Function(DateIsEmptyFilter value) dateIsEmpty,
    required TResult Function(DateIsNotEmptyFilter value) dateIsNotEmpty,
    required TResult Function(DatePastWeekFilter value) datePastWeek,
    required TResult Function(DatePastMonthFilter value) datePastMonth,
    required TResult Function(DatePastYearFilter value) datePastYear,
    required TResult Function(DateNextWeekFilter value) dateNextWeek,
    required TResult Function(DateNextMonthFilter value) dateNextMonth,
    required TResult Function(DateNextYearFilter value) dateNextYear,
    required TResult Function(PeopleContainsFilter value) peopleContains,
    required TResult Function(PeopleDoesNotContainFilter value)
        peopleDoesNotContain,
    required TResult Function(PeopleIsEmptyFilter value) peopleIsEmpty,
    required TResult Function(PeopleIsNotEmptyFilter value) peopleIsNotEmpty,
    required TResult Function(FilesIsEmptyFilter value) filesIsEmpty,
    required TResult Function(FilesIsNotEmptyFilter value) filesIsNotEmpty,
    required TResult Function(RelationContainsFilter value) relationContains,
    required TResult Function(RelationDoesNotContainFilter value)
        relationDoesNotContain,
    required TResult Function(RelationIsEmptyFilter value) relationIsEmpty,
    required TResult Function(RelationIsNotEmptyFilter value)
        relationIsNotEmpty,
  }) {
    return dateIsNotEmpty(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(TextEqualsFilter value)? textEquals,
    TResult? Function(TextDoesNotEqualFilter value)? textDoesNotEqual,
    TResult? Function(TextContainsFilter value)? textContains,
    TResult? Function(TextDoesNotContainFilter value)? textDoesNotContain,
    TResult? Function(TextStartsWithFilter value)? textStartsWith,
    TResult? Function(TextEndsWithFilter value)? textEndsWith,
    TResult? Function(TextIsEmptyFilter value)? textIsEmpty,
    TResult? Function(TextIsNotEmptyFilter value)? textIsNotEmpty,
    TResult? Function(NumberEqualsFilter value)? numberEquals,
    TResult? Function(NumberDoesNotEqualFilter value)? numberDoesNotEqual,
    TResult? Function(NumberGreaterThanFilter value)? numberGreaterThan,
    TResult? Function(NumberLessThanFilter value)? numberLessThan,
    TResult? Function(NumberGreaterThanOrEqualFilter value)?
        numberGreaterThanOrEqual,
    TResult? Function(NumberLessThanOrEqualFilter value)? numberLessThanOrEqual,
    TResult? Function(NumberIsEmptyFilter value)? numberIsEmpty,
    TResult? Function(NumberIsNotEmptyFilter value)? numberIsNotEmpty,
    TResult? Function(CheckboxEqualsFilter value)? checkboxEquals,
    TResult? Function(SelectEqualsFilter value)? selectEquals,
    TResult? Function(SelectDoesNotEqualFilter value)? selectDoesNotEqual,
    TResult? Function(SelectIsEmptyFilter value)? selectIsEmpty,
    TResult? Function(SelectIsNotEmptyFilter value)? selectIsNotEmpty,
    TResult? Function(MultiSelectContainsFilter value)? multiSelectContains,
    TResult? Function(MultiSelectDoesNotContainFilter value)?
        multiSelectDoesNotContain,
    TResult? Function(MultiSelectIsEmptyFilter value)? multiSelectIsEmpty,
    TResult? Function(MultiSelectIsNotEmptyFilter value)? multiSelectIsNotEmpty,
    TResult? Function(DateEqualsFilter value)? dateEquals,
    TResult? Function(DateBeforeFilter value)? dateBefore,
    TResult? Function(DateAfterFilter value)? dateAfter,
    TResult? Function(DateOnOrBeforeFilter value)? dateOnOrBefore,
    TResult? Function(DateOnOrAfterFilter value)? dateOnOrAfter,
    TResult? Function(DateIsEmptyFilter value)? dateIsEmpty,
    TResult? Function(DateIsNotEmptyFilter value)? dateIsNotEmpty,
    TResult? Function(DatePastWeekFilter value)? datePastWeek,
    TResult? Function(DatePastMonthFilter value)? datePastMonth,
    TResult? Function(DatePastYearFilter value)? datePastYear,
    TResult? Function(DateNextWeekFilter value)? dateNextWeek,
    TResult? Function(DateNextMonthFilter value)? dateNextMonth,
    TResult? Function(DateNextYearFilter value)? dateNextYear,
    TResult? Function(PeopleContainsFilter value)? peopleContains,
    TResult? Function(PeopleDoesNotContainFilter value)? peopleDoesNotContain,
    TResult? Function(PeopleIsEmptyFilter value)? peopleIsEmpty,
    TResult? Function(PeopleIsNotEmptyFilter value)? peopleIsNotEmpty,
    TResult? Function(FilesIsEmptyFilter value)? filesIsEmpty,
    TResult? Function(FilesIsNotEmptyFilter value)? filesIsNotEmpty,
    TResult? Function(RelationContainsFilter value)? relationContains,
    TResult? Function(RelationDoesNotContainFilter value)?
        relationDoesNotContain,
    TResult? Function(RelationIsEmptyFilter value)? relationIsEmpty,
    TResult? Function(RelationIsNotEmptyFilter value)? relationIsNotEmpty,
  }) {
    return dateIsNotEmpty?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(TextEqualsFilter value)? textEquals,
    TResult Function(TextDoesNotEqualFilter value)? textDoesNotEqual,
    TResult Function(TextContainsFilter value)? textContains,
    TResult Function(TextDoesNotContainFilter value)? textDoesNotContain,
    TResult Function(TextStartsWithFilter value)? textStartsWith,
    TResult Function(TextEndsWithFilter value)? textEndsWith,
    TResult Function(TextIsEmptyFilter value)? textIsEmpty,
    TResult Function(TextIsNotEmptyFilter value)? textIsNotEmpty,
    TResult Function(NumberEqualsFilter value)? numberEquals,
    TResult Function(NumberDoesNotEqualFilter value)? numberDoesNotEqual,
    TResult Function(NumberGreaterThanFilter value)? numberGreaterThan,
    TResult Function(NumberLessThanFilter value)? numberLessThan,
    TResult Function(NumberGreaterThanOrEqualFilter value)?
        numberGreaterThanOrEqual,
    TResult Function(NumberLessThanOrEqualFilter value)? numberLessThanOrEqual,
    TResult Function(NumberIsEmptyFilter value)? numberIsEmpty,
    TResult Function(NumberIsNotEmptyFilter value)? numberIsNotEmpty,
    TResult Function(CheckboxEqualsFilter value)? checkboxEquals,
    TResult Function(SelectEqualsFilter value)? selectEquals,
    TResult Function(SelectDoesNotEqualFilter value)? selectDoesNotEqual,
    TResult Function(SelectIsEmptyFilter value)? selectIsEmpty,
    TResult Function(SelectIsNotEmptyFilter value)? selectIsNotEmpty,
    TResult Function(MultiSelectContainsFilter value)? multiSelectContains,
    TResult Function(MultiSelectDoesNotContainFilter value)?
        multiSelectDoesNotContain,
    TResult Function(MultiSelectIsEmptyFilter value)? multiSelectIsEmpty,
    TResult Function(MultiSelectIsNotEmptyFilter value)? multiSelectIsNotEmpty,
    TResult Function(DateEqualsFilter value)? dateEquals,
    TResult Function(DateBeforeFilter value)? dateBefore,
    TResult Function(DateAfterFilter value)? dateAfter,
    TResult Function(DateOnOrBeforeFilter value)? dateOnOrBefore,
    TResult Function(DateOnOrAfterFilter value)? dateOnOrAfter,
    TResult Function(DateIsEmptyFilter value)? dateIsEmpty,
    TResult Function(DateIsNotEmptyFilter value)? dateIsNotEmpty,
    TResult Function(DatePastWeekFilter value)? datePastWeek,
    TResult Function(DatePastMonthFilter value)? datePastMonth,
    TResult Function(DatePastYearFilter value)? datePastYear,
    TResult Function(DateNextWeekFilter value)? dateNextWeek,
    TResult Function(DateNextMonthFilter value)? dateNextMonth,
    TResult Function(DateNextYearFilter value)? dateNextYear,
    TResult Function(PeopleContainsFilter value)? peopleContains,
    TResult Function(PeopleDoesNotContainFilter value)? peopleDoesNotContain,
    TResult Function(PeopleIsEmptyFilter value)? peopleIsEmpty,
    TResult Function(PeopleIsNotEmptyFilter value)? peopleIsNotEmpty,
    TResult Function(FilesIsEmptyFilter value)? filesIsEmpty,
    TResult Function(FilesIsNotEmptyFilter value)? filesIsNotEmpty,
    TResult Function(RelationContainsFilter value)? relationContains,
    TResult Function(RelationDoesNotContainFilter value)?
        relationDoesNotContain,
    TResult Function(RelationIsEmptyFilter value)? relationIsEmpty,
    TResult Function(RelationIsNotEmptyFilter value)? relationIsNotEmpty,
    required TResult orElse(),
  }) {
    if (dateIsNotEmpty != null) {
      return dateIsNotEmpty(this);
    }
    return orElse();
  }
}

abstract class DateIsNotEmptyFilter extends PropertyFilter {
  const factory DateIsNotEmptyFilter() = _$DateIsNotEmptyFilterImpl;
  const DateIsNotEmptyFilter._() : super._();
}

/// @nodoc
abstract class _$$DatePastWeekFilterImplCopyWith<$Res> {
  factory _$$DatePastWeekFilterImplCopyWith(_$DatePastWeekFilterImpl value,
          $Res Function(_$DatePastWeekFilterImpl) then) =
      __$$DatePastWeekFilterImplCopyWithImpl<$Res>;
}

/// @nodoc
class __$$DatePastWeekFilterImplCopyWithImpl<$Res>
    extends _$PropertyFilterCopyWithImpl<$Res, _$DatePastWeekFilterImpl>
    implements _$$DatePastWeekFilterImplCopyWith<$Res> {
  __$$DatePastWeekFilterImplCopyWithImpl(_$DatePastWeekFilterImpl _value,
      $Res Function(_$DatePastWeekFilterImpl) _then)
      : super(_value, _then);

  /// Create a copy of PropertyFilter
  /// with the given fields replaced by the non-null parameter values.
}

/// @nodoc

class _$DatePastWeekFilterImpl extends DatePastWeekFilter {
  const _$DatePastWeekFilterImpl() : super._();

  @override
  String toString() {
    return 'PropertyFilter.datePastWeek()';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType && other is _$DatePastWeekFilterImpl);
  }

  @override
  int get hashCode => runtimeType.hashCode;

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function(String value) textEquals,
    required TResult Function(String value) textDoesNotEqual,
    required TResult Function(String value) textContains,
    required TResult Function(String value) textDoesNotContain,
    required TResult Function(String value) textStartsWith,
    required TResult Function(String value) textEndsWith,
    required TResult Function() textIsEmpty,
    required TResult Function() textIsNotEmpty,
    required TResult Function(double value) numberEquals,
    required TResult Function(double value) numberDoesNotEqual,
    required TResult Function(double value) numberGreaterThan,
    required TResult Function(double value) numberLessThan,
    required TResult Function(double value) numberGreaterThanOrEqual,
    required TResult Function(double value) numberLessThanOrEqual,
    required TResult Function() numberIsEmpty,
    required TResult Function() numberIsNotEmpty,
    required TResult Function(bool value) checkboxEquals,
    required TResult Function(String value) selectEquals,
    required TResult Function(String value) selectDoesNotEqual,
    required TResult Function() selectIsEmpty,
    required TResult Function() selectIsNotEmpty,
    required TResult Function(String value) multiSelectContains,
    required TResult Function(String value) multiSelectDoesNotContain,
    required TResult Function() multiSelectIsEmpty,
    required TResult Function() multiSelectIsNotEmpty,
    required TResult Function(String date) dateEquals,
    required TResult Function(String date) dateBefore,
    required TResult Function(String date) dateAfter,
    required TResult Function(String date) dateOnOrBefore,
    required TResult Function(String date) dateOnOrAfter,
    required TResult Function() dateIsEmpty,
    required TResult Function() dateIsNotEmpty,
    required TResult Function() datePastWeek,
    required TResult Function() datePastMonth,
    required TResult Function() datePastYear,
    required TResult Function() dateNextWeek,
    required TResult Function() dateNextMonth,
    required TResult Function() dateNextYear,
    required TResult Function(String userId) peopleContains,
    required TResult Function(String userId) peopleDoesNotContain,
    required TResult Function() peopleIsEmpty,
    required TResult Function() peopleIsNotEmpty,
    required TResult Function() filesIsEmpty,
    required TResult Function() filesIsNotEmpty,
    required TResult Function(String pageId) relationContains,
    required TResult Function(String pageId) relationDoesNotContain,
    required TResult Function() relationIsEmpty,
    required TResult Function() relationIsNotEmpty,
  }) {
    return datePastWeek();
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function(String value)? textEquals,
    TResult? Function(String value)? textDoesNotEqual,
    TResult? Function(String value)? textContains,
    TResult? Function(String value)? textDoesNotContain,
    TResult? Function(String value)? textStartsWith,
    TResult? Function(String value)? textEndsWith,
    TResult? Function()? textIsEmpty,
    TResult? Function()? textIsNotEmpty,
    TResult? Function(double value)? numberEquals,
    TResult? Function(double value)? numberDoesNotEqual,
    TResult? Function(double value)? numberGreaterThan,
    TResult? Function(double value)? numberLessThan,
    TResult? Function(double value)? numberGreaterThanOrEqual,
    TResult? Function(double value)? numberLessThanOrEqual,
    TResult? Function()? numberIsEmpty,
    TResult? Function()? numberIsNotEmpty,
    TResult? Function(bool value)? checkboxEquals,
    TResult? Function(String value)? selectEquals,
    TResult? Function(String value)? selectDoesNotEqual,
    TResult? Function()? selectIsEmpty,
    TResult? Function()? selectIsNotEmpty,
    TResult? Function(String value)? multiSelectContains,
    TResult? Function(String value)? multiSelectDoesNotContain,
    TResult? Function()? multiSelectIsEmpty,
    TResult? Function()? multiSelectIsNotEmpty,
    TResult? Function(String date)? dateEquals,
    TResult? Function(String date)? dateBefore,
    TResult? Function(String date)? dateAfter,
    TResult? Function(String date)? dateOnOrBefore,
    TResult? Function(String date)? dateOnOrAfter,
    TResult? Function()? dateIsEmpty,
    TResult? Function()? dateIsNotEmpty,
    TResult? Function()? datePastWeek,
    TResult? Function()? datePastMonth,
    TResult? Function()? datePastYear,
    TResult? Function()? dateNextWeek,
    TResult? Function()? dateNextMonth,
    TResult? Function()? dateNextYear,
    TResult? Function(String userId)? peopleContains,
    TResult? Function(String userId)? peopleDoesNotContain,
    TResult? Function()? peopleIsEmpty,
    TResult? Function()? peopleIsNotEmpty,
    TResult? Function()? filesIsEmpty,
    TResult? Function()? filesIsNotEmpty,
    TResult? Function(String pageId)? relationContains,
    TResult? Function(String pageId)? relationDoesNotContain,
    TResult? Function()? relationIsEmpty,
    TResult? Function()? relationIsNotEmpty,
  }) {
    return datePastWeek?.call();
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function(String value)? textEquals,
    TResult Function(String value)? textDoesNotEqual,
    TResult Function(String value)? textContains,
    TResult Function(String value)? textDoesNotContain,
    TResult Function(String value)? textStartsWith,
    TResult Function(String value)? textEndsWith,
    TResult Function()? textIsEmpty,
    TResult Function()? textIsNotEmpty,
    TResult Function(double value)? numberEquals,
    TResult Function(double value)? numberDoesNotEqual,
    TResult Function(double value)? numberGreaterThan,
    TResult Function(double value)? numberLessThan,
    TResult Function(double value)? numberGreaterThanOrEqual,
    TResult Function(double value)? numberLessThanOrEqual,
    TResult Function()? numberIsEmpty,
    TResult Function()? numberIsNotEmpty,
    TResult Function(bool value)? checkboxEquals,
    TResult Function(String value)? selectEquals,
    TResult Function(String value)? selectDoesNotEqual,
    TResult Function()? selectIsEmpty,
    TResult Function()? selectIsNotEmpty,
    TResult Function(String value)? multiSelectContains,
    TResult Function(String value)? multiSelectDoesNotContain,
    TResult Function()? multiSelectIsEmpty,
    TResult Function()? multiSelectIsNotEmpty,
    TResult Function(String date)? dateEquals,
    TResult Function(String date)? dateBefore,
    TResult Function(String date)? dateAfter,
    TResult Function(String date)? dateOnOrBefore,
    TResult Function(String date)? dateOnOrAfter,
    TResult Function()? dateIsEmpty,
    TResult Function()? dateIsNotEmpty,
    TResult Function()? datePastWeek,
    TResult Function()? datePastMonth,
    TResult Function()? datePastYear,
    TResult Function()? dateNextWeek,
    TResult Function()? dateNextMonth,
    TResult Function()? dateNextYear,
    TResult Function(String userId)? peopleContains,
    TResult Function(String userId)? peopleDoesNotContain,
    TResult Function()? peopleIsEmpty,
    TResult Function()? peopleIsNotEmpty,
    TResult Function()? filesIsEmpty,
    TResult Function()? filesIsNotEmpty,
    TResult Function(String pageId)? relationContains,
    TResult Function(String pageId)? relationDoesNotContain,
    TResult Function()? relationIsEmpty,
    TResult Function()? relationIsNotEmpty,
    required TResult orElse(),
  }) {
    if (datePastWeek != null) {
      return datePastWeek();
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(TextEqualsFilter value) textEquals,
    required TResult Function(TextDoesNotEqualFilter value) textDoesNotEqual,
    required TResult Function(TextContainsFilter value) textContains,
    required TResult Function(TextDoesNotContainFilter value)
        textDoesNotContain,
    required TResult Function(TextStartsWithFilter value) textStartsWith,
    required TResult Function(TextEndsWithFilter value) textEndsWith,
    required TResult Function(TextIsEmptyFilter value) textIsEmpty,
    required TResult Function(TextIsNotEmptyFilter value) textIsNotEmpty,
    required TResult Function(NumberEqualsFilter value) numberEquals,
    required TResult Function(NumberDoesNotEqualFilter value)
        numberDoesNotEqual,
    required TResult Function(NumberGreaterThanFilter value) numberGreaterThan,
    required TResult Function(NumberLessThanFilter value) numberLessThan,
    required TResult Function(NumberGreaterThanOrEqualFilter value)
        numberGreaterThanOrEqual,
    required TResult Function(NumberLessThanOrEqualFilter value)
        numberLessThanOrEqual,
    required TResult Function(NumberIsEmptyFilter value) numberIsEmpty,
    required TResult Function(NumberIsNotEmptyFilter value) numberIsNotEmpty,
    required TResult Function(CheckboxEqualsFilter value) checkboxEquals,
    required TResult Function(SelectEqualsFilter value) selectEquals,
    required TResult Function(SelectDoesNotEqualFilter value)
        selectDoesNotEqual,
    required TResult Function(SelectIsEmptyFilter value) selectIsEmpty,
    required TResult Function(SelectIsNotEmptyFilter value) selectIsNotEmpty,
    required TResult Function(MultiSelectContainsFilter value)
        multiSelectContains,
    required TResult Function(MultiSelectDoesNotContainFilter value)
        multiSelectDoesNotContain,
    required TResult Function(MultiSelectIsEmptyFilter value)
        multiSelectIsEmpty,
    required TResult Function(MultiSelectIsNotEmptyFilter value)
        multiSelectIsNotEmpty,
    required TResult Function(DateEqualsFilter value) dateEquals,
    required TResult Function(DateBeforeFilter value) dateBefore,
    required TResult Function(DateAfterFilter value) dateAfter,
    required TResult Function(DateOnOrBeforeFilter value) dateOnOrBefore,
    required TResult Function(DateOnOrAfterFilter value) dateOnOrAfter,
    required TResult Function(DateIsEmptyFilter value) dateIsEmpty,
    required TResult Function(DateIsNotEmptyFilter value) dateIsNotEmpty,
    required TResult Function(DatePastWeekFilter value) datePastWeek,
    required TResult Function(DatePastMonthFilter value) datePastMonth,
    required TResult Function(DatePastYearFilter value) datePastYear,
    required TResult Function(DateNextWeekFilter value) dateNextWeek,
    required TResult Function(DateNextMonthFilter value) dateNextMonth,
    required TResult Function(DateNextYearFilter value) dateNextYear,
    required TResult Function(PeopleContainsFilter value) peopleContains,
    required TResult Function(PeopleDoesNotContainFilter value)
        peopleDoesNotContain,
    required TResult Function(PeopleIsEmptyFilter value) peopleIsEmpty,
    required TResult Function(PeopleIsNotEmptyFilter value) peopleIsNotEmpty,
    required TResult Function(FilesIsEmptyFilter value) filesIsEmpty,
    required TResult Function(FilesIsNotEmptyFilter value) filesIsNotEmpty,
    required TResult Function(RelationContainsFilter value) relationContains,
    required TResult Function(RelationDoesNotContainFilter value)
        relationDoesNotContain,
    required TResult Function(RelationIsEmptyFilter value) relationIsEmpty,
    required TResult Function(RelationIsNotEmptyFilter value)
        relationIsNotEmpty,
  }) {
    return datePastWeek(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(TextEqualsFilter value)? textEquals,
    TResult? Function(TextDoesNotEqualFilter value)? textDoesNotEqual,
    TResult? Function(TextContainsFilter value)? textContains,
    TResult? Function(TextDoesNotContainFilter value)? textDoesNotContain,
    TResult? Function(TextStartsWithFilter value)? textStartsWith,
    TResult? Function(TextEndsWithFilter value)? textEndsWith,
    TResult? Function(TextIsEmptyFilter value)? textIsEmpty,
    TResult? Function(TextIsNotEmptyFilter value)? textIsNotEmpty,
    TResult? Function(NumberEqualsFilter value)? numberEquals,
    TResult? Function(NumberDoesNotEqualFilter value)? numberDoesNotEqual,
    TResult? Function(NumberGreaterThanFilter value)? numberGreaterThan,
    TResult? Function(NumberLessThanFilter value)? numberLessThan,
    TResult? Function(NumberGreaterThanOrEqualFilter value)?
        numberGreaterThanOrEqual,
    TResult? Function(NumberLessThanOrEqualFilter value)? numberLessThanOrEqual,
    TResult? Function(NumberIsEmptyFilter value)? numberIsEmpty,
    TResult? Function(NumberIsNotEmptyFilter value)? numberIsNotEmpty,
    TResult? Function(CheckboxEqualsFilter value)? checkboxEquals,
    TResult? Function(SelectEqualsFilter value)? selectEquals,
    TResult? Function(SelectDoesNotEqualFilter value)? selectDoesNotEqual,
    TResult? Function(SelectIsEmptyFilter value)? selectIsEmpty,
    TResult? Function(SelectIsNotEmptyFilter value)? selectIsNotEmpty,
    TResult? Function(MultiSelectContainsFilter value)? multiSelectContains,
    TResult? Function(MultiSelectDoesNotContainFilter value)?
        multiSelectDoesNotContain,
    TResult? Function(MultiSelectIsEmptyFilter value)? multiSelectIsEmpty,
    TResult? Function(MultiSelectIsNotEmptyFilter value)? multiSelectIsNotEmpty,
    TResult? Function(DateEqualsFilter value)? dateEquals,
    TResult? Function(DateBeforeFilter value)? dateBefore,
    TResult? Function(DateAfterFilter value)? dateAfter,
    TResult? Function(DateOnOrBeforeFilter value)? dateOnOrBefore,
    TResult? Function(DateOnOrAfterFilter value)? dateOnOrAfter,
    TResult? Function(DateIsEmptyFilter value)? dateIsEmpty,
    TResult? Function(DateIsNotEmptyFilter value)? dateIsNotEmpty,
    TResult? Function(DatePastWeekFilter value)? datePastWeek,
    TResult? Function(DatePastMonthFilter value)? datePastMonth,
    TResult? Function(DatePastYearFilter value)? datePastYear,
    TResult? Function(DateNextWeekFilter value)? dateNextWeek,
    TResult? Function(DateNextMonthFilter value)? dateNextMonth,
    TResult? Function(DateNextYearFilter value)? dateNextYear,
    TResult? Function(PeopleContainsFilter value)? peopleContains,
    TResult? Function(PeopleDoesNotContainFilter value)? peopleDoesNotContain,
    TResult? Function(PeopleIsEmptyFilter value)? peopleIsEmpty,
    TResult? Function(PeopleIsNotEmptyFilter value)? peopleIsNotEmpty,
    TResult? Function(FilesIsEmptyFilter value)? filesIsEmpty,
    TResult? Function(FilesIsNotEmptyFilter value)? filesIsNotEmpty,
    TResult? Function(RelationContainsFilter value)? relationContains,
    TResult? Function(RelationDoesNotContainFilter value)?
        relationDoesNotContain,
    TResult? Function(RelationIsEmptyFilter value)? relationIsEmpty,
    TResult? Function(RelationIsNotEmptyFilter value)? relationIsNotEmpty,
  }) {
    return datePastWeek?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(TextEqualsFilter value)? textEquals,
    TResult Function(TextDoesNotEqualFilter value)? textDoesNotEqual,
    TResult Function(TextContainsFilter value)? textContains,
    TResult Function(TextDoesNotContainFilter value)? textDoesNotContain,
    TResult Function(TextStartsWithFilter value)? textStartsWith,
    TResult Function(TextEndsWithFilter value)? textEndsWith,
    TResult Function(TextIsEmptyFilter value)? textIsEmpty,
    TResult Function(TextIsNotEmptyFilter value)? textIsNotEmpty,
    TResult Function(NumberEqualsFilter value)? numberEquals,
    TResult Function(NumberDoesNotEqualFilter value)? numberDoesNotEqual,
    TResult Function(NumberGreaterThanFilter value)? numberGreaterThan,
    TResult Function(NumberLessThanFilter value)? numberLessThan,
    TResult Function(NumberGreaterThanOrEqualFilter value)?
        numberGreaterThanOrEqual,
    TResult Function(NumberLessThanOrEqualFilter value)? numberLessThanOrEqual,
    TResult Function(NumberIsEmptyFilter value)? numberIsEmpty,
    TResult Function(NumberIsNotEmptyFilter value)? numberIsNotEmpty,
    TResult Function(CheckboxEqualsFilter value)? checkboxEquals,
    TResult Function(SelectEqualsFilter value)? selectEquals,
    TResult Function(SelectDoesNotEqualFilter value)? selectDoesNotEqual,
    TResult Function(SelectIsEmptyFilter value)? selectIsEmpty,
    TResult Function(SelectIsNotEmptyFilter value)? selectIsNotEmpty,
    TResult Function(MultiSelectContainsFilter value)? multiSelectContains,
    TResult Function(MultiSelectDoesNotContainFilter value)?
        multiSelectDoesNotContain,
    TResult Function(MultiSelectIsEmptyFilter value)? multiSelectIsEmpty,
    TResult Function(MultiSelectIsNotEmptyFilter value)? multiSelectIsNotEmpty,
    TResult Function(DateEqualsFilter value)? dateEquals,
    TResult Function(DateBeforeFilter value)? dateBefore,
    TResult Function(DateAfterFilter value)? dateAfter,
    TResult Function(DateOnOrBeforeFilter value)? dateOnOrBefore,
    TResult Function(DateOnOrAfterFilter value)? dateOnOrAfter,
    TResult Function(DateIsEmptyFilter value)? dateIsEmpty,
    TResult Function(DateIsNotEmptyFilter value)? dateIsNotEmpty,
    TResult Function(DatePastWeekFilter value)? datePastWeek,
    TResult Function(DatePastMonthFilter value)? datePastMonth,
    TResult Function(DatePastYearFilter value)? datePastYear,
    TResult Function(DateNextWeekFilter value)? dateNextWeek,
    TResult Function(DateNextMonthFilter value)? dateNextMonth,
    TResult Function(DateNextYearFilter value)? dateNextYear,
    TResult Function(PeopleContainsFilter value)? peopleContains,
    TResult Function(PeopleDoesNotContainFilter value)? peopleDoesNotContain,
    TResult Function(PeopleIsEmptyFilter value)? peopleIsEmpty,
    TResult Function(PeopleIsNotEmptyFilter value)? peopleIsNotEmpty,
    TResult Function(FilesIsEmptyFilter value)? filesIsEmpty,
    TResult Function(FilesIsNotEmptyFilter value)? filesIsNotEmpty,
    TResult Function(RelationContainsFilter value)? relationContains,
    TResult Function(RelationDoesNotContainFilter value)?
        relationDoesNotContain,
    TResult Function(RelationIsEmptyFilter value)? relationIsEmpty,
    TResult Function(RelationIsNotEmptyFilter value)? relationIsNotEmpty,
    required TResult orElse(),
  }) {
    if (datePastWeek != null) {
      return datePastWeek(this);
    }
    return orElse();
  }
}

abstract class DatePastWeekFilter extends PropertyFilter {
  const factory DatePastWeekFilter() = _$DatePastWeekFilterImpl;
  const DatePastWeekFilter._() : super._();
}

/// @nodoc
abstract class _$$DatePastMonthFilterImplCopyWith<$Res> {
  factory _$$DatePastMonthFilterImplCopyWith(_$DatePastMonthFilterImpl value,
          $Res Function(_$DatePastMonthFilterImpl) then) =
      __$$DatePastMonthFilterImplCopyWithImpl<$Res>;
}

/// @nodoc
class __$$DatePastMonthFilterImplCopyWithImpl<$Res>
    extends _$PropertyFilterCopyWithImpl<$Res, _$DatePastMonthFilterImpl>
    implements _$$DatePastMonthFilterImplCopyWith<$Res> {
  __$$DatePastMonthFilterImplCopyWithImpl(_$DatePastMonthFilterImpl _value,
      $Res Function(_$DatePastMonthFilterImpl) _then)
      : super(_value, _then);

  /// Create a copy of PropertyFilter
  /// with the given fields replaced by the non-null parameter values.
}

/// @nodoc

class _$DatePastMonthFilterImpl extends DatePastMonthFilter {
  const _$DatePastMonthFilterImpl() : super._();

  @override
  String toString() {
    return 'PropertyFilter.datePastMonth()';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$DatePastMonthFilterImpl);
  }

  @override
  int get hashCode => runtimeType.hashCode;

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function(String value) textEquals,
    required TResult Function(String value) textDoesNotEqual,
    required TResult Function(String value) textContains,
    required TResult Function(String value) textDoesNotContain,
    required TResult Function(String value) textStartsWith,
    required TResult Function(String value) textEndsWith,
    required TResult Function() textIsEmpty,
    required TResult Function() textIsNotEmpty,
    required TResult Function(double value) numberEquals,
    required TResult Function(double value) numberDoesNotEqual,
    required TResult Function(double value) numberGreaterThan,
    required TResult Function(double value) numberLessThan,
    required TResult Function(double value) numberGreaterThanOrEqual,
    required TResult Function(double value) numberLessThanOrEqual,
    required TResult Function() numberIsEmpty,
    required TResult Function() numberIsNotEmpty,
    required TResult Function(bool value) checkboxEquals,
    required TResult Function(String value) selectEquals,
    required TResult Function(String value) selectDoesNotEqual,
    required TResult Function() selectIsEmpty,
    required TResult Function() selectIsNotEmpty,
    required TResult Function(String value) multiSelectContains,
    required TResult Function(String value) multiSelectDoesNotContain,
    required TResult Function() multiSelectIsEmpty,
    required TResult Function() multiSelectIsNotEmpty,
    required TResult Function(String date) dateEquals,
    required TResult Function(String date) dateBefore,
    required TResult Function(String date) dateAfter,
    required TResult Function(String date) dateOnOrBefore,
    required TResult Function(String date) dateOnOrAfter,
    required TResult Function() dateIsEmpty,
    required TResult Function() dateIsNotEmpty,
    required TResult Function() datePastWeek,
    required TResult Function() datePastMonth,
    required TResult Function() datePastYear,
    required TResult Function() dateNextWeek,
    required TResult Function() dateNextMonth,
    required TResult Function() dateNextYear,
    required TResult Function(String userId) peopleContains,
    required TResult Function(String userId) peopleDoesNotContain,
    required TResult Function() peopleIsEmpty,
    required TResult Function() peopleIsNotEmpty,
    required TResult Function() filesIsEmpty,
    required TResult Function() filesIsNotEmpty,
    required TResult Function(String pageId) relationContains,
    required TResult Function(String pageId) relationDoesNotContain,
    required TResult Function() relationIsEmpty,
    required TResult Function() relationIsNotEmpty,
  }) {
    return datePastMonth();
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function(String value)? textEquals,
    TResult? Function(String value)? textDoesNotEqual,
    TResult? Function(String value)? textContains,
    TResult? Function(String value)? textDoesNotContain,
    TResult? Function(String value)? textStartsWith,
    TResult? Function(String value)? textEndsWith,
    TResult? Function()? textIsEmpty,
    TResult? Function()? textIsNotEmpty,
    TResult? Function(double value)? numberEquals,
    TResult? Function(double value)? numberDoesNotEqual,
    TResult? Function(double value)? numberGreaterThan,
    TResult? Function(double value)? numberLessThan,
    TResult? Function(double value)? numberGreaterThanOrEqual,
    TResult? Function(double value)? numberLessThanOrEqual,
    TResult? Function()? numberIsEmpty,
    TResult? Function()? numberIsNotEmpty,
    TResult? Function(bool value)? checkboxEquals,
    TResult? Function(String value)? selectEquals,
    TResult? Function(String value)? selectDoesNotEqual,
    TResult? Function()? selectIsEmpty,
    TResult? Function()? selectIsNotEmpty,
    TResult? Function(String value)? multiSelectContains,
    TResult? Function(String value)? multiSelectDoesNotContain,
    TResult? Function()? multiSelectIsEmpty,
    TResult? Function()? multiSelectIsNotEmpty,
    TResult? Function(String date)? dateEquals,
    TResult? Function(String date)? dateBefore,
    TResult? Function(String date)? dateAfter,
    TResult? Function(String date)? dateOnOrBefore,
    TResult? Function(String date)? dateOnOrAfter,
    TResult? Function()? dateIsEmpty,
    TResult? Function()? dateIsNotEmpty,
    TResult? Function()? datePastWeek,
    TResult? Function()? datePastMonth,
    TResult? Function()? datePastYear,
    TResult? Function()? dateNextWeek,
    TResult? Function()? dateNextMonth,
    TResult? Function()? dateNextYear,
    TResult? Function(String userId)? peopleContains,
    TResult? Function(String userId)? peopleDoesNotContain,
    TResult? Function()? peopleIsEmpty,
    TResult? Function()? peopleIsNotEmpty,
    TResult? Function()? filesIsEmpty,
    TResult? Function()? filesIsNotEmpty,
    TResult? Function(String pageId)? relationContains,
    TResult? Function(String pageId)? relationDoesNotContain,
    TResult? Function()? relationIsEmpty,
    TResult? Function()? relationIsNotEmpty,
  }) {
    return datePastMonth?.call();
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function(String value)? textEquals,
    TResult Function(String value)? textDoesNotEqual,
    TResult Function(String value)? textContains,
    TResult Function(String value)? textDoesNotContain,
    TResult Function(String value)? textStartsWith,
    TResult Function(String value)? textEndsWith,
    TResult Function()? textIsEmpty,
    TResult Function()? textIsNotEmpty,
    TResult Function(double value)? numberEquals,
    TResult Function(double value)? numberDoesNotEqual,
    TResult Function(double value)? numberGreaterThan,
    TResult Function(double value)? numberLessThan,
    TResult Function(double value)? numberGreaterThanOrEqual,
    TResult Function(double value)? numberLessThanOrEqual,
    TResult Function()? numberIsEmpty,
    TResult Function()? numberIsNotEmpty,
    TResult Function(bool value)? checkboxEquals,
    TResult Function(String value)? selectEquals,
    TResult Function(String value)? selectDoesNotEqual,
    TResult Function()? selectIsEmpty,
    TResult Function()? selectIsNotEmpty,
    TResult Function(String value)? multiSelectContains,
    TResult Function(String value)? multiSelectDoesNotContain,
    TResult Function()? multiSelectIsEmpty,
    TResult Function()? multiSelectIsNotEmpty,
    TResult Function(String date)? dateEquals,
    TResult Function(String date)? dateBefore,
    TResult Function(String date)? dateAfter,
    TResult Function(String date)? dateOnOrBefore,
    TResult Function(String date)? dateOnOrAfter,
    TResult Function()? dateIsEmpty,
    TResult Function()? dateIsNotEmpty,
    TResult Function()? datePastWeek,
    TResult Function()? datePastMonth,
    TResult Function()? datePastYear,
    TResult Function()? dateNextWeek,
    TResult Function()? dateNextMonth,
    TResult Function()? dateNextYear,
    TResult Function(String userId)? peopleContains,
    TResult Function(String userId)? peopleDoesNotContain,
    TResult Function()? peopleIsEmpty,
    TResult Function()? peopleIsNotEmpty,
    TResult Function()? filesIsEmpty,
    TResult Function()? filesIsNotEmpty,
    TResult Function(String pageId)? relationContains,
    TResult Function(String pageId)? relationDoesNotContain,
    TResult Function()? relationIsEmpty,
    TResult Function()? relationIsNotEmpty,
    required TResult orElse(),
  }) {
    if (datePastMonth != null) {
      return datePastMonth();
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(TextEqualsFilter value) textEquals,
    required TResult Function(TextDoesNotEqualFilter value) textDoesNotEqual,
    required TResult Function(TextContainsFilter value) textContains,
    required TResult Function(TextDoesNotContainFilter value)
        textDoesNotContain,
    required TResult Function(TextStartsWithFilter value) textStartsWith,
    required TResult Function(TextEndsWithFilter value) textEndsWith,
    required TResult Function(TextIsEmptyFilter value) textIsEmpty,
    required TResult Function(TextIsNotEmptyFilter value) textIsNotEmpty,
    required TResult Function(NumberEqualsFilter value) numberEquals,
    required TResult Function(NumberDoesNotEqualFilter value)
        numberDoesNotEqual,
    required TResult Function(NumberGreaterThanFilter value) numberGreaterThan,
    required TResult Function(NumberLessThanFilter value) numberLessThan,
    required TResult Function(NumberGreaterThanOrEqualFilter value)
        numberGreaterThanOrEqual,
    required TResult Function(NumberLessThanOrEqualFilter value)
        numberLessThanOrEqual,
    required TResult Function(NumberIsEmptyFilter value) numberIsEmpty,
    required TResult Function(NumberIsNotEmptyFilter value) numberIsNotEmpty,
    required TResult Function(CheckboxEqualsFilter value) checkboxEquals,
    required TResult Function(SelectEqualsFilter value) selectEquals,
    required TResult Function(SelectDoesNotEqualFilter value)
        selectDoesNotEqual,
    required TResult Function(SelectIsEmptyFilter value) selectIsEmpty,
    required TResult Function(SelectIsNotEmptyFilter value) selectIsNotEmpty,
    required TResult Function(MultiSelectContainsFilter value)
        multiSelectContains,
    required TResult Function(MultiSelectDoesNotContainFilter value)
        multiSelectDoesNotContain,
    required TResult Function(MultiSelectIsEmptyFilter value)
        multiSelectIsEmpty,
    required TResult Function(MultiSelectIsNotEmptyFilter value)
        multiSelectIsNotEmpty,
    required TResult Function(DateEqualsFilter value) dateEquals,
    required TResult Function(DateBeforeFilter value) dateBefore,
    required TResult Function(DateAfterFilter value) dateAfter,
    required TResult Function(DateOnOrBeforeFilter value) dateOnOrBefore,
    required TResult Function(DateOnOrAfterFilter value) dateOnOrAfter,
    required TResult Function(DateIsEmptyFilter value) dateIsEmpty,
    required TResult Function(DateIsNotEmptyFilter value) dateIsNotEmpty,
    required TResult Function(DatePastWeekFilter value) datePastWeek,
    required TResult Function(DatePastMonthFilter value) datePastMonth,
    required TResult Function(DatePastYearFilter value) datePastYear,
    required TResult Function(DateNextWeekFilter value) dateNextWeek,
    required TResult Function(DateNextMonthFilter value) dateNextMonth,
    required TResult Function(DateNextYearFilter value) dateNextYear,
    required TResult Function(PeopleContainsFilter value) peopleContains,
    required TResult Function(PeopleDoesNotContainFilter value)
        peopleDoesNotContain,
    required TResult Function(PeopleIsEmptyFilter value) peopleIsEmpty,
    required TResult Function(PeopleIsNotEmptyFilter value) peopleIsNotEmpty,
    required TResult Function(FilesIsEmptyFilter value) filesIsEmpty,
    required TResult Function(FilesIsNotEmptyFilter value) filesIsNotEmpty,
    required TResult Function(RelationContainsFilter value) relationContains,
    required TResult Function(RelationDoesNotContainFilter value)
        relationDoesNotContain,
    required TResult Function(RelationIsEmptyFilter value) relationIsEmpty,
    required TResult Function(RelationIsNotEmptyFilter value)
        relationIsNotEmpty,
  }) {
    return datePastMonth(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(TextEqualsFilter value)? textEquals,
    TResult? Function(TextDoesNotEqualFilter value)? textDoesNotEqual,
    TResult? Function(TextContainsFilter value)? textContains,
    TResult? Function(TextDoesNotContainFilter value)? textDoesNotContain,
    TResult? Function(TextStartsWithFilter value)? textStartsWith,
    TResult? Function(TextEndsWithFilter value)? textEndsWith,
    TResult? Function(TextIsEmptyFilter value)? textIsEmpty,
    TResult? Function(TextIsNotEmptyFilter value)? textIsNotEmpty,
    TResult? Function(NumberEqualsFilter value)? numberEquals,
    TResult? Function(NumberDoesNotEqualFilter value)? numberDoesNotEqual,
    TResult? Function(NumberGreaterThanFilter value)? numberGreaterThan,
    TResult? Function(NumberLessThanFilter value)? numberLessThan,
    TResult? Function(NumberGreaterThanOrEqualFilter value)?
        numberGreaterThanOrEqual,
    TResult? Function(NumberLessThanOrEqualFilter value)? numberLessThanOrEqual,
    TResult? Function(NumberIsEmptyFilter value)? numberIsEmpty,
    TResult? Function(NumberIsNotEmptyFilter value)? numberIsNotEmpty,
    TResult? Function(CheckboxEqualsFilter value)? checkboxEquals,
    TResult? Function(SelectEqualsFilter value)? selectEquals,
    TResult? Function(SelectDoesNotEqualFilter value)? selectDoesNotEqual,
    TResult? Function(SelectIsEmptyFilter value)? selectIsEmpty,
    TResult? Function(SelectIsNotEmptyFilter value)? selectIsNotEmpty,
    TResult? Function(MultiSelectContainsFilter value)? multiSelectContains,
    TResult? Function(MultiSelectDoesNotContainFilter value)?
        multiSelectDoesNotContain,
    TResult? Function(MultiSelectIsEmptyFilter value)? multiSelectIsEmpty,
    TResult? Function(MultiSelectIsNotEmptyFilter value)? multiSelectIsNotEmpty,
    TResult? Function(DateEqualsFilter value)? dateEquals,
    TResult? Function(DateBeforeFilter value)? dateBefore,
    TResult? Function(DateAfterFilter value)? dateAfter,
    TResult? Function(DateOnOrBeforeFilter value)? dateOnOrBefore,
    TResult? Function(DateOnOrAfterFilter value)? dateOnOrAfter,
    TResult? Function(DateIsEmptyFilter value)? dateIsEmpty,
    TResult? Function(DateIsNotEmptyFilter value)? dateIsNotEmpty,
    TResult? Function(DatePastWeekFilter value)? datePastWeek,
    TResult? Function(DatePastMonthFilter value)? datePastMonth,
    TResult? Function(DatePastYearFilter value)? datePastYear,
    TResult? Function(DateNextWeekFilter value)? dateNextWeek,
    TResult? Function(DateNextMonthFilter value)? dateNextMonth,
    TResult? Function(DateNextYearFilter value)? dateNextYear,
    TResult? Function(PeopleContainsFilter value)? peopleContains,
    TResult? Function(PeopleDoesNotContainFilter value)? peopleDoesNotContain,
    TResult? Function(PeopleIsEmptyFilter value)? peopleIsEmpty,
    TResult? Function(PeopleIsNotEmptyFilter value)? peopleIsNotEmpty,
    TResult? Function(FilesIsEmptyFilter value)? filesIsEmpty,
    TResult? Function(FilesIsNotEmptyFilter value)? filesIsNotEmpty,
    TResult? Function(RelationContainsFilter value)? relationContains,
    TResult? Function(RelationDoesNotContainFilter value)?
        relationDoesNotContain,
    TResult? Function(RelationIsEmptyFilter value)? relationIsEmpty,
    TResult? Function(RelationIsNotEmptyFilter value)? relationIsNotEmpty,
  }) {
    return datePastMonth?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(TextEqualsFilter value)? textEquals,
    TResult Function(TextDoesNotEqualFilter value)? textDoesNotEqual,
    TResult Function(TextContainsFilter value)? textContains,
    TResult Function(TextDoesNotContainFilter value)? textDoesNotContain,
    TResult Function(TextStartsWithFilter value)? textStartsWith,
    TResult Function(TextEndsWithFilter value)? textEndsWith,
    TResult Function(TextIsEmptyFilter value)? textIsEmpty,
    TResult Function(TextIsNotEmptyFilter value)? textIsNotEmpty,
    TResult Function(NumberEqualsFilter value)? numberEquals,
    TResult Function(NumberDoesNotEqualFilter value)? numberDoesNotEqual,
    TResult Function(NumberGreaterThanFilter value)? numberGreaterThan,
    TResult Function(NumberLessThanFilter value)? numberLessThan,
    TResult Function(NumberGreaterThanOrEqualFilter value)?
        numberGreaterThanOrEqual,
    TResult Function(NumberLessThanOrEqualFilter value)? numberLessThanOrEqual,
    TResult Function(NumberIsEmptyFilter value)? numberIsEmpty,
    TResult Function(NumberIsNotEmptyFilter value)? numberIsNotEmpty,
    TResult Function(CheckboxEqualsFilter value)? checkboxEquals,
    TResult Function(SelectEqualsFilter value)? selectEquals,
    TResult Function(SelectDoesNotEqualFilter value)? selectDoesNotEqual,
    TResult Function(SelectIsEmptyFilter value)? selectIsEmpty,
    TResult Function(SelectIsNotEmptyFilter value)? selectIsNotEmpty,
    TResult Function(MultiSelectContainsFilter value)? multiSelectContains,
    TResult Function(MultiSelectDoesNotContainFilter value)?
        multiSelectDoesNotContain,
    TResult Function(MultiSelectIsEmptyFilter value)? multiSelectIsEmpty,
    TResult Function(MultiSelectIsNotEmptyFilter value)? multiSelectIsNotEmpty,
    TResult Function(DateEqualsFilter value)? dateEquals,
    TResult Function(DateBeforeFilter value)? dateBefore,
    TResult Function(DateAfterFilter value)? dateAfter,
    TResult Function(DateOnOrBeforeFilter value)? dateOnOrBefore,
    TResult Function(DateOnOrAfterFilter value)? dateOnOrAfter,
    TResult Function(DateIsEmptyFilter value)? dateIsEmpty,
    TResult Function(DateIsNotEmptyFilter value)? dateIsNotEmpty,
    TResult Function(DatePastWeekFilter value)? datePastWeek,
    TResult Function(DatePastMonthFilter value)? datePastMonth,
    TResult Function(DatePastYearFilter value)? datePastYear,
    TResult Function(DateNextWeekFilter value)? dateNextWeek,
    TResult Function(DateNextMonthFilter value)? dateNextMonth,
    TResult Function(DateNextYearFilter value)? dateNextYear,
    TResult Function(PeopleContainsFilter value)? peopleContains,
    TResult Function(PeopleDoesNotContainFilter value)? peopleDoesNotContain,
    TResult Function(PeopleIsEmptyFilter value)? peopleIsEmpty,
    TResult Function(PeopleIsNotEmptyFilter value)? peopleIsNotEmpty,
    TResult Function(FilesIsEmptyFilter value)? filesIsEmpty,
    TResult Function(FilesIsNotEmptyFilter value)? filesIsNotEmpty,
    TResult Function(RelationContainsFilter value)? relationContains,
    TResult Function(RelationDoesNotContainFilter value)?
        relationDoesNotContain,
    TResult Function(RelationIsEmptyFilter value)? relationIsEmpty,
    TResult Function(RelationIsNotEmptyFilter value)? relationIsNotEmpty,
    required TResult orElse(),
  }) {
    if (datePastMonth != null) {
      return datePastMonth(this);
    }
    return orElse();
  }
}

abstract class DatePastMonthFilter extends PropertyFilter {
  const factory DatePastMonthFilter() = _$DatePastMonthFilterImpl;
  const DatePastMonthFilter._() : super._();
}

/// @nodoc
abstract class _$$DatePastYearFilterImplCopyWith<$Res> {
  factory _$$DatePastYearFilterImplCopyWith(_$DatePastYearFilterImpl value,
          $Res Function(_$DatePastYearFilterImpl) then) =
      __$$DatePastYearFilterImplCopyWithImpl<$Res>;
}

/// @nodoc
class __$$DatePastYearFilterImplCopyWithImpl<$Res>
    extends _$PropertyFilterCopyWithImpl<$Res, _$DatePastYearFilterImpl>
    implements _$$DatePastYearFilterImplCopyWith<$Res> {
  __$$DatePastYearFilterImplCopyWithImpl(_$DatePastYearFilterImpl _value,
      $Res Function(_$DatePastYearFilterImpl) _then)
      : super(_value, _then);

  /// Create a copy of PropertyFilter
  /// with the given fields replaced by the non-null parameter values.
}

/// @nodoc

class _$DatePastYearFilterImpl extends DatePastYearFilter {
  const _$DatePastYearFilterImpl() : super._();

  @override
  String toString() {
    return 'PropertyFilter.datePastYear()';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType && other is _$DatePastYearFilterImpl);
  }

  @override
  int get hashCode => runtimeType.hashCode;

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function(String value) textEquals,
    required TResult Function(String value) textDoesNotEqual,
    required TResult Function(String value) textContains,
    required TResult Function(String value) textDoesNotContain,
    required TResult Function(String value) textStartsWith,
    required TResult Function(String value) textEndsWith,
    required TResult Function() textIsEmpty,
    required TResult Function() textIsNotEmpty,
    required TResult Function(double value) numberEquals,
    required TResult Function(double value) numberDoesNotEqual,
    required TResult Function(double value) numberGreaterThan,
    required TResult Function(double value) numberLessThan,
    required TResult Function(double value) numberGreaterThanOrEqual,
    required TResult Function(double value) numberLessThanOrEqual,
    required TResult Function() numberIsEmpty,
    required TResult Function() numberIsNotEmpty,
    required TResult Function(bool value) checkboxEquals,
    required TResult Function(String value) selectEquals,
    required TResult Function(String value) selectDoesNotEqual,
    required TResult Function() selectIsEmpty,
    required TResult Function() selectIsNotEmpty,
    required TResult Function(String value) multiSelectContains,
    required TResult Function(String value) multiSelectDoesNotContain,
    required TResult Function() multiSelectIsEmpty,
    required TResult Function() multiSelectIsNotEmpty,
    required TResult Function(String date) dateEquals,
    required TResult Function(String date) dateBefore,
    required TResult Function(String date) dateAfter,
    required TResult Function(String date) dateOnOrBefore,
    required TResult Function(String date) dateOnOrAfter,
    required TResult Function() dateIsEmpty,
    required TResult Function() dateIsNotEmpty,
    required TResult Function() datePastWeek,
    required TResult Function() datePastMonth,
    required TResult Function() datePastYear,
    required TResult Function() dateNextWeek,
    required TResult Function() dateNextMonth,
    required TResult Function() dateNextYear,
    required TResult Function(String userId) peopleContains,
    required TResult Function(String userId) peopleDoesNotContain,
    required TResult Function() peopleIsEmpty,
    required TResult Function() peopleIsNotEmpty,
    required TResult Function() filesIsEmpty,
    required TResult Function() filesIsNotEmpty,
    required TResult Function(String pageId) relationContains,
    required TResult Function(String pageId) relationDoesNotContain,
    required TResult Function() relationIsEmpty,
    required TResult Function() relationIsNotEmpty,
  }) {
    return datePastYear();
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function(String value)? textEquals,
    TResult? Function(String value)? textDoesNotEqual,
    TResult? Function(String value)? textContains,
    TResult? Function(String value)? textDoesNotContain,
    TResult? Function(String value)? textStartsWith,
    TResult? Function(String value)? textEndsWith,
    TResult? Function()? textIsEmpty,
    TResult? Function()? textIsNotEmpty,
    TResult? Function(double value)? numberEquals,
    TResult? Function(double value)? numberDoesNotEqual,
    TResult? Function(double value)? numberGreaterThan,
    TResult? Function(double value)? numberLessThan,
    TResult? Function(double value)? numberGreaterThanOrEqual,
    TResult? Function(double value)? numberLessThanOrEqual,
    TResult? Function()? numberIsEmpty,
    TResult? Function()? numberIsNotEmpty,
    TResult? Function(bool value)? checkboxEquals,
    TResult? Function(String value)? selectEquals,
    TResult? Function(String value)? selectDoesNotEqual,
    TResult? Function()? selectIsEmpty,
    TResult? Function()? selectIsNotEmpty,
    TResult? Function(String value)? multiSelectContains,
    TResult? Function(String value)? multiSelectDoesNotContain,
    TResult? Function()? multiSelectIsEmpty,
    TResult? Function()? multiSelectIsNotEmpty,
    TResult? Function(String date)? dateEquals,
    TResult? Function(String date)? dateBefore,
    TResult? Function(String date)? dateAfter,
    TResult? Function(String date)? dateOnOrBefore,
    TResult? Function(String date)? dateOnOrAfter,
    TResult? Function()? dateIsEmpty,
    TResult? Function()? dateIsNotEmpty,
    TResult? Function()? datePastWeek,
    TResult? Function()? datePastMonth,
    TResult? Function()? datePastYear,
    TResult? Function()? dateNextWeek,
    TResult? Function()? dateNextMonth,
    TResult? Function()? dateNextYear,
    TResult? Function(String userId)? peopleContains,
    TResult? Function(String userId)? peopleDoesNotContain,
    TResult? Function()? peopleIsEmpty,
    TResult? Function()? peopleIsNotEmpty,
    TResult? Function()? filesIsEmpty,
    TResult? Function()? filesIsNotEmpty,
    TResult? Function(String pageId)? relationContains,
    TResult? Function(String pageId)? relationDoesNotContain,
    TResult? Function()? relationIsEmpty,
    TResult? Function()? relationIsNotEmpty,
  }) {
    return datePastYear?.call();
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function(String value)? textEquals,
    TResult Function(String value)? textDoesNotEqual,
    TResult Function(String value)? textContains,
    TResult Function(String value)? textDoesNotContain,
    TResult Function(String value)? textStartsWith,
    TResult Function(String value)? textEndsWith,
    TResult Function()? textIsEmpty,
    TResult Function()? textIsNotEmpty,
    TResult Function(double value)? numberEquals,
    TResult Function(double value)? numberDoesNotEqual,
    TResult Function(double value)? numberGreaterThan,
    TResult Function(double value)? numberLessThan,
    TResult Function(double value)? numberGreaterThanOrEqual,
    TResult Function(double value)? numberLessThanOrEqual,
    TResult Function()? numberIsEmpty,
    TResult Function()? numberIsNotEmpty,
    TResult Function(bool value)? checkboxEquals,
    TResult Function(String value)? selectEquals,
    TResult Function(String value)? selectDoesNotEqual,
    TResult Function()? selectIsEmpty,
    TResult Function()? selectIsNotEmpty,
    TResult Function(String value)? multiSelectContains,
    TResult Function(String value)? multiSelectDoesNotContain,
    TResult Function()? multiSelectIsEmpty,
    TResult Function()? multiSelectIsNotEmpty,
    TResult Function(String date)? dateEquals,
    TResult Function(String date)? dateBefore,
    TResult Function(String date)? dateAfter,
    TResult Function(String date)? dateOnOrBefore,
    TResult Function(String date)? dateOnOrAfter,
    TResult Function()? dateIsEmpty,
    TResult Function()? dateIsNotEmpty,
    TResult Function()? datePastWeek,
    TResult Function()? datePastMonth,
    TResult Function()? datePastYear,
    TResult Function()? dateNextWeek,
    TResult Function()? dateNextMonth,
    TResult Function()? dateNextYear,
    TResult Function(String userId)? peopleContains,
    TResult Function(String userId)? peopleDoesNotContain,
    TResult Function()? peopleIsEmpty,
    TResult Function()? peopleIsNotEmpty,
    TResult Function()? filesIsEmpty,
    TResult Function()? filesIsNotEmpty,
    TResult Function(String pageId)? relationContains,
    TResult Function(String pageId)? relationDoesNotContain,
    TResult Function()? relationIsEmpty,
    TResult Function()? relationIsNotEmpty,
    required TResult orElse(),
  }) {
    if (datePastYear != null) {
      return datePastYear();
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(TextEqualsFilter value) textEquals,
    required TResult Function(TextDoesNotEqualFilter value) textDoesNotEqual,
    required TResult Function(TextContainsFilter value) textContains,
    required TResult Function(TextDoesNotContainFilter value)
        textDoesNotContain,
    required TResult Function(TextStartsWithFilter value) textStartsWith,
    required TResult Function(TextEndsWithFilter value) textEndsWith,
    required TResult Function(TextIsEmptyFilter value) textIsEmpty,
    required TResult Function(TextIsNotEmptyFilter value) textIsNotEmpty,
    required TResult Function(NumberEqualsFilter value) numberEquals,
    required TResult Function(NumberDoesNotEqualFilter value)
        numberDoesNotEqual,
    required TResult Function(NumberGreaterThanFilter value) numberGreaterThan,
    required TResult Function(NumberLessThanFilter value) numberLessThan,
    required TResult Function(NumberGreaterThanOrEqualFilter value)
        numberGreaterThanOrEqual,
    required TResult Function(NumberLessThanOrEqualFilter value)
        numberLessThanOrEqual,
    required TResult Function(NumberIsEmptyFilter value) numberIsEmpty,
    required TResult Function(NumberIsNotEmptyFilter value) numberIsNotEmpty,
    required TResult Function(CheckboxEqualsFilter value) checkboxEquals,
    required TResult Function(SelectEqualsFilter value) selectEquals,
    required TResult Function(SelectDoesNotEqualFilter value)
        selectDoesNotEqual,
    required TResult Function(SelectIsEmptyFilter value) selectIsEmpty,
    required TResult Function(SelectIsNotEmptyFilter value) selectIsNotEmpty,
    required TResult Function(MultiSelectContainsFilter value)
        multiSelectContains,
    required TResult Function(MultiSelectDoesNotContainFilter value)
        multiSelectDoesNotContain,
    required TResult Function(MultiSelectIsEmptyFilter value)
        multiSelectIsEmpty,
    required TResult Function(MultiSelectIsNotEmptyFilter value)
        multiSelectIsNotEmpty,
    required TResult Function(DateEqualsFilter value) dateEquals,
    required TResult Function(DateBeforeFilter value) dateBefore,
    required TResult Function(DateAfterFilter value) dateAfter,
    required TResult Function(DateOnOrBeforeFilter value) dateOnOrBefore,
    required TResult Function(DateOnOrAfterFilter value) dateOnOrAfter,
    required TResult Function(DateIsEmptyFilter value) dateIsEmpty,
    required TResult Function(DateIsNotEmptyFilter value) dateIsNotEmpty,
    required TResult Function(DatePastWeekFilter value) datePastWeek,
    required TResult Function(DatePastMonthFilter value) datePastMonth,
    required TResult Function(DatePastYearFilter value) datePastYear,
    required TResult Function(DateNextWeekFilter value) dateNextWeek,
    required TResult Function(DateNextMonthFilter value) dateNextMonth,
    required TResult Function(DateNextYearFilter value) dateNextYear,
    required TResult Function(PeopleContainsFilter value) peopleContains,
    required TResult Function(PeopleDoesNotContainFilter value)
        peopleDoesNotContain,
    required TResult Function(PeopleIsEmptyFilter value) peopleIsEmpty,
    required TResult Function(PeopleIsNotEmptyFilter value) peopleIsNotEmpty,
    required TResult Function(FilesIsEmptyFilter value) filesIsEmpty,
    required TResult Function(FilesIsNotEmptyFilter value) filesIsNotEmpty,
    required TResult Function(RelationContainsFilter value) relationContains,
    required TResult Function(RelationDoesNotContainFilter value)
        relationDoesNotContain,
    required TResult Function(RelationIsEmptyFilter value) relationIsEmpty,
    required TResult Function(RelationIsNotEmptyFilter value)
        relationIsNotEmpty,
  }) {
    return datePastYear(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(TextEqualsFilter value)? textEquals,
    TResult? Function(TextDoesNotEqualFilter value)? textDoesNotEqual,
    TResult? Function(TextContainsFilter value)? textContains,
    TResult? Function(TextDoesNotContainFilter value)? textDoesNotContain,
    TResult? Function(TextStartsWithFilter value)? textStartsWith,
    TResult? Function(TextEndsWithFilter value)? textEndsWith,
    TResult? Function(TextIsEmptyFilter value)? textIsEmpty,
    TResult? Function(TextIsNotEmptyFilter value)? textIsNotEmpty,
    TResult? Function(NumberEqualsFilter value)? numberEquals,
    TResult? Function(NumberDoesNotEqualFilter value)? numberDoesNotEqual,
    TResult? Function(NumberGreaterThanFilter value)? numberGreaterThan,
    TResult? Function(NumberLessThanFilter value)? numberLessThan,
    TResult? Function(NumberGreaterThanOrEqualFilter value)?
        numberGreaterThanOrEqual,
    TResult? Function(NumberLessThanOrEqualFilter value)? numberLessThanOrEqual,
    TResult? Function(NumberIsEmptyFilter value)? numberIsEmpty,
    TResult? Function(NumberIsNotEmptyFilter value)? numberIsNotEmpty,
    TResult? Function(CheckboxEqualsFilter value)? checkboxEquals,
    TResult? Function(SelectEqualsFilter value)? selectEquals,
    TResult? Function(SelectDoesNotEqualFilter value)? selectDoesNotEqual,
    TResult? Function(SelectIsEmptyFilter value)? selectIsEmpty,
    TResult? Function(SelectIsNotEmptyFilter value)? selectIsNotEmpty,
    TResult? Function(MultiSelectContainsFilter value)? multiSelectContains,
    TResult? Function(MultiSelectDoesNotContainFilter value)?
        multiSelectDoesNotContain,
    TResult? Function(MultiSelectIsEmptyFilter value)? multiSelectIsEmpty,
    TResult? Function(MultiSelectIsNotEmptyFilter value)? multiSelectIsNotEmpty,
    TResult? Function(DateEqualsFilter value)? dateEquals,
    TResult? Function(DateBeforeFilter value)? dateBefore,
    TResult? Function(DateAfterFilter value)? dateAfter,
    TResult? Function(DateOnOrBeforeFilter value)? dateOnOrBefore,
    TResult? Function(DateOnOrAfterFilter value)? dateOnOrAfter,
    TResult? Function(DateIsEmptyFilter value)? dateIsEmpty,
    TResult? Function(DateIsNotEmptyFilter value)? dateIsNotEmpty,
    TResult? Function(DatePastWeekFilter value)? datePastWeek,
    TResult? Function(DatePastMonthFilter value)? datePastMonth,
    TResult? Function(DatePastYearFilter value)? datePastYear,
    TResult? Function(DateNextWeekFilter value)? dateNextWeek,
    TResult? Function(DateNextMonthFilter value)? dateNextMonth,
    TResult? Function(DateNextYearFilter value)? dateNextYear,
    TResult? Function(PeopleContainsFilter value)? peopleContains,
    TResult? Function(PeopleDoesNotContainFilter value)? peopleDoesNotContain,
    TResult? Function(PeopleIsEmptyFilter value)? peopleIsEmpty,
    TResult? Function(PeopleIsNotEmptyFilter value)? peopleIsNotEmpty,
    TResult? Function(FilesIsEmptyFilter value)? filesIsEmpty,
    TResult? Function(FilesIsNotEmptyFilter value)? filesIsNotEmpty,
    TResult? Function(RelationContainsFilter value)? relationContains,
    TResult? Function(RelationDoesNotContainFilter value)?
        relationDoesNotContain,
    TResult? Function(RelationIsEmptyFilter value)? relationIsEmpty,
    TResult? Function(RelationIsNotEmptyFilter value)? relationIsNotEmpty,
  }) {
    return datePastYear?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(TextEqualsFilter value)? textEquals,
    TResult Function(TextDoesNotEqualFilter value)? textDoesNotEqual,
    TResult Function(TextContainsFilter value)? textContains,
    TResult Function(TextDoesNotContainFilter value)? textDoesNotContain,
    TResult Function(TextStartsWithFilter value)? textStartsWith,
    TResult Function(TextEndsWithFilter value)? textEndsWith,
    TResult Function(TextIsEmptyFilter value)? textIsEmpty,
    TResult Function(TextIsNotEmptyFilter value)? textIsNotEmpty,
    TResult Function(NumberEqualsFilter value)? numberEquals,
    TResult Function(NumberDoesNotEqualFilter value)? numberDoesNotEqual,
    TResult Function(NumberGreaterThanFilter value)? numberGreaterThan,
    TResult Function(NumberLessThanFilter value)? numberLessThan,
    TResult Function(NumberGreaterThanOrEqualFilter value)?
        numberGreaterThanOrEqual,
    TResult Function(NumberLessThanOrEqualFilter value)? numberLessThanOrEqual,
    TResult Function(NumberIsEmptyFilter value)? numberIsEmpty,
    TResult Function(NumberIsNotEmptyFilter value)? numberIsNotEmpty,
    TResult Function(CheckboxEqualsFilter value)? checkboxEquals,
    TResult Function(SelectEqualsFilter value)? selectEquals,
    TResult Function(SelectDoesNotEqualFilter value)? selectDoesNotEqual,
    TResult Function(SelectIsEmptyFilter value)? selectIsEmpty,
    TResult Function(SelectIsNotEmptyFilter value)? selectIsNotEmpty,
    TResult Function(MultiSelectContainsFilter value)? multiSelectContains,
    TResult Function(MultiSelectDoesNotContainFilter value)?
        multiSelectDoesNotContain,
    TResult Function(MultiSelectIsEmptyFilter value)? multiSelectIsEmpty,
    TResult Function(MultiSelectIsNotEmptyFilter value)? multiSelectIsNotEmpty,
    TResult Function(DateEqualsFilter value)? dateEquals,
    TResult Function(DateBeforeFilter value)? dateBefore,
    TResult Function(DateAfterFilter value)? dateAfter,
    TResult Function(DateOnOrBeforeFilter value)? dateOnOrBefore,
    TResult Function(DateOnOrAfterFilter value)? dateOnOrAfter,
    TResult Function(DateIsEmptyFilter value)? dateIsEmpty,
    TResult Function(DateIsNotEmptyFilter value)? dateIsNotEmpty,
    TResult Function(DatePastWeekFilter value)? datePastWeek,
    TResult Function(DatePastMonthFilter value)? datePastMonth,
    TResult Function(DatePastYearFilter value)? datePastYear,
    TResult Function(DateNextWeekFilter value)? dateNextWeek,
    TResult Function(DateNextMonthFilter value)? dateNextMonth,
    TResult Function(DateNextYearFilter value)? dateNextYear,
    TResult Function(PeopleContainsFilter value)? peopleContains,
    TResult Function(PeopleDoesNotContainFilter value)? peopleDoesNotContain,
    TResult Function(PeopleIsEmptyFilter value)? peopleIsEmpty,
    TResult Function(PeopleIsNotEmptyFilter value)? peopleIsNotEmpty,
    TResult Function(FilesIsEmptyFilter value)? filesIsEmpty,
    TResult Function(FilesIsNotEmptyFilter value)? filesIsNotEmpty,
    TResult Function(RelationContainsFilter value)? relationContains,
    TResult Function(RelationDoesNotContainFilter value)?
        relationDoesNotContain,
    TResult Function(RelationIsEmptyFilter value)? relationIsEmpty,
    TResult Function(RelationIsNotEmptyFilter value)? relationIsNotEmpty,
    required TResult orElse(),
  }) {
    if (datePastYear != null) {
      return datePastYear(this);
    }
    return orElse();
  }
}

abstract class DatePastYearFilter extends PropertyFilter {
  const factory DatePastYearFilter() = _$DatePastYearFilterImpl;
  const DatePastYearFilter._() : super._();
}

/// @nodoc
abstract class _$$DateNextWeekFilterImplCopyWith<$Res> {
  factory _$$DateNextWeekFilterImplCopyWith(_$DateNextWeekFilterImpl value,
          $Res Function(_$DateNextWeekFilterImpl) then) =
      __$$DateNextWeekFilterImplCopyWithImpl<$Res>;
}

/// @nodoc
class __$$DateNextWeekFilterImplCopyWithImpl<$Res>
    extends _$PropertyFilterCopyWithImpl<$Res, _$DateNextWeekFilterImpl>
    implements _$$DateNextWeekFilterImplCopyWith<$Res> {
  __$$DateNextWeekFilterImplCopyWithImpl(_$DateNextWeekFilterImpl _value,
      $Res Function(_$DateNextWeekFilterImpl) _then)
      : super(_value, _then);

  /// Create a copy of PropertyFilter
  /// with the given fields replaced by the non-null parameter values.
}

/// @nodoc

class _$DateNextWeekFilterImpl extends DateNextWeekFilter {
  const _$DateNextWeekFilterImpl() : super._();

  @override
  String toString() {
    return 'PropertyFilter.dateNextWeek()';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType && other is _$DateNextWeekFilterImpl);
  }

  @override
  int get hashCode => runtimeType.hashCode;

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function(String value) textEquals,
    required TResult Function(String value) textDoesNotEqual,
    required TResult Function(String value) textContains,
    required TResult Function(String value) textDoesNotContain,
    required TResult Function(String value) textStartsWith,
    required TResult Function(String value) textEndsWith,
    required TResult Function() textIsEmpty,
    required TResult Function() textIsNotEmpty,
    required TResult Function(double value) numberEquals,
    required TResult Function(double value) numberDoesNotEqual,
    required TResult Function(double value) numberGreaterThan,
    required TResult Function(double value) numberLessThan,
    required TResult Function(double value) numberGreaterThanOrEqual,
    required TResult Function(double value) numberLessThanOrEqual,
    required TResult Function() numberIsEmpty,
    required TResult Function() numberIsNotEmpty,
    required TResult Function(bool value) checkboxEquals,
    required TResult Function(String value) selectEquals,
    required TResult Function(String value) selectDoesNotEqual,
    required TResult Function() selectIsEmpty,
    required TResult Function() selectIsNotEmpty,
    required TResult Function(String value) multiSelectContains,
    required TResult Function(String value) multiSelectDoesNotContain,
    required TResult Function() multiSelectIsEmpty,
    required TResult Function() multiSelectIsNotEmpty,
    required TResult Function(String date) dateEquals,
    required TResult Function(String date) dateBefore,
    required TResult Function(String date) dateAfter,
    required TResult Function(String date) dateOnOrBefore,
    required TResult Function(String date) dateOnOrAfter,
    required TResult Function() dateIsEmpty,
    required TResult Function() dateIsNotEmpty,
    required TResult Function() datePastWeek,
    required TResult Function() datePastMonth,
    required TResult Function() datePastYear,
    required TResult Function() dateNextWeek,
    required TResult Function() dateNextMonth,
    required TResult Function() dateNextYear,
    required TResult Function(String userId) peopleContains,
    required TResult Function(String userId) peopleDoesNotContain,
    required TResult Function() peopleIsEmpty,
    required TResult Function() peopleIsNotEmpty,
    required TResult Function() filesIsEmpty,
    required TResult Function() filesIsNotEmpty,
    required TResult Function(String pageId) relationContains,
    required TResult Function(String pageId) relationDoesNotContain,
    required TResult Function() relationIsEmpty,
    required TResult Function() relationIsNotEmpty,
  }) {
    return dateNextWeek();
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function(String value)? textEquals,
    TResult? Function(String value)? textDoesNotEqual,
    TResult? Function(String value)? textContains,
    TResult? Function(String value)? textDoesNotContain,
    TResult? Function(String value)? textStartsWith,
    TResult? Function(String value)? textEndsWith,
    TResult? Function()? textIsEmpty,
    TResult? Function()? textIsNotEmpty,
    TResult? Function(double value)? numberEquals,
    TResult? Function(double value)? numberDoesNotEqual,
    TResult? Function(double value)? numberGreaterThan,
    TResult? Function(double value)? numberLessThan,
    TResult? Function(double value)? numberGreaterThanOrEqual,
    TResult? Function(double value)? numberLessThanOrEqual,
    TResult? Function()? numberIsEmpty,
    TResult? Function()? numberIsNotEmpty,
    TResult? Function(bool value)? checkboxEquals,
    TResult? Function(String value)? selectEquals,
    TResult? Function(String value)? selectDoesNotEqual,
    TResult? Function()? selectIsEmpty,
    TResult? Function()? selectIsNotEmpty,
    TResult? Function(String value)? multiSelectContains,
    TResult? Function(String value)? multiSelectDoesNotContain,
    TResult? Function()? multiSelectIsEmpty,
    TResult? Function()? multiSelectIsNotEmpty,
    TResult? Function(String date)? dateEquals,
    TResult? Function(String date)? dateBefore,
    TResult? Function(String date)? dateAfter,
    TResult? Function(String date)? dateOnOrBefore,
    TResult? Function(String date)? dateOnOrAfter,
    TResult? Function()? dateIsEmpty,
    TResult? Function()? dateIsNotEmpty,
    TResult? Function()? datePastWeek,
    TResult? Function()? datePastMonth,
    TResult? Function()? datePastYear,
    TResult? Function()? dateNextWeek,
    TResult? Function()? dateNextMonth,
    TResult? Function()? dateNextYear,
    TResult? Function(String userId)? peopleContains,
    TResult? Function(String userId)? peopleDoesNotContain,
    TResult? Function()? peopleIsEmpty,
    TResult? Function()? peopleIsNotEmpty,
    TResult? Function()? filesIsEmpty,
    TResult? Function()? filesIsNotEmpty,
    TResult? Function(String pageId)? relationContains,
    TResult? Function(String pageId)? relationDoesNotContain,
    TResult? Function()? relationIsEmpty,
    TResult? Function()? relationIsNotEmpty,
  }) {
    return dateNextWeek?.call();
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function(String value)? textEquals,
    TResult Function(String value)? textDoesNotEqual,
    TResult Function(String value)? textContains,
    TResult Function(String value)? textDoesNotContain,
    TResult Function(String value)? textStartsWith,
    TResult Function(String value)? textEndsWith,
    TResult Function()? textIsEmpty,
    TResult Function()? textIsNotEmpty,
    TResult Function(double value)? numberEquals,
    TResult Function(double value)? numberDoesNotEqual,
    TResult Function(double value)? numberGreaterThan,
    TResult Function(double value)? numberLessThan,
    TResult Function(double value)? numberGreaterThanOrEqual,
    TResult Function(double value)? numberLessThanOrEqual,
    TResult Function()? numberIsEmpty,
    TResult Function()? numberIsNotEmpty,
    TResult Function(bool value)? checkboxEquals,
    TResult Function(String value)? selectEquals,
    TResult Function(String value)? selectDoesNotEqual,
    TResult Function()? selectIsEmpty,
    TResult Function()? selectIsNotEmpty,
    TResult Function(String value)? multiSelectContains,
    TResult Function(String value)? multiSelectDoesNotContain,
    TResult Function()? multiSelectIsEmpty,
    TResult Function()? multiSelectIsNotEmpty,
    TResult Function(String date)? dateEquals,
    TResult Function(String date)? dateBefore,
    TResult Function(String date)? dateAfter,
    TResult Function(String date)? dateOnOrBefore,
    TResult Function(String date)? dateOnOrAfter,
    TResult Function()? dateIsEmpty,
    TResult Function()? dateIsNotEmpty,
    TResult Function()? datePastWeek,
    TResult Function()? datePastMonth,
    TResult Function()? datePastYear,
    TResult Function()? dateNextWeek,
    TResult Function()? dateNextMonth,
    TResult Function()? dateNextYear,
    TResult Function(String userId)? peopleContains,
    TResult Function(String userId)? peopleDoesNotContain,
    TResult Function()? peopleIsEmpty,
    TResult Function()? peopleIsNotEmpty,
    TResult Function()? filesIsEmpty,
    TResult Function()? filesIsNotEmpty,
    TResult Function(String pageId)? relationContains,
    TResult Function(String pageId)? relationDoesNotContain,
    TResult Function()? relationIsEmpty,
    TResult Function()? relationIsNotEmpty,
    required TResult orElse(),
  }) {
    if (dateNextWeek != null) {
      return dateNextWeek();
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(TextEqualsFilter value) textEquals,
    required TResult Function(TextDoesNotEqualFilter value) textDoesNotEqual,
    required TResult Function(TextContainsFilter value) textContains,
    required TResult Function(TextDoesNotContainFilter value)
        textDoesNotContain,
    required TResult Function(TextStartsWithFilter value) textStartsWith,
    required TResult Function(TextEndsWithFilter value) textEndsWith,
    required TResult Function(TextIsEmptyFilter value) textIsEmpty,
    required TResult Function(TextIsNotEmptyFilter value) textIsNotEmpty,
    required TResult Function(NumberEqualsFilter value) numberEquals,
    required TResult Function(NumberDoesNotEqualFilter value)
        numberDoesNotEqual,
    required TResult Function(NumberGreaterThanFilter value) numberGreaterThan,
    required TResult Function(NumberLessThanFilter value) numberLessThan,
    required TResult Function(NumberGreaterThanOrEqualFilter value)
        numberGreaterThanOrEqual,
    required TResult Function(NumberLessThanOrEqualFilter value)
        numberLessThanOrEqual,
    required TResult Function(NumberIsEmptyFilter value) numberIsEmpty,
    required TResult Function(NumberIsNotEmptyFilter value) numberIsNotEmpty,
    required TResult Function(CheckboxEqualsFilter value) checkboxEquals,
    required TResult Function(SelectEqualsFilter value) selectEquals,
    required TResult Function(SelectDoesNotEqualFilter value)
        selectDoesNotEqual,
    required TResult Function(SelectIsEmptyFilter value) selectIsEmpty,
    required TResult Function(SelectIsNotEmptyFilter value) selectIsNotEmpty,
    required TResult Function(MultiSelectContainsFilter value)
        multiSelectContains,
    required TResult Function(MultiSelectDoesNotContainFilter value)
        multiSelectDoesNotContain,
    required TResult Function(MultiSelectIsEmptyFilter value)
        multiSelectIsEmpty,
    required TResult Function(MultiSelectIsNotEmptyFilter value)
        multiSelectIsNotEmpty,
    required TResult Function(DateEqualsFilter value) dateEquals,
    required TResult Function(DateBeforeFilter value) dateBefore,
    required TResult Function(DateAfterFilter value) dateAfter,
    required TResult Function(DateOnOrBeforeFilter value) dateOnOrBefore,
    required TResult Function(DateOnOrAfterFilter value) dateOnOrAfter,
    required TResult Function(DateIsEmptyFilter value) dateIsEmpty,
    required TResult Function(DateIsNotEmptyFilter value) dateIsNotEmpty,
    required TResult Function(DatePastWeekFilter value) datePastWeek,
    required TResult Function(DatePastMonthFilter value) datePastMonth,
    required TResult Function(DatePastYearFilter value) datePastYear,
    required TResult Function(DateNextWeekFilter value) dateNextWeek,
    required TResult Function(DateNextMonthFilter value) dateNextMonth,
    required TResult Function(DateNextYearFilter value) dateNextYear,
    required TResult Function(PeopleContainsFilter value) peopleContains,
    required TResult Function(PeopleDoesNotContainFilter value)
        peopleDoesNotContain,
    required TResult Function(PeopleIsEmptyFilter value) peopleIsEmpty,
    required TResult Function(PeopleIsNotEmptyFilter value) peopleIsNotEmpty,
    required TResult Function(FilesIsEmptyFilter value) filesIsEmpty,
    required TResult Function(FilesIsNotEmptyFilter value) filesIsNotEmpty,
    required TResult Function(RelationContainsFilter value) relationContains,
    required TResult Function(RelationDoesNotContainFilter value)
        relationDoesNotContain,
    required TResult Function(RelationIsEmptyFilter value) relationIsEmpty,
    required TResult Function(RelationIsNotEmptyFilter value)
        relationIsNotEmpty,
  }) {
    return dateNextWeek(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(TextEqualsFilter value)? textEquals,
    TResult? Function(TextDoesNotEqualFilter value)? textDoesNotEqual,
    TResult? Function(TextContainsFilter value)? textContains,
    TResult? Function(TextDoesNotContainFilter value)? textDoesNotContain,
    TResult? Function(TextStartsWithFilter value)? textStartsWith,
    TResult? Function(TextEndsWithFilter value)? textEndsWith,
    TResult? Function(TextIsEmptyFilter value)? textIsEmpty,
    TResult? Function(TextIsNotEmptyFilter value)? textIsNotEmpty,
    TResult? Function(NumberEqualsFilter value)? numberEquals,
    TResult? Function(NumberDoesNotEqualFilter value)? numberDoesNotEqual,
    TResult? Function(NumberGreaterThanFilter value)? numberGreaterThan,
    TResult? Function(NumberLessThanFilter value)? numberLessThan,
    TResult? Function(NumberGreaterThanOrEqualFilter value)?
        numberGreaterThanOrEqual,
    TResult? Function(NumberLessThanOrEqualFilter value)? numberLessThanOrEqual,
    TResult? Function(NumberIsEmptyFilter value)? numberIsEmpty,
    TResult? Function(NumberIsNotEmptyFilter value)? numberIsNotEmpty,
    TResult? Function(CheckboxEqualsFilter value)? checkboxEquals,
    TResult? Function(SelectEqualsFilter value)? selectEquals,
    TResult? Function(SelectDoesNotEqualFilter value)? selectDoesNotEqual,
    TResult? Function(SelectIsEmptyFilter value)? selectIsEmpty,
    TResult? Function(SelectIsNotEmptyFilter value)? selectIsNotEmpty,
    TResult? Function(MultiSelectContainsFilter value)? multiSelectContains,
    TResult? Function(MultiSelectDoesNotContainFilter value)?
        multiSelectDoesNotContain,
    TResult? Function(MultiSelectIsEmptyFilter value)? multiSelectIsEmpty,
    TResult? Function(MultiSelectIsNotEmptyFilter value)? multiSelectIsNotEmpty,
    TResult? Function(DateEqualsFilter value)? dateEquals,
    TResult? Function(DateBeforeFilter value)? dateBefore,
    TResult? Function(DateAfterFilter value)? dateAfter,
    TResult? Function(DateOnOrBeforeFilter value)? dateOnOrBefore,
    TResult? Function(DateOnOrAfterFilter value)? dateOnOrAfter,
    TResult? Function(DateIsEmptyFilter value)? dateIsEmpty,
    TResult? Function(DateIsNotEmptyFilter value)? dateIsNotEmpty,
    TResult? Function(DatePastWeekFilter value)? datePastWeek,
    TResult? Function(DatePastMonthFilter value)? datePastMonth,
    TResult? Function(DatePastYearFilter value)? datePastYear,
    TResult? Function(DateNextWeekFilter value)? dateNextWeek,
    TResult? Function(DateNextMonthFilter value)? dateNextMonth,
    TResult? Function(DateNextYearFilter value)? dateNextYear,
    TResult? Function(PeopleContainsFilter value)? peopleContains,
    TResult? Function(PeopleDoesNotContainFilter value)? peopleDoesNotContain,
    TResult? Function(PeopleIsEmptyFilter value)? peopleIsEmpty,
    TResult? Function(PeopleIsNotEmptyFilter value)? peopleIsNotEmpty,
    TResult? Function(FilesIsEmptyFilter value)? filesIsEmpty,
    TResult? Function(FilesIsNotEmptyFilter value)? filesIsNotEmpty,
    TResult? Function(RelationContainsFilter value)? relationContains,
    TResult? Function(RelationDoesNotContainFilter value)?
        relationDoesNotContain,
    TResult? Function(RelationIsEmptyFilter value)? relationIsEmpty,
    TResult? Function(RelationIsNotEmptyFilter value)? relationIsNotEmpty,
  }) {
    return dateNextWeek?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(TextEqualsFilter value)? textEquals,
    TResult Function(TextDoesNotEqualFilter value)? textDoesNotEqual,
    TResult Function(TextContainsFilter value)? textContains,
    TResult Function(TextDoesNotContainFilter value)? textDoesNotContain,
    TResult Function(TextStartsWithFilter value)? textStartsWith,
    TResult Function(TextEndsWithFilter value)? textEndsWith,
    TResult Function(TextIsEmptyFilter value)? textIsEmpty,
    TResult Function(TextIsNotEmptyFilter value)? textIsNotEmpty,
    TResult Function(NumberEqualsFilter value)? numberEquals,
    TResult Function(NumberDoesNotEqualFilter value)? numberDoesNotEqual,
    TResult Function(NumberGreaterThanFilter value)? numberGreaterThan,
    TResult Function(NumberLessThanFilter value)? numberLessThan,
    TResult Function(NumberGreaterThanOrEqualFilter value)?
        numberGreaterThanOrEqual,
    TResult Function(NumberLessThanOrEqualFilter value)? numberLessThanOrEqual,
    TResult Function(NumberIsEmptyFilter value)? numberIsEmpty,
    TResult Function(NumberIsNotEmptyFilter value)? numberIsNotEmpty,
    TResult Function(CheckboxEqualsFilter value)? checkboxEquals,
    TResult Function(SelectEqualsFilter value)? selectEquals,
    TResult Function(SelectDoesNotEqualFilter value)? selectDoesNotEqual,
    TResult Function(SelectIsEmptyFilter value)? selectIsEmpty,
    TResult Function(SelectIsNotEmptyFilter value)? selectIsNotEmpty,
    TResult Function(MultiSelectContainsFilter value)? multiSelectContains,
    TResult Function(MultiSelectDoesNotContainFilter value)?
        multiSelectDoesNotContain,
    TResult Function(MultiSelectIsEmptyFilter value)? multiSelectIsEmpty,
    TResult Function(MultiSelectIsNotEmptyFilter value)? multiSelectIsNotEmpty,
    TResult Function(DateEqualsFilter value)? dateEquals,
    TResult Function(DateBeforeFilter value)? dateBefore,
    TResult Function(DateAfterFilter value)? dateAfter,
    TResult Function(DateOnOrBeforeFilter value)? dateOnOrBefore,
    TResult Function(DateOnOrAfterFilter value)? dateOnOrAfter,
    TResult Function(DateIsEmptyFilter value)? dateIsEmpty,
    TResult Function(DateIsNotEmptyFilter value)? dateIsNotEmpty,
    TResult Function(DatePastWeekFilter value)? datePastWeek,
    TResult Function(DatePastMonthFilter value)? datePastMonth,
    TResult Function(DatePastYearFilter value)? datePastYear,
    TResult Function(DateNextWeekFilter value)? dateNextWeek,
    TResult Function(DateNextMonthFilter value)? dateNextMonth,
    TResult Function(DateNextYearFilter value)? dateNextYear,
    TResult Function(PeopleContainsFilter value)? peopleContains,
    TResult Function(PeopleDoesNotContainFilter value)? peopleDoesNotContain,
    TResult Function(PeopleIsEmptyFilter value)? peopleIsEmpty,
    TResult Function(PeopleIsNotEmptyFilter value)? peopleIsNotEmpty,
    TResult Function(FilesIsEmptyFilter value)? filesIsEmpty,
    TResult Function(FilesIsNotEmptyFilter value)? filesIsNotEmpty,
    TResult Function(RelationContainsFilter value)? relationContains,
    TResult Function(RelationDoesNotContainFilter value)?
        relationDoesNotContain,
    TResult Function(RelationIsEmptyFilter value)? relationIsEmpty,
    TResult Function(RelationIsNotEmptyFilter value)? relationIsNotEmpty,
    required TResult orElse(),
  }) {
    if (dateNextWeek != null) {
      return dateNextWeek(this);
    }
    return orElse();
  }
}

abstract class DateNextWeekFilter extends PropertyFilter {
  const factory DateNextWeekFilter() = _$DateNextWeekFilterImpl;
  const DateNextWeekFilter._() : super._();
}

/// @nodoc
abstract class _$$DateNextMonthFilterImplCopyWith<$Res> {
  factory _$$DateNextMonthFilterImplCopyWith(_$DateNextMonthFilterImpl value,
          $Res Function(_$DateNextMonthFilterImpl) then) =
      __$$DateNextMonthFilterImplCopyWithImpl<$Res>;
}

/// @nodoc
class __$$DateNextMonthFilterImplCopyWithImpl<$Res>
    extends _$PropertyFilterCopyWithImpl<$Res, _$DateNextMonthFilterImpl>
    implements _$$DateNextMonthFilterImplCopyWith<$Res> {
  __$$DateNextMonthFilterImplCopyWithImpl(_$DateNextMonthFilterImpl _value,
      $Res Function(_$DateNextMonthFilterImpl) _then)
      : super(_value, _then);

  /// Create a copy of PropertyFilter
  /// with the given fields replaced by the non-null parameter values.
}

/// @nodoc

class _$DateNextMonthFilterImpl extends DateNextMonthFilter {
  const _$DateNextMonthFilterImpl() : super._();

  @override
  String toString() {
    return 'PropertyFilter.dateNextMonth()';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$DateNextMonthFilterImpl);
  }

  @override
  int get hashCode => runtimeType.hashCode;

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function(String value) textEquals,
    required TResult Function(String value) textDoesNotEqual,
    required TResult Function(String value) textContains,
    required TResult Function(String value) textDoesNotContain,
    required TResult Function(String value) textStartsWith,
    required TResult Function(String value) textEndsWith,
    required TResult Function() textIsEmpty,
    required TResult Function() textIsNotEmpty,
    required TResult Function(double value) numberEquals,
    required TResult Function(double value) numberDoesNotEqual,
    required TResult Function(double value) numberGreaterThan,
    required TResult Function(double value) numberLessThan,
    required TResult Function(double value) numberGreaterThanOrEqual,
    required TResult Function(double value) numberLessThanOrEqual,
    required TResult Function() numberIsEmpty,
    required TResult Function() numberIsNotEmpty,
    required TResult Function(bool value) checkboxEquals,
    required TResult Function(String value) selectEquals,
    required TResult Function(String value) selectDoesNotEqual,
    required TResult Function() selectIsEmpty,
    required TResult Function() selectIsNotEmpty,
    required TResult Function(String value) multiSelectContains,
    required TResult Function(String value) multiSelectDoesNotContain,
    required TResult Function() multiSelectIsEmpty,
    required TResult Function() multiSelectIsNotEmpty,
    required TResult Function(String date) dateEquals,
    required TResult Function(String date) dateBefore,
    required TResult Function(String date) dateAfter,
    required TResult Function(String date) dateOnOrBefore,
    required TResult Function(String date) dateOnOrAfter,
    required TResult Function() dateIsEmpty,
    required TResult Function() dateIsNotEmpty,
    required TResult Function() datePastWeek,
    required TResult Function() datePastMonth,
    required TResult Function() datePastYear,
    required TResult Function() dateNextWeek,
    required TResult Function() dateNextMonth,
    required TResult Function() dateNextYear,
    required TResult Function(String userId) peopleContains,
    required TResult Function(String userId) peopleDoesNotContain,
    required TResult Function() peopleIsEmpty,
    required TResult Function() peopleIsNotEmpty,
    required TResult Function() filesIsEmpty,
    required TResult Function() filesIsNotEmpty,
    required TResult Function(String pageId) relationContains,
    required TResult Function(String pageId) relationDoesNotContain,
    required TResult Function() relationIsEmpty,
    required TResult Function() relationIsNotEmpty,
  }) {
    return dateNextMonth();
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function(String value)? textEquals,
    TResult? Function(String value)? textDoesNotEqual,
    TResult? Function(String value)? textContains,
    TResult? Function(String value)? textDoesNotContain,
    TResult? Function(String value)? textStartsWith,
    TResult? Function(String value)? textEndsWith,
    TResult? Function()? textIsEmpty,
    TResult? Function()? textIsNotEmpty,
    TResult? Function(double value)? numberEquals,
    TResult? Function(double value)? numberDoesNotEqual,
    TResult? Function(double value)? numberGreaterThan,
    TResult? Function(double value)? numberLessThan,
    TResult? Function(double value)? numberGreaterThanOrEqual,
    TResult? Function(double value)? numberLessThanOrEqual,
    TResult? Function()? numberIsEmpty,
    TResult? Function()? numberIsNotEmpty,
    TResult? Function(bool value)? checkboxEquals,
    TResult? Function(String value)? selectEquals,
    TResult? Function(String value)? selectDoesNotEqual,
    TResult? Function()? selectIsEmpty,
    TResult? Function()? selectIsNotEmpty,
    TResult? Function(String value)? multiSelectContains,
    TResult? Function(String value)? multiSelectDoesNotContain,
    TResult? Function()? multiSelectIsEmpty,
    TResult? Function()? multiSelectIsNotEmpty,
    TResult? Function(String date)? dateEquals,
    TResult? Function(String date)? dateBefore,
    TResult? Function(String date)? dateAfter,
    TResult? Function(String date)? dateOnOrBefore,
    TResult? Function(String date)? dateOnOrAfter,
    TResult? Function()? dateIsEmpty,
    TResult? Function()? dateIsNotEmpty,
    TResult? Function()? datePastWeek,
    TResult? Function()? datePastMonth,
    TResult? Function()? datePastYear,
    TResult? Function()? dateNextWeek,
    TResult? Function()? dateNextMonth,
    TResult? Function()? dateNextYear,
    TResult? Function(String userId)? peopleContains,
    TResult? Function(String userId)? peopleDoesNotContain,
    TResult? Function()? peopleIsEmpty,
    TResult? Function()? peopleIsNotEmpty,
    TResult? Function()? filesIsEmpty,
    TResult? Function()? filesIsNotEmpty,
    TResult? Function(String pageId)? relationContains,
    TResult? Function(String pageId)? relationDoesNotContain,
    TResult? Function()? relationIsEmpty,
    TResult? Function()? relationIsNotEmpty,
  }) {
    return dateNextMonth?.call();
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function(String value)? textEquals,
    TResult Function(String value)? textDoesNotEqual,
    TResult Function(String value)? textContains,
    TResult Function(String value)? textDoesNotContain,
    TResult Function(String value)? textStartsWith,
    TResult Function(String value)? textEndsWith,
    TResult Function()? textIsEmpty,
    TResult Function()? textIsNotEmpty,
    TResult Function(double value)? numberEquals,
    TResult Function(double value)? numberDoesNotEqual,
    TResult Function(double value)? numberGreaterThan,
    TResult Function(double value)? numberLessThan,
    TResult Function(double value)? numberGreaterThanOrEqual,
    TResult Function(double value)? numberLessThanOrEqual,
    TResult Function()? numberIsEmpty,
    TResult Function()? numberIsNotEmpty,
    TResult Function(bool value)? checkboxEquals,
    TResult Function(String value)? selectEquals,
    TResult Function(String value)? selectDoesNotEqual,
    TResult Function()? selectIsEmpty,
    TResult Function()? selectIsNotEmpty,
    TResult Function(String value)? multiSelectContains,
    TResult Function(String value)? multiSelectDoesNotContain,
    TResult Function()? multiSelectIsEmpty,
    TResult Function()? multiSelectIsNotEmpty,
    TResult Function(String date)? dateEquals,
    TResult Function(String date)? dateBefore,
    TResult Function(String date)? dateAfter,
    TResult Function(String date)? dateOnOrBefore,
    TResult Function(String date)? dateOnOrAfter,
    TResult Function()? dateIsEmpty,
    TResult Function()? dateIsNotEmpty,
    TResult Function()? datePastWeek,
    TResult Function()? datePastMonth,
    TResult Function()? datePastYear,
    TResult Function()? dateNextWeek,
    TResult Function()? dateNextMonth,
    TResult Function()? dateNextYear,
    TResult Function(String userId)? peopleContains,
    TResult Function(String userId)? peopleDoesNotContain,
    TResult Function()? peopleIsEmpty,
    TResult Function()? peopleIsNotEmpty,
    TResult Function()? filesIsEmpty,
    TResult Function()? filesIsNotEmpty,
    TResult Function(String pageId)? relationContains,
    TResult Function(String pageId)? relationDoesNotContain,
    TResult Function()? relationIsEmpty,
    TResult Function()? relationIsNotEmpty,
    required TResult orElse(),
  }) {
    if (dateNextMonth != null) {
      return dateNextMonth();
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(TextEqualsFilter value) textEquals,
    required TResult Function(TextDoesNotEqualFilter value) textDoesNotEqual,
    required TResult Function(TextContainsFilter value) textContains,
    required TResult Function(TextDoesNotContainFilter value)
        textDoesNotContain,
    required TResult Function(TextStartsWithFilter value) textStartsWith,
    required TResult Function(TextEndsWithFilter value) textEndsWith,
    required TResult Function(TextIsEmptyFilter value) textIsEmpty,
    required TResult Function(TextIsNotEmptyFilter value) textIsNotEmpty,
    required TResult Function(NumberEqualsFilter value) numberEquals,
    required TResult Function(NumberDoesNotEqualFilter value)
        numberDoesNotEqual,
    required TResult Function(NumberGreaterThanFilter value) numberGreaterThan,
    required TResult Function(NumberLessThanFilter value) numberLessThan,
    required TResult Function(NumberGreaterThanOrEqualFilter value)
        numberGreaterThanOrEqual,
    required TResult Function(NumberLessThanOrEqualFilter value)
        numberLessThanOrEqual,
    required TResult Function(NumberIsEmptyFilter value) numberIsEmpty,
    required TResult Function(NumberIsNotEmptyFilter value) numberIsNotEmpty,
    required TResult Function(CheckboxEqualsFilter value) checkboxEquals,
    required TResult Function(SelectEqualsFilter value) selectEquals,
    required TResult Function(SelectDoesNotEqualFilter value)
        selectDoesNotEqual,
    required TResult Function(SelectIsEmptyFilter value) selectIsEmpty,
    required TResult Function(SelectIsNotEmptyFilter value) selectIsNotEmpty,
    required TResult Function(MultiSelectContainsFilter value)
        multiSelectContains,
    required TResult Function(MultiSelectDoesNotContainFilter value)
        multiSelectDoesNotContain,
    required TResult Function(MultiSelectIsEmptyFilter value)
        multiSelectIsEmpty,
    required TResult Function(MultiSelectIsNotEmptyFilter value)
        multiSelectIsNotEmpty,
    required TResult Function(DateEqualsFilter value) dateEquals,
    required TResult Function(DateBeforeFilter value) dateBefore,
    required TResult Function(DateAfterFilter value) dateAfter,
    required TResult Function(DateOnOrBeforeFilter value) dateOnOrBefore,
    required TResult Function(DateOnOrAfterFilter value) dateOnOrAfter,
    required TResult Function(DateIsEmptyFilter value) dateIsEmpty,
    required TResult Function(DateIsNotEmptyFilter value) dateIsNotEmpty,
    required TResult Function(DatePastWeekFilter value) datePastWeek,
    required TResult Function(DatePastMonthFilter value) datePastMonth,
    required TResult Function(DatePastYearFilter value) datePastYear,
    required TResult Function(DateNextWeekFilter value) dateNextWeek,
    required TResult Function(DateNextMonthFilter value) dateNextMonth,
    required TResult Function(DateNextYearFilter value) dateNextYear,
    required TResult Function(PeopleContainsFilter value) peopleContains,
    required TResult Function(PeopleDoesNotContainFilter value)
        peopleDoesNotContain,
    required TResult Function(PeopleIsEmptyFilter value) peopleIsEmpty,
    required TResult Function(PeopleIsNotEmptyFilter value) peopleIsNotEmpty,
    required TResult Function(FilesIsEmptyFilter value) filesIsEmpty,
    required TResult Function(FilesIsNotEmptyFilter value) filesIsNotEmpty,
    required TResult Function(RelationContainsFilter value) relationContains,
    required TResult Function(RelationDoesNotContainFilter value)
        relationDoesNotContain,
    required TResult Function(RelationIsEmptyFilter value) relationIsEmpty,
    required TResult Function(RelationIsNotEmptyFilter value)
        relationIsNotEmpty,
  }) {
    return dateNextMonth(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(TextEqualsFilter value)? textEquals,
    TResult? Function(TextDoesNotEqualFilter value)? textDoesNotEqual,
    TResult? Function(TextContainsFilter value)? textContains,
    TResult? Function(TextDoesNotContainFilter value)? textDoesNotContain,
    TResult? Function(TextStartsWithFilter value)? textStartsWith,
    TResult? Function(TextEndsWithFilter value)? textEndsWith,
    TResult? Function(TextIsEmptyFilter value)? textIsEmpty,
    TResult? Function(TextIsNotEmptyFilter value)? textIsNotEmpty,
    TResult? Function(NumberEqualsFilter value)? numberEquals,
    TResult? Function(NumberDoesNotEqualFilter value)? numberDoesNotEqual,
    TResult? Function(NumberGreaterThanFilter value)? numberGreaterThan,
    TResult? Function(NumberLessThanFilter value)? numberLessThan,
    TResult? Function(NumberGreaterThanOrEqualFilter value)?
        numberGreaterThanOrEqual,
    TResult? Function(NumberLessThanOrEqualFilter value)? numberLessThanOrEqual,
    TResult? Function(NumberIsEmptyFilter value)? numberIsEmpty,
    TResult? Function(NumberIsNotEmptyFilter value)? numberIsNotEmpty,
    TResult? Function(CheckboxEqualsFilter value)? checkboxEquals,
    TResult? Function(SelectEqualsFilter value)? selectEquals,
    TResult? Function(SelectDoesNotEqualFilter value)? selectDoesNotEqual,
    TResult? Function(SelectIsEmptyFilter value)? selectIsEmpty,
    TResult? Function(SelectIsNotEmptyFilter value)? selectIsNotEmpty,
    TResult? Function(MultiSelectContainsFilter value)? multiSelectContains,
    TResult? Function(MultiSelectDoesNotContainFilter value)?
        multiSelectDoesNotContain,
    TResult? Function(MultiSelectIsEmptyFilter value)? multiSelectIsEmpty,
    TResult? Function(MultiSelectIsNotEmptyFilter value)? multiSelectIsNotEmpty,
    TResult? Function(DateEqualsFilter value)? dateEquals,
    TResult? Function(DateBeforeFilter value)? dateBefore,
    TResult? Function(DateAfterFilter value)? dateAfter,
    TResult? Function(DateOnOrBeforeFilter value)? dateOnOrBefore,
    TResult? Function(DateOnOrAfterFilter value)? dateOnOrAfter,
    TResult? Function(DateIsEmptyFilter value)? dateIsEmpty,
    TResult? Function(DateIsNotEmptyFilter value)? dateIsNotEmpty,
    TResult? Function(DatePastWeekFilter value)? datePastWeek,
    TResult? Function(DatePastMonthFilter value)? datePastMonth,
    TResult? Function(DatePastYearFilter value)? datePastYear,
    TResult? Function(DateNextWeekFilter value)? dateNextWeek,
    TResult? Function(DateNextMonthFilter value)? dateNextMonth,
    TResult? Function(DateNextYearFilter value)? dateNextYear,
    TResult? Function(PeopleContainsFilter value)? peopleContains,
    TResult? Function(PeopleDoesNotContainFilter value)? peopleDoesNotContain,
    TResult? Function(PeopleIsEmptyFilter value)? peopleIsEmpty,
    TResult? Function(PeopleIsNotEmptyFilter value)? peopleIsNotEmpty,
    TResult? Function(FilesIsEmptyFilter value)? filesIsEmpty,
    TResult? Function(FilesIsNotEmptyFilter value)? filesIsNotEmpty,
    TResult? Function(RelationContainsFilter value)? relationContains,
    TResult? Function(RelationDoesNotContainFilter value)?
        relationDoesNotContain,
    TResult? Function(RelationIsEmptyFilter value)? relationIsEmpty,
    TResult? Function(RelationIsNotEmptyFilter value)? relationIsNotEmpty,
  }) {
    return dateNextMonth?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(TextEqualsFilter value)? textEquals,
    TResult Function(TextDoesNotEqualFilter value)? textDoesNotEqual,
    TResult Function(TextContainsFilter value)? textContains,
    TResult Function(TextDoesNotContainFilter value)? textDoesNotContain,
    TResult Function(TextStartsWithFilter value)? textStartsWith,
    TResult Function(TextEndsWithFilter value)? textEndsWith,
    TResult Function(TextIsEmptyFilter value)? textIsEmpty,
    TResult Function(TextIsNotEmptyFilter value)? textIsNotEmpty,
    TResult Function(NumberEqualsFilter value)? numberEquals,
    TResult Function(NumberDoesNotEqualFilter value)? numberDoesNotEqual,
    TResult Function(NumberGreaterThanFilter value)? numberGreaterThan,
    TResult Function(NumberLessThanFilter value)? numberLessThan,
    TResult Function(NumberGreaterThanOrEqualFilter value)?
        numberGreaterThanOrEqual,
    TResult Function(NumberLessThanOrEqualFilter value)? numberLessThanOrEqual,
    TResult Function(NumberIsEmptyFilter value)? numberIsEmpty,
    TResult Function(NumberIsNotEmptyFilter value)? numberIsNotEmpty,
    TResult Function(CheckboxEqualsFilter value)? checkboxEquals,
    TResult Function(SelectEqualsFilter value)? selectEquals,
    TResult Function(SelectDoesNotEqualFilter value)? selectDoesNotEqual,
    TResult Function(SelectIsEmptyFilter value)? selectIsEmpty,
    TResult Function(SelectIsNotEmptyFilter value)? selectIsNotEmpty,
    TResult Function(MultiSelectContainsFilter value)? multiSelectContains,
    TResult Function(MultiSelectDoesNotContainFilter value)?
        multiSelectDoesNotContain,
    TResult Function(MultiSelectIsEmptyFilter value)? multiSelectIsEmpty,
    TResult Function(MultiSelectIsNotEmptyFilter value)? multiSelectIsNotEmpty,
    TResult Function(DateEqualsFilter value)? dateEquals,
    TResult Function(DateBeforeFilter value)? dateBefore,
    TResult Function(DateAfterFilter value)? dateAfter,
    TResult Function(DateOnOrBeforeFilter value)? dateOnOrBefore,
    TResult Function(DateOnOrAfterFilter value)? dateOnOrAfter,
    TResult Function(DateIsEmptyFilter value)? dateIsEmpty,
    TResult Function(DateIsNotEmptyFilter value)? dateIsNotEmpty,
    TResult Function(DatePastWeekFilter value)? datePastWeek,
    TResult Function(DatePastMonthFilter value)? datePastMonth,
    TResult Function(DatePastYearFilter value)? datePastYear,
    TResult Function(DateNextWeekFilter value)? dateNextWeek,
    TResult Function(DateNextMonthFilter value)? dateNextMonth,
    TResult Function(DateNextYearFilter value)? dateNextYear,
    TResult Function(PeopleContainsFilter value)? peopleContains,
    TResult Function(PeopleDoesNotContainFilter value)? peopleDoesNotContain,
    TResult Function(PeopleIsEmptyFilter value)? peopleIsEmpty,
    TResult Function(PeopleIsNotEmptyFilter value)? peopleIsNotEmpty,
    TResult Function(FilesIsEmptyFilter value)? filesIsEmpty,
    TResult Function(FilesIsNotEmptyFilter value)? filesIsNotEmpty,
    TResult Function(RelationContainsFilter value)? relationContains,
    TResult Function(RelationDoesNotContainFilter value)?
        relationDoesNotContain,
    TResult Function(RelationIsEmptyFilter value)? relationIsEmpty,
    TResult Function(RelationIsNotEmptyFilter value)? relationIsNotEmpty,
    required TResult orElse(),
  }) {
    if (dateNextMonth != null) {
      return dateNextMonth(this);
    }
    return orElse();
  }
}

abstract class DateNextMonthFilter extends PropertyFilter {
  const factory DateNextMonthFilter() = _$DateNextMonthFilterImpl;
  const DateNextMonthFilter._() : super._();
}

/// @nodoc
abstract class _$$DateNextYearFilterImplCopyWith<$Res> {
  factory _$$DateNextYearFilterImplCopyWith(_$DateNextYearFilterImpl value,
          $Res Function(_$DateNextYearFilterImpl) then) =
      __$$DateNextYearFilterImplCopyWithImpl<$Res>;
}

/// @nodoc
class __$$DateNextYearFilterImplCopyWithImpl<$Res>
    extends _$PropertyFilterCopyWithImpl<$Res, _$DateNextYearFilterImpl>
    implements _$$DateNextYearFilterImplCopyWith<$Res> {
  __$$DateNextYearFilterImplCopyWithImpl(_$DateNextYearFilterImpl _value,
      $Res Function(_$DateNextYearFilterImpl) _then)
      : super(_value, _then);

  /// Create a copy of PropertyFilter
  /// with the given fields replaced by the non-null parameter values.
}

/// @nodoc

class _$DateNextYearFilterImpl extends DateNextYearFilter {
  const _$DateNextYearFilterImpl() : super._();

  @override
  String toString() {
    return 'PropertyFilter.dateNextYear()';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType && other is _$DateNextYearFilterImpl);
  }

  @override
  int get hashCode => runtimeType.hashCode;

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function(String value) textEquals,
    required TResult Function(String value) textDoesNotEqual,
    required TResult Function(String value) textContains,
    required TResult Function(String value) textDoesNotContain,
    required TResult Function(String value) textStartsWith,
    required TResult Function(String value) textEndsWith,
    required TResult Function() textIsEmpty,
    required TResult Function() textIsNotEmpty,
    required TResult Function(double value) numberEquals,
    required TResult Function(double value) numberDoesNotEqual,
    required TResult Function(double value) numberGreaterThan,
    required TResult Function(double value) numberLessThan,
    required TResult Function(double value) numberGreaterThanOrEqual,
    required TResult Function(double value) numberLessThanOrEqual,
    required TResult Function() numberIsEmpty,
    required TResult Function() numberIsNotEmpty,
    required TResult Function(bool value) checkboxEquals,
    required TResult Function(String value) selectEquals,
    required TResult Function(String value) selectDoesNotEqual,
    required TResult Function() selectIsEmpty,
    required TResult Function() selectIsNotEmpty,
    required TResult Function(String value) multiSelectContains,
    required TResult Function(String value) multiSelectDoesNotContain,
    required TResult Function() multiSelectIsEmpty,
    required TResult Function() multiSelectIsNotEmpty,
    required TResult Function(String date) dateEquals,
    required TResult Function(String date) dateBefore,
    required TResult Function(String date) dateAfter,
    required TResult Function(String date) dateOnOrBefore,
    required TResult Function(String date) dateOnOrAfter,
    required TResult Function() dateIsEmpty,
    required TResult Function() dateIsNotEmpty,
    required TResult Function() datePastWeek,
    required TResult Function() datePastMonth,
    required TResult Function() datePastYear,
    required TResult Function() dateNextWeek,
    required TResult Function() dateNextMonth,
    required TResult Function() dateNextYear,
    required TResult Function(String userId) peopleContains,
    required TResult Function(String userId) peopleDoesNotContain,
    required TResult Function() peopleIsEmpty,
    required TResult Function() peopleIsNotEmpty,
    required TResult Function() filesIsEmpty,
    required TResult Function() filesIsNotEmpty,
    required TResult Function(String pageId) relationContains,
    required TResult Function(String pageId) relationDoesNotContain,
    required TResult Function() relationIsEmpty,
    required TResult Function() relationIsNotEmpty,
  }) {
    return dateNextYear();
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function(String value)? textEquals,
    TResult? Function(String value)? textDoesNotEqual,
    TResult? Function(String value)? textContains,
    TResult? Function(String value)? textDoesNotContain,
    TResult? Function(String value)? textStartsWith,
    TResult? Function(String value)? textEndsWith,
    TResult? Function()? textIsEmpty,
    TResult? Function()? textIsNotEmpty,
    TResult? Function(double value)? numberEquals,
    TResult? Function(double value)? numberDoesNotEqual,
    TResult? Function(double value)? numberGreaterThan,
    TResult? Function(double value)? numberLessThan,
    TResult? Function(double value)? numberGreaterThanOrEqual,
    TResult? Function(double value)? numberLessThanOrEqual,
    TResult? Function()? numberIsEmpty,
    TResult? Function()? numberIsNotEmpty,
    TResult? Function(bool value)? checkboxEquals,
    TResult? Function(String value)? selectEquals,
    TResult? Function(String value)? selectDoesNotEqual,
    TResult? Function()? selectIsEmpty,
    TResult? Function()? selectIsNotEmpty,
    TResult? Function(String value)? multiSelectContains,
    TResult? Function(String value)? multiSelectDoesNotContain,
    TResult? Function()? multiSelectIsEmpty,
    TResult? Function()? multiSelectIsNotEmpty,
    TResult? Function(String date)? dateEquals,
    TResult? Function(String date)? dateBefore,
    TResult? Function(String date)? dateAfter,
    TResult? Function(String date)? dateOnOrBefore,
    TResult? Function(String date)? dateOnOrAfter,
    TResult? Function()? dateIsEmpty,
    TResult? Function()? dateIsNotEmpty,
    TResult? Function()? datePastWeek,
    TResult? Function()? datePastMonth,
    TResult? Function()? datePastYear,
    TResult? Function()? dateNextWeek,
    TResult? Function()? dateNextMonth,
    TResult? Function()? dateNextYear,
    TResult? Function(String userId)? peopleContains,
    TResult? Function(String userId)? peopleDoesNotContain,
    TResult? Function()? peopleIsEmpty,
    TResult? Function()? peopleIsNotEmpty,
    TResult? Function()? filesIsEmpty,
    TResult? Function()? filesIsNotEmpty,
    TResult? Function(String pageId)? relationContains,
    TResult? Function(String pageId)? relationDoesNotContain,
    TResult? Function()? relationIsEmpty,
    TResult? Function()? relationIsNotEmpty,
  }) {
    return dateNextYear?.call();
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function(String value)? textEquals,
    TResult Function(String value)? textDoesNotEqual,
    TResult Function(String value)? textContains,
    TResult Function(String value)? textDoesNotContain,
    TResult Function(String value)? textStartsWith,
    TResult Function(String value)? textEndsWith,
    TResult Function()? textIsEmpty,
    TResult Function()? textIsNotEmpty,
    TResult Function(double value)? numberEquals,
    TResult Function(double value)? numberDoesNotEqual,
    TResult Function(double value)? numberGreaterThan,
    TResult Function(double value)? numberLessThan,
    TResult Function(double value)? numberGreaterThanOrEqual,
    TResult Function(double value)? numberLessThanOrEqual,
    TResult Function()? numberIsEmpty,
    TResult Function()? numberIsNotEmpty,
    TResult Function(bool value)? checkboxEquals,
    TResult Function(String value)? selectEquals,
    TResult Function(String value)? selectDoesNotEqual,
    TResult Function()? selectIsEmpty,
    TResult Function()? selectIsNotEmpty,
    TResult Function(String value)? multiSelectContains,
    TResult Function(String value)? multiSelectDoesNotContain,
    TResult Function()? multiSelectIsEmpty,
    TResult Function()? multiSelectIsNotEmpty,
    TResult Function(String date)? dateEquals,
    TResult Function(String date)? dateBefore,
    TResult Function(String date)? dateAfter,
    TResult Function(String date)? dateOnOrBefore,
    TResult Function(String date)? dateOnOrAfter,
    TResult Function()? dateIsEmpty,
    TResult Function()? dateIsNotEmpty,
    TResult Function()? datePastWeek,
    TResult Function()? datePastMonth,
    TResult Function()? datePastYear,
    TResult Function()? dateNextWeek,
    TResult Function()? dateNextMonth,
    TResult Function()? dateNextYear,
    TResult Function(String userId)? peopleContains,
    TResult Function(String userId)? peopleDoesNotContain,
    TResult Function()? peopleIsEmpty,
    TResult Function()? peopleIsNotEmpty,
    TResult Function()? filesIsEmpty,
    TResult Function()? filesIsNotEmpty,
    TResult Function(String pageId)? relationContains,
    TResult Function(String pageId)? relationDoesNotContain,
    TResult Function()? relationIsEmpty,
    TResult Function()? relationIsNotEmpty,
    required TResult orElse(),
  }) {
    if (dateNextYear != null) {
      return dateNextYear();
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(TextEqualsFilter value) textEquals,
    required TResult Function(TextDoesNotEqualFilter value) textDoesNotEqual,
    required TResult Function(TextContainsFilter value) textContains,
    required TResult Function(TextDoesNotContainFilter value)
        textDoesNotContain,
    required TResult Function(TextStartsWithFilter value) textStartsWith,
    required TResult Function(TextEndsWithFilter value) textEndsWith,
    required TResult Function(TextIsEmptyFilter value) textIsEmpty,
    required TResult Function(TextIsNotEmptyFilter value) textIsNotEmpty,
    required TResult Function(NumberEqualsFilter value) numberEquals,
    required TResult Function(NumberDoesNotEqualFilter value)
        numberDoesNotEqual,
    required TResult Function(NumberGreaterThanFilter value) numberGreaterThan,
    required TResult Function(NumberLessThanFilter value) numberLessThan,
    required TResult Function(NumberGreaterThanOrEqualFilter value)
        numberGreaterThanOrEqual,
    required TResult Function(NumberLessThanOrEqualFilter value)
        numberLessThanOrEqual,
    required TResult Function(NumberIsEmptyFilter value) numberIsEmpty,
    required TResult Function(NumberIsNotEmptyFilter value) numberIsNotEmpty,
    required TResult Function(CheckboxEqualsFilter value) checkboxEquals,
    required TResult Function(SelectEqualsFilter value) selectEquals,
    required TResult Function(SelectDoesNotEqualFilter value)
        selectDoesNotEqual,
    required TResult Function(SelectIsEmptyFilter value) selectIsEmpty,
    required TResult Function(SelectIsNotEmptyFilter value) selectIsNotEmpty,
    required TResult Function(MultiSelectContainsFilter value)
        multiSelectContains,
    required TResult Function(MultiSelectDoesNotContainFilter value)
        multiSelectDoesNotContain,
    required TResult Function(MultiSelectIsEmptyFilter value)
        multiSelectIsEmpty,
    required TResult Function(MultiSelectIsNotEmptyFilter value)
        multiSelectIsNotEmpty,
    required TResult Function(DateEqualsFilter value) dateEquals,
    required TResult Function(DateBeforeFilter value) dateBefore,
    required TResult Function(DateAfterFilter value) dateAfter,
    required TResult Function(DateOnOrBeforeFilter value) dateOnOrBefore,
    required TResult Function(DateOnOrAfterFilter value) dateOnOrAfter,
    required TResult Function(DateIsEmptyFilter value) dateIsEmpty,
    required TResult Function(DateIsNotEmptyFilter value) dateIsNotEmpty,
    required TResult Function(DatePastWeekFilter value) datePastWeek,
    required TResult Function(DatePastMonthFilter value) datePastMonth,
    required TResult Function(DatePastYearFilter value) datePastYear,
    required TResult Function(DateNextWeekFilter value) dateNextWeek,
    required TResult Function(DateNextMonthFilter value) dateNextMonth,
    required TResult Function(DateNextYearFilter value) dateNextYear,
    required TResult Function(PeopleContainsFilter value) peopleContains,
    required TResult Function(PeopleDoesNotContainFilter value)
        peopleDoesNotContain,
    required TResult Function(PeopleIsEmptyFilter value) peopleIsEmpty,
    required TResult Function(PeopleIsNotEmptyFilter value) peopleIsNotEmpty,
    required TResult Function(FilesIsEmptyFilter value) filesIsEmpty,
    required TResult Function(FilesIsNotEmptyFilter value) filesIsNotEmpty,
    required TResult Function(RelationContainsFilter value) relationContains,
    required TResult Function(RelationDoesNotContainFilter value)
        relationDoesNotContain,
    required TResult Function(RelationIsEmptyFilter value) relationIsEmpty,
    required TResult Function(RelationIsNotEmptyFilter value)
        relationIsNotEmpty,
  }) {
    return dateNextYear(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(TextEqualsFilter value)? textEquals,
    TResult? Function(TextDoesNotEqualFilter value)? textDoesNotEqual,
    TResult? Function(TextContainsFilter value)? textContains,
    TResult? Function(TextDoesNotContainFilter value)? textDoesNotContain,
    TResult? Function(TextStartsWithFilter value)? textStartsWith,
    TResult? Function(TextEndsWithFilter value)? textEndsWith,
    TResult? Function(TextIsEmptyFilter value)? textIsEmpty,
    TResult? Function(TextIsNotEmptyFilter value)? textIsNotEmpty,
    TResult? Function(NumberEqualsFilter value)? numberEquals,
    TResult? Function(NumberDoesNotEqualFilter value)? numberDoesNotEqual,
    TResult? Function(NumberGreaterThanFilter value)? numberGreaterThan,
    TResult? Function(NumberLessThanFilter value)? numberLessThan,
    TResult? Function(NumberGreaterThanOrEqualFilter value)?
        numberGreaterThanOrEqual,
    TResult? Function(NumberLessThanOrEqualFilter value)? numberLessThanOrEqual,
    TResult? Function(NumberIsEmptyFilter value)? numberIsEmpty,
    TResult? Function(NumberIsNotEmptyFilter value)? numberIsNotEmpty,
    TResult? Function(CheckboxEqualsFilter value)? checkboxEquals,
    TResult? Function(SelectEqualsFilter value)? selectEquals,
    TResult? Function(SelectDoesNotEqualFilter value)? selectDoesNotEqual,
    TResult? Function(SelectIsEmptyFilter value)? selectIsEmpty,
    TResult? Function(SelectIsNotEmptyFilter value)? selectIsNotEmpty,
    TResult? Function(MultiSelectContainsFilter value)? multiSelectContains,
    TResult? Function(MultiSelectDoesNotContainFilter value)?
        multiSelectDoesNotContain,
    TResult? Function(MultiSelectIsEmptyFilter value)? multiSelectIsEmpty,
    TResult? Function(MultiSelectIsNotEmptyFilter value)? multiSelectIsNotEmpty,
    TResult? Function(DateEqualsFilter value)? dateEquals,
    TResult? Function(DateBeforeFilter value)? dateBefore,
    TResult? Function(DateAfterFilter value)? dateAfter,
    TResult? Function(DateOnOrBeforeFilter value)? dateOnOrBefore,
    TResult? Function(DateOnOrAfterFilter value)? dateOnOrAfter,
    TResult? Function(DateIsEmptyFilter value)? dateIsEmpty,
    TResult? Function(DateIsNotEmptyFilter value)? dateIsNotEmpty,
    TResult? Function(DatePastWeekFilter value)? datePastWeek,
    TResult? Function(DatePastMonthFilter value)? datePastMonth,
    TResult? Function(DatePastYearFilter value)? datePastYear,
    TResult? Function(DateNextWeekFilter value)? dateNextWeek,
    TResult? Function(DateNextMonthFilter value)? dateNextMonth,
    TResult? Function(DateNextYearFilter value)? dateNextYear,
    TResult? Function(PeopleContainsFilter value)? peopleContains,
    TResult? Function(PeopleDoesNotContainFilter value)? peopleDoesNotContain,
    TResult? Function(PeopleIsEmptyFilter value)? peopleIsEmpty,
    TResult? Function(PeopleIsNotEmptyFilter value)? peopleIsNotEmpty,
    TResult? Function(FilesIsEmptyFilter value)? filesIsEmpty,
    TResult? Function(FilesIsNotEmptyFilter value)? filesIsNotEmpty,
    TResult? Function(RelationContainsFilter value)? relationContains,
    TResult? Function(RelationDoesNotContainFilter value)?
        relationDoesNotContain,
    TResult? Function(RelationIsEmptyFilter value)? relationIsEmpty,
    TResult? Function(RelationIsNotEmptyFilter value)? relationIsNotEmpty,
  }) {
    return dateNextYear?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(TextEqualsFilter value)? textEquals,
    TResult Function(TextDoesNotEqualFilter value)? textDoesNotEqual,
    TResult Function(TextContainsFilter value)? textContains,
    TResult Function(TextDoesNotContainFilter value)? textDoesNotContain,
    TResult Function(TextStartsWithFilter value)? textStartsWith,
    TResult Function(TextEndsWithFilter value)? textEndsWith,
    TResult Function(TextIsEmptyFilter value)? textIsEmpty,
    TResult Function(TextIsNotEmptyFilter value)? textIsNotEmpty,
    TResult Function(NumberEqualsFilter value)? numberEquals,
    TResult Function(NumberDoesNotEqualFilter value)? numberDoesNotEqual,
    TResult Function(NumberGreaterThanFilter value)? numberGreaterThan,
    TResult Function(NumberLessThanFilter value)? numberLessThan,
    TResult Function(NumberGreaterThanOrEqualFilter value)?
        numberGreaterThanOrEqual,
    TResult Function(NumberLessThanOrEqualFilter value)? numberLessThanOrEqual,
    TResult Function(NumberIsEmptyFilter value)? numberIsEmpty,
    TResult Function(NumberIsNotEmptyFilter value)? numberIsNotEmpty,
    TResult Function(CheckboxEqualsFilter value)? checkboxEquals,
    TResult Function(SelectEqualsFilter value)? selectEquals,
    TResult Function(SelectDoesNotEqualFilter value)? selectDoesNotEqual,
    TResult Function(SelectIsEmptyFilter value)? selectIsEmpty,
    TResult Function(SelectIsNotEmptyFilter value)? selectIsNotEmpty,
    TResult Function(MultiSelectContainsFilter value)? multiSelectContains,
    TResult Function(MultiSelectDoesNotContainFilter value)?
        multiSelectDoesNotContain,
    TResult Function(MultiSelectIsEmptyFilter value)? multiSelectIsEmpty,
    TResult Function(MultiSelectIsNotEmptyFilter value)? multiSelectIsNotEmpty,
    TResult Function(DateEqualsFilter value)? dateEquals,
    TResult Function(DateBeforeFilter value)? dateBefore,
    TResult Function(DateAfterFilter value)? dateAfter,
    TResult Function(DateOnOrBeforeFilter value)? dateOnOrBefore,
    TResult Function(DateOnOrAfterFilter value)? dateOnOrAfter,
    TResult Function(DateIsEmptyFilter value)? dateIsEmpty,
    TResult Function(DateIsNotEmptyFilter value)? dateIsNotEmpty,
    TResult Function(DatePastWeekFilter value)? datePastWeek,
    TResult Function(DatePastMonthFilter value)? datePastMonth,
    TResult Function(DatePastYearFilter value)? datePastYear,
    TResult Function(DateNextWeekFilter value)? dateNextWeek,
    TResult Function(DateNextMonthFilter value)? dateNextMonth,
    TResult Function(DateNextYearFilter value)? dateNextYear,
    TResult Function(PeopleContainsFilter value)? peopleContains,
    TResult Function(PeopleDoesNotContainFilter value)? peopleDoesNotContain,
    TResult Function(PeopleIsEmptyFilter value)? peopleIsEmpty,
    TResult Function(PeopleIsNotEmptyFilter value)? peopleIsNotEmpty,
    TResult Function(FilesIsEmptyFilter value)? filesIsEmpty,
    TResult Function(FilesIsNotEmptyFilter value)? filesIsNotEmpty,
    TResult Function(RelationContainsFilter value)? relationContains,
    TResult Function(RelationDoesNotContainFilter value)?
        relationDoesNotContain,
    TResult Function(RelationIsEmptyFilter value)? relationIsEmpty,
    TResult Function(RelationIsNotEmptyFilter value)? relationIsNotEmpty,
    required TResult orElse(),
  }) {
    if (dateNextYear != null) {
      return dateNextYear(this);
    }
    return orElse();
  }
}

abstract class DateNextYearFilter extends PropertyFilter {
  const factory DateNextYearFilter() = _$DateNextYearFilterImpl;
  const DateNextYearFilter._() : super._();
}

/// @nodoc
abstract class _$$PeopleContainsFilterImplCopyWith<$Res> {
  factory _$$PeopleContainsFilterImplCopyWith(_$PeopleContainsFilterImpl value,
          $Res Function(_$PeopleContainsFilterImpl) then) =
      __$$PeopleContainsFilterImplCopyWithImpl<$Res>;
  @useResult
  $Res call({String userId});
}

/// @nodoc
class __$$PeopleContainsFilterImplCopyWithImpl<$Res>
    extends _$PropertyFilterCopyWithImpl<$Res, _$PeopleContainsFilterImpl>
    implements _$$PeopleContainsFilterImplCopyWith<$Res> {
  __$$PeopleContainsFilterImplCopyWithImpl(_$PeopleContainsFilterImpl _value,
      $Res Function(_$PeopleContainsFilterImpl) _then)
      : super(_value, _then);

  /// Create a copy of PropertyFilter
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? userId = null,
  }) {
    return _then(_$PeopleContainsFilterImpl(
      null == userId
          ? _value.userId
          : userId // ignore: cast_nullable_to_non_nullable
              as String,
    ));
  }
}

/// @nodoc

class _$PeopleContainsFilterImpl extends PeopleContainsFilter {
  const _$PeopleContainsFilterImpl(this.userId) : super._();

  @override
  final String userId;

  @override
  String toString() {
    return 'PropertyFilter.peopleContains(userId: $userId)';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$PeopleContainsFilterImpl &&
            (identical(other.userId, userId) || other.userId == userId));
  }

  @override
  int get hashCode => Object.hash(runtimeType, userId);

  /// Create a copy of PropertyFilter
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  @pragma('vm:prefer-inline')
  _$$PeopleContainsFilterImplCopyWith<_$PeopleContainsFilterImpl>
      get copyWith =>
          __$$PeopleContainsFilterImplCopyWithImpl<_$PeopleContainsFilterImpl>(
              this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function(String value) textEquals,
    required TResult Function(String value) textDoesNotEqual,
    required TResult Function(String value) textContains,
    required TResult Function(String value) textDoesNotContain,
    required TResult Function(String value) textStartsWith,
    required TResult Function(String value) textEndsWith,
    required TResult Function() textIsEmpty,
    required TResult Function() textIsNotEmpty,
    required TResult Function(double value) numberEquals,
    required TResult Function(double value) numberDoesNotEqual,
    required TResult Function(double value) numberGreaterThan,
    required TResult Function(double value) numberLessThan,
    required TResult Function(double value) numberGreaterThanOrEqual,
    required TResult Function(double value) numberLessThanOrEqual,
    required TResult Function() numberIsEmpty,
    required TResult Function() numberIsNotEmpty,
    required TResult Function(bool value) checkboxEquals,
    required TResult Function(String value) selectEquals,
    required TResult Function(String value) selectDoesNotEqual,
    required TResult Function() selectIsEmpty,
    required TResult Function() selectIsNotEmpty,
    required TResult Function(String value) multiSelectContains,
    required TResult Function(String value) multiSelectDoesNotContain,
    required TResult Function() multiSelectIsEmpty,
    required TResult Function() multiSelectIsNotEmpty,
    required TResult Function(String date) dateEquals,
    required TResult Function(String date) dateBefore,
    required TResult Function(String date) dateAfter,
    required TResult Function(String date) dateOnOrBefore,
    required TResult Function(String date) dateOnOrAfter,
    required TResult Function() dateIsEmpty,
    required TResult Function() dateIsNotEmpty,
    required TResult Function() datePastWeek,
    required TResult Function() datePastMonth,
    required TResult Function() datePastYear,
    required TResult Function() dateNextWeek,
    required TResult Function() dateNextMonth,
    required TResult Function() dateNextYear,
    required TResult Function(String userId) peopleContains,
    required TResult Function(String userId) peopleDoesNotContain,
    required TResult Function() peopleIsEmpty,
    required TResult Function() peopleIsNotEmpty,
    required TResult Function() filesIsEmpty,
    required TResult Function() filesIsNotEmpty,
    required TResult Function(String pageId) relationContains,
    required TResult Function(String pageId) relationDoesNotContain,
    required TResult Function() relationIsEmpty,
    required TResult Function() relationIsNotEmpty,
  }) {
    return peopleContains(userId);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function(String value)? textEquals,
    TResult? Function(String value)? textDoesNotEqual,
    TResult? Function(String value)? textContains,
    TResult? Function(String value)? textDoesNotContain,
    TResult? Function(String value)? textStartsWith,
    TResult? Function(String value)? textEndsWith,
    TResult? Function()? textIsEmpty,
    TResult? Function()? textIsNotEmpty,
    TResult? Function(double value)? numberEquals,
    TResult? Function(double value)? numberDoesNotEqual,
    TResult? Function(double value)? numberGreaterThan,
    TResult? Function(double value)? numberLessThan,
    TResult? Function(double value)? numberGreaterThanOrEqual,
    TResult? Function(double value)? numberLessThanOrEqual,
    TResult? Function()? numberIsEmpty,
    TResult? Function()? numberIsNotEmpty,
    TResult? Function(bool value)? checkboxEquals,
    TResult? Function(String value)? selectEquals,
    TResult? Function(String value)? selectDoesNotEqual,
    TResult? Function()? selectIsEmpty,
    TResult? Function()? selectIsNotEmpty,
    TResult? Function(String value)? multiSelectContains,
    TResult? Function(String value)? multiSelectDoesNotContain,
    TResult? Function()? multiSelectIsEmpty,
    TResult? Function()? multiSelectIsNotEmpty,
    TResult? Function(String date)? dateEquals,
    TResult? Function(String date)? dateBefore,
    TResult? Function(String date)? dateAfter,
    TResult? Function(String date)? dateOnOrBefore,
    TResult? Function(String date)? dateOnOrAfter,
    TResult? Function()? dateIsEmpty,
    TResult? Function()? dateIsNotEmpty,
    TResult? Function()? datePastWeek,
    TResult? Function()? datePastMonth,
    TResult? Function()? datePastYear,
    TResult? Function()? dateNextWeek,
    TResult? Function()? dateNextMonth,
    TResult? Function()? dateNextYear,
    TResult? Function(String userId)? peopleContains,
    TResult? Function(String userId)? peopleDoesNotContain,
    TResult? Function()? peopleIsEmpty,
    TResult? Function()? peopleIsNotEmpty,
    TResult? Function()? filesIsEmpty,
    TResult? Function()? filesIsNotEmpty,
    TResult? Function(String pageId)? relationContains,
    TResult? Function(String pageId)? relationDoesNotContain,
    TResult? Function()? relationIsEmpty,
    TResult? Function()? relationIsNotEmpty,
  }) {
    return peopleContains?.call(userId);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function(String value)? textEquals,
    TResult Function(String value)? textDoesNotEqual,
    TResult Function(String value)? textContains,
    TResult Function(String value)? textDoesNotContain,
    TResult Function(String value)? textStartsWith,
    TResult Function(String value)? textEndsWith,
    TResult Function()? textIsEmpty,
    TResult Function()? textIsNotEmpty,
    TResult Function(double value)? numberEquals,
    TResult Function(double value)? numberDoesNotEqual,
    TResult Function(double value)? numberGreaterThan,
    TResult Function(double value)? numberLessThan,
    TResult Function(double value)? numberGreaterThanOrEqual,
    TResult Function(double value)? numberLessThanOrEqual,
    TResult Function()? numberIsEmpty,
    TResult Function()? numberIsNotEmpty,
    TResult Function(bool value)? checkboxEquals,
    TResult Function(String value)? selectEquals,
    TResult Function(String value)? selectDoesNotEqual,
    TResult Function()? selectIsEmpty,
    TResult Function()? selectIsNotEmpty,
    TResult Function(String value)? multiSelectContains,
    TResult Function(String value)? multiSelectDoesNotContain,
    TResult Function()? multiSelectIsEmpty,
    TResult Function()? multiSelectIsNotEmpty,
    TResult Function(String date)? dateEquals,
    TResult Function(String date)? dateBefore,
    TResult Function(String date)? dateAfter,
    TResult Function(String date)? dateOnOrBefore,
    TResult Function(String date)? dateOnOrAfter,
    TResult Function()? dateIsEmpty,
    TResult Function()? dateIsNotEmpty,
    TResult Function()? datePastWeek,
    TResult Function()? datePastMonth,
    TResult Function()? datePastYear,
    TResult Function()? dateNextWeek,
    TResult Function()? dateNextMonth,
    TResult Function()? dateNextYear,
    TResult Function(String userId)? peopleContains,
    TResult Function(String userId)? peopleDoesNotContain,
    TResult Function()? peopleIsEmpty,
    TResult Function()? peopleIsNotEmpty,
    TResult Function()? filesIsEmpty,
    TResult Function()? filesIsNotEmpty,
    TResult Function(String pageId)? relationContains,
    TResult Function(String pageId)? relationDoesNotContain,
    TResult Function()? relationIsEmpty,
    TResult Function()? relationIsNotEmpty,
    required TResult orElse(),
  }) {
    if (peopleContains != null) {
      return peopleContains(userId);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(TextEqualsFilter value) textEquals,
    required TResult Function(TextDoesNotEqualFilter value) textDoesNotEqual,
    required TResult Function(TextContainsFilter value) textContains,
    required TResult Function(TextDoesNotContainFilter value)
        textDoesNotContain,
    required TResult Function(TextStartsWithFilter value) textStartsWith,
    required TResult Function(TextEndsWithFilter value) textEndsWith,
    required TResult Function(TextIsEmptyFilter value) textIsEmpty,
    required TResult Function(TextIsNotEmptyFilter value) textIsNotEmpty,
    required TResult Function(NumberEqualsFilter value) numberEquals,
    required TResult Function(NumberDoesNotEqualFilter value)
        numberDoesNotEqual,
    required TResult Function(NumberGreaterThanFilter value) numberGreaterThan,
    required TResult Function(NumberLessThanFilter value) numberLessThan,
    required TResult Function(NumberGreaterThanOrEqualFilter value)
        numberGreaterThanOrEqual,
    required TResult Function(NumberLessThanOrEqualFilter value)
        numberLessThanOrEqual,
    required TResult Function(NumberIsEmptyFilter value) numberIsEmpty,
    required TResult Function(NumberIsNotEmptyFilter value) numberIsNotEmpty,
    required TResult Function(CheckboxEqualsFilter value) checkboxEquals,
    required TResult Function(SelectEqualsFilter value) selectEquals,
    required TResult Function(SelectDoesNotEqualFilter value)
        selectDoesNotEqual,
    required TResult Function(SelectIsEmptyFilter value) selectIsEmpty,
    required TResult Function(SelectIsNotEmptyFilter value) selectIsNotEmpty,
    required TResult Function(MultiSelectContainsFilter value)
        multiSelectContains,
    required TResult Function(MultiSelectDoesNotContainFilter value)
        multiSelectDoesNotContain,
    required TResult Function(MultiSelectIsEmptyFilter value)
        multiSelectIsEmpty,
    required TResult Function(MultiSelectIsNotEmptyFilter value)
        multiSelectIsNotEmpty,
    required TResult Function(DateEqualsFilter value) dateEquals,
    required TResult Function(DateBeforeFilter value) dateBefore,
    required TResult Function(DateAfterFilter value) dateAfter,
    required TResult Function(DateOnOrBeforeFilter value) dateOnOrBefore,
    required TResult Function(DateOnOrAfterFilter value) dateOnOrAfter,
    required TResult Function(DateIsEmptyFilter value) dateIsEmpty,
    required TResult Function(DateIsNotEmptyFilter value) dateIsNotEmpty,
    required TResult Function(DatePastWeekFilter value) datePastWeek,
    required TResult Function(DatePastMonthFilter value) datePastMonth,
    required TResult Function(DatePastYearFilter value) datePastYear,
    required TResult Function(DateNextWeekFilter value) dateNextWeek,
    required TResult Function(DateNextMonthFilter value) dateNextMonth,
    required TResult Function(DateNextYearFilter value) dateNextYear,
    required TResult Function(PeopleContainsFilter value) peopleContains,
    required TResult Function(PeopleDoesNotContainFilter value)
        peopleDoesNotContain,
    required TResult Function(PeopleIsEmptyFilter value) peopleIsEmpty,
    required TResult Function(PeopleIsNotEmptyFilter value) peopleIsNotEmpty,
    required TResult Function(FilesIsEmptyFilter value) filesIsEmpty,
    required TResult Function(FilesIsNotEmptyFilter value) filesIsNotEmpty,
    required TResult Function(RelationContainsFilter value) relationContains,
    required TResult Function(RelationDoesNotContainFilter value)
        relationDoesNotContain,
    required TResult Function(RelationIsEmptyFilter value) relationIsEmpty,
    required TResult Function(RelationIsNotEmptyFilter value)
        relationIsNotEmpty,
  }) {
    return peopleContains(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(TextEqualsFilter value)? textEquals,
    TResult? Function(TextDoesNotEqualFilter value)? textDoesNotEqual,
    TResult? Function(TextContainsFilter value)? textContains,
    TResult? Function(TextDoesNotContainFilter value)? textDoesNotContain,
    TResult? Function(TextStartsWithFilter value)? textStartsWith,
    TResult? Function(TextEndsWithFilter value)? textEndsWith,
    TResult? Function(TextIsEmptyFilter value)? textIsEmpty,
    TResult? Function(TextIsNotEmptyFilter value)? textIsNotEmpty,
    TResult? Function(NumberEqualsFilter value)? numberEquals,
    TResult? Function(NumberDoesNotEqualFilter value)? numberDoesNotEqual,
    TResult? Function(NumberGreaterThanFilter value)? numberGreaterThan,
    TResult? Function(NumberLessThanFilter value)? numberLessThan,
    TResult? Function(NumberGreaterThanOrEqualFilter value)?
        numberGreaterThanOrEqual,
    TResult? Function(NumberLessThanOrEqualFilter value)? numberLessThanOrEqual,
    TResult? Function(NumberIsEmptyFilter value)? numberIsEmpty,
    TResult? Function(NumberIsNotEmptyFilter value)? numberIsNotEmpty,
    TResult? Function(CheckboxEqualsFilter value)? checkboxEquals,
    TResult? Function(SelectEqualsFilter value)? selectEquals,
    TResult? Function(SelectDoesNotEqualFilter value)? selectDoesNotEqual,
    TResult? Function(SelectIsEmptyFilter value)? selectIsEmpty,
    TResult? Function(SelectIsNotEmptyFilter value)? selectIsNotEmpty,
    TResult? Function(MultiSelectContainsFilter value)? multiSelectContains,
    TResult? Function(MultiSelectDoesNotContainFilter value)?
        multiSelectDoesNotContain,
    TResult? Function(MultiSelectIsEmptyFilter value)? multiSelectIsEmpty,
    TResult? Function(MultiSelectIsNotEmptyFilter value)? multiSelectIsNotEmpty,
    TResult? Function(DateEqualsFilter value)? dateEquals,
    TResult? Function(DateBeforeFilter value)? dateBefore,
    TResult? Function(DateAfterFilter value)? dateAfter,
    TResult? Function(DateOnOrBeforeFilter value)? dateOnOrBefore,
    TResult? Function(DateOnOrAfterFilter value)? dateOnOrAfter,
    TResult? Function(DateIsEmptyFilter value)? dateIsEmpty,
    TResult? Function(DateIsNotEmptyFilter value)? dateIsNotEmpty,
    TResult? Function(DatePastWeekFilter value)? datePastWeek,
    TResult? Function(DatePastMonthFilter value)? datePastMonth,
    TResult? Function(DatePastYearFilter value)? datePastYear,
    TResult? Function(DateNextWeekFilter value)? dateNextWeek,
    TResult? Function(DateNextMonthFilter value)? dateNextMonth,
    TResult? Function(DateNextYearFilter value)? dateNextYear,
    TResult? Function(PeopleContainsFilter value)? peopleContains,
    TResult? Function(PeopleDoesNotContainFilter value)? peopleDoesNotContain,
    TResult? Function(PeopleIsEmptyFilter value)? peopleIsEmpty,
    TResult? Function(PeopleIsNotEmptyFilter value)? peopleIsNotEmpty,
    TResult? Function(FilesIsEmptyFilter value)? filesIsEmpty,
    TResult? Function(FilesIsNotEmptyFilter value)? filesIsNotEmpty,
    TResult? Function(RelationContainsFilter value)? relationContains,
    TResult? Function(RelationDoesNotContainFilter value)?
        relationDoesNotContain,
    TResult? Function(RelationIsEmptyFilter value)? relationIsEmpty,
    TResult? Function(RelationIsNotEmptyFilter value)? relationIsNotEmpty,
  }) {
    return peopleContains?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(TextEqualsFilter value)? textEquals,
    TResult Function(TextDoesNotEqualFilter value)? textDoesNotEqual,
    TResult Function(TextContainsFilter value)? textContains,
    TResult Function(TextDoesNotContainFilter value)? textDoesNotContain,
    TResult Function(TextStartsWithFilter value)? textStartsWith,
    TResult Function(TextEndsWithFilter value)? textEndsWith,
    TResult Function(TextIsEmptyFilter value)? textIsEmpty,
    TResult Function(TextIsNotEmptyFilter value)? textIsNotEmpty,
    TResult Function(NumberEqualsFilter value)? numberEquals,
    TResult Function(NumberDoesNotEqualFilter value)? numberDoesNotEqual,
    TResult Function(NumberGreaterThanFilter value)? numberGreaterThan,
    TResult Function(NumberLessThanFilter value)? numberLessThan,
    TResult Function(NumberGreaterThanOrEqualFilter value)?
        numberGreaterThanOrEqual,
    TResult Function(NumberLessThanOrEqualFilter value)? numberLessThanOrEqual,
    TResult Function(NumberIsEmptyFilter value)? numberIsEmpty,
    TResult Function(NumberIsNotEmptyFilter value)? numberIsNotEmpty,
    TResult Function(CheckboxEqualsFilter value)? checkboxEquals,
    TResult Function(SelectEqualsFilter value)? selectEquals,
    TResult Function(SelectDoesNotEqualFilter value)? selectDoesNotEqual,
    TResult Function(SelectIsEmptyFilter value)? selectIsEmpty,
    TResult Function(SelectIsNotEmptyFilter value)? selectIsNotEmpty,
    TResult Function(MultiSelectContainsFilter value)? multiSelectContains,
    TResult Function(MultiSelectDoesNotContainFilter value)?
        multiSelectDoesNotContain,
    TResult Function(MultiSelectIsEmptyFilter value)? multiSelectIsEmpty,
    TResult Function(MultiSelectIsNotEmptyFilter value)? multiSelectIsNotEmpty,
    TResult Function(DateEqualsFilter value)? dateEquals,
    TResult Function(DateBeforeFilter value)? dateBefore,
    TResult Function(DateAfterFilter value)? dateAfter,
    TResult Function(DateOnOrBeforeFilter value)? dateOnOrBefore,
    TResult Function(DateOnOrAfterFilter value)? dateOnOrAfter,
    TResult Function(DateIsEmptyFilter value)? dateIsEmpty,
    TResult Function(DateIsNotEmptyFilter value)? dateIsNotEmpty,
    TResult Function(DatePastWeekFilter value)? datePastWeek,
    TResult Function(DatePastMonthFilter value)? datePastMonth,
    TResult Function(DatePastYearFilter value)? datePastYear,
    TResult Function(DateNextWeekFilter value)? dateNextWeek,
    TResult Function(DateNextMonthFilter value)? dateNextMonth,
    TResult Function(DateNextYearFilter value)? dateNextYear,
    TResult Function(PeopleContainsFilter value)? peopleContains,
    TResult Function(PeopleDoesNotContainFilter value)? peopleDoesNotContain,
    TResult Function(PeopleIsEmptyFilter value)? peopleIsEmpty,
    TResult Function(PeopleIsNotEmptyFilter value)? peopleIsNotEmpty,
    TResult Function(FilesIsEmptyFilter value)? filesIsEmpty,
    TResult Function(FilesIsNotEmptyFilter value)? filesIsNotEmpty,
    TResult Function(RelationContainsFilter value)? relationContains,
    TResult Function(RelationDoesNotContainFilter value)?
        relationDoesNotContain,
    TResult Function(RelationIsEmptyFilter value)? relationIsEmpty,
    TResult Function(RelationIsNotEmptyFilter value)? relationIsNotEmpty,
    required TResult orElse(),
  }) {
    if (peopleContains != null) {
      return peopleContains(this);
    }
    return orElse();
  }
}

abstract class PeopleContainsFilter extends PropertyFilter {
  const factory PeopleContainsFilter(final String userId) =
      _$PeopleContainsFilterImpl;
  const PeopleContainsFilter._() : super._();

  String get userId;

  /// Create a copy of PropertyFilter
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  _$$PeopleContainsFilterImplCopyWith<_$PeopleContainsFilterImpl>
      get copyWith => throw _privateConstructorUsedError;
}

/// @nodoc
abstract class _$$PeopleDoesNotContainFilterImplCopyWith<$Res> {
  factory _$$PeopleDoesNotContainFilterImplCopyWith(
          _$PeopleDoesNotContainFilterImpl value,
          $Res Function(_$PeopleDoesNotContainFilterImpl) then) =
      __$$PeopleDoesNotContainFilterImplCopyWithImpl<$Res>;
  @useResult
  $Res call({String userId});
}

/// @nodoc
class __$$PeopleDoesNotContainFilterImplCopyWithImpl<$Res>
    extends _$PropertyFilterCopyWithImpl<$Res, _$PeopleDoesNotContainFilterImpl>
    implements _$$PeopleDoesNotContainFilterImplCopyWith<$Res> {
  __$$PeopleDoesNotContainFilterImplCopyWithImpl(
      _$PeopleDoesNotContainFilterImpl _value,
      $Res Function(_$PeopleDoesNotContainFilterImpl) _then)
      : super(_value, _then);

  /// Create a copy of PropertyFilter
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? userId = null,
  }) {
    return _then(_$PeopleDoesNotContainFilterImpl(
      null == userId
          ? _value.userId
          : userId // ignore: cast_nullable_to_non_nullable
              as String,
    ));
  }
}

/// @nodoc

class _$PeopleDoesNotContainFilterImpl extends PeopleDoesNotContainFilter {
  const _$PeopleDoesNotContainFilterImpl(this.userId) : super._();

  @override
  final String userId;

  @override
  String toString() {
    return 'PropertyFilter.peopleDoesNotContain(userId: $userId)';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$PeopleDoesNotContainFilterImpl &&
            (identical(other.userId, userId) || other.userId == userId));
  }

  @override
  int get hashCode => Object.hash(runtimeType, userId);

  /// Create a copy of PropertyFilter
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  @pragma('vm:prefer-inline')
  _$$PeopleDoesNotContainFilterImplCopyWith<_$PeopleDoesNotContainFilterImpl>
      get copyWith => __$$PeopleDoesNotContainFilterImplCopyWithImpl<
          _$PeopleDoesNotContainFilterImpl>(this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function(String value) textEquals,
    required TResult Function(String value) textDoesNotEqual,
    required TResult Function(String value) textContains,
    required TResult Function(String value) textDoesNotContain,
    required TResult Function(String value) textStartsWith,
    required TResult Function(String value) textEndsWith,
    required TResult Function() textIsEmpty,
    required TResult Function() textIsNotEmpty,
    required TResult Function(double value) numberEquals,
    required TResult Function(double value) numberDoesNotEqual,
    required TResult Function(double value) numberGreaterThan,
    required TResult Function(double value) numberLessThan,
    required TResult Function(double value) numberGreaterThanOrEqual,
    required TResult Function(double value) numberLessThanOrEqual,
    required TResult Function() numberIsEmpty,
    required TResult Function() numberIsNotEmpty,
    required TResult Function(bool value) checkboxEquals,
    required TResult Function(String value) selectEquals,
    required TResult Function(String value) selectDoesNotEqual,
    required TResult Function() selectIsEmpty,
    required TResult Function() selectIsNotEmpty,
    required TResult Function(String value) multiSelectContains,
    required TResult Function(String value) multiSelectDoesNotContain,
    required TResult Function() multiSelectIsEmpty,
    required TResult Function() multiSelectIsNotEmpty,
    required TResult Function(String date) dateEquals,
    required TResult Function(String date) dateBefore,
    required TResult Function(String date) dateAfter,
    required TResult Function(String date) dateOnOrBefore,
    required TResult Function(String date) dateOnOrAfter,
    required TResult Function() dateIsEmpty,
    required TResult Function() dateIsNotEmpty,
    required TResult Function() datePastWeek,
    required TResult Function() datePastMonth,
    required TResult Function() datePastYear,
    required TResult Function() dateNextWeek,
    required TResult Function() dateNextMonth,
    required TResult Function() dateNextYear,
    required TResult Function(String userId) peopleContains,
    required TResult Function(String userId) peopleDoesNotContain,
    required TResult Function() peopleIsEmpty,
    required TResult Function() peopleIsNotEmpty,
    required TResult Function() filesIsEmpty,
    required TResult Function() filesIsNotEmpty,
    required TResult Function(String pageId) relationContains,
    required TResult Function(String pageId) relationDoesNotContain,
    required TResult Function() relationIsEmpty,
    required TResult Function() relationIsNotEmpty,
  }) {
    return peopleDoesNotContain(userId);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function(String value)? textEquals,
    TResult? Function(String value)? textDoesNotEqual,
    TResult? Function(String value)? textContains,
    TResult? Function(String value)? textDoesNotContain,
    TResult? Function(String value)? textStartsWith,
    TResult? Function(String value)? textEndsWith,
    TResult? Function()? textIsEmpty,
    TResult? Function()? textIsNotEmpty,
    TResult? Function(double value)? numberEquals,
    TResult? Function(double value)? numberDoesNotEqual,
    TResult? Function(double value)? numberGreaterThan,
    TResult? Function(double value)? numberLessThan,
    TResult? Function(double value)? numberGreaterThanOrEqual,
    TResult? Function(double value)? numberLessThanOrEqual,
    TResult? Function()? numberIsEmpty,
    TResult? Function()? numberIsNotEmpty,
    TResult? Function(bool value)? checkboxEquals,
    TResult? Function(String value)? selectEquals,
    TResult? Function(String value)? selectDoesNotEqual,
    TResult? Function()? selectIsEmpty,
    TResult? Function()? selectIsNotEmpty,
    TResult? Function(String value)? multiSelectContains,
    TResult? Function(String value)? multiSelectDoesNotContain,
    TResult? Function()? multiSelectIsEmpty,
    TResult? Function()? multiSelectIsNotEmpty,
    TResult? Function(String date)? dateEquals,
    TResult? Function(String date)? dateBefore,
    TResult? Function(String date)? dateAfter,
    TResult? Function(String date)? dateOnOrBefore,
    TResult? Function(String date)? dateOnOrAfter,
    TResult? Function()? dateIsEmpty,
    TResult? Function()? dateIsNotEmpty,
    TResult? Function()? datePastWeek,
    TResult? Function()? datePastMonth,
    TResult? Function()? datePastYear,
    TResult? Function()? dateNextWeek,
    TResult? Function()? dateNextMonth,
    TResult? Function()? dateNextYear,
    TResult? Function(String userId)? peopleContains,
    TResult? Function(String userId)? peopleDoesNotContain,
    TResult? Function()? peopleIsEmpty,
    TResult? Function()? peopleIsNotEmpty,
    TResult? Function()? filesIsEmpty,
    TResult? Function()? filesIsNotEmpty,
    TResult? Function(String pageId)? relationContains,
    TResult? Function(String pageId)? relationDoesNotContain,
    TResult? Function()? relationIsEmpty,
    TResult? Function()? relationIsNotEmpty,
  }) {
    return peopleDoesNotContain?.call(userId);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function(String value)? textEquals,
    TResult Function(String value)? textDoesNotEqual,
    TResult Function(String value)? textContains,
    TResult Function(String value)? textDoesNotContain,
    TResult Function(String value)? textStartsWith,
    TResult Function(String value)? textEndsWith,
    TResult Function()? textIsEmpty,
    TResult Function()? textIsNotEmpty,
    TResult Function(double value)? numberEquals,
    TResult Function(double value)? numberDoesNotEqual,
    TResult Function(double value)? numberGreaterThan,
    TResult Function(double value)? numberLessThan,
    TResult Function(double value)? numberGreaterThanOrEqual,
    TResult Function(double value)? numberLessThanOrEqual,
    TResult Function()? numberIsEmpty,
    TResult Function()? numberIsNotEmpty,
    TResult Function(bool value)? checkboxEquals,
    TResult Function(String value)? selectEquals,
    TResult Function(String value)? selectDoesNotEqual,
    TResult Function()? selectIsEmpty,
    TResult Function()? selectIsNotEmpty,
    TResult Function(String value)? multiSelectContains,
    TResult Function(String value)? multiSelectDoesNotContain,
    TResult Function()? multiSelectIsEmpty,
    TResult Function()? multiSelectIsNotEmpty,
    TResult Function(String date)? dateEquals,
    TResult Function(String date)? dateBefore,
    TResult Function(String date)? dateAfter,
    TResult Function(String date)? dateOnOrBefore,
    TResult Function(String date)? dateOnOrAfter,
    TResult Function()? dateIsEmpty,
    TResult Function()? dateIsNotEmpty,
    TResult Function()? datePastWeek,
    TResult Function()? datePastMonth,
    TResult Function()? datePastYear,
    TResult Function()? dateNextWeek,
    TResult Function()? dateNextMonth,
    TResult Function()? dateNextYear,
    TResult Function(String userId)? peopleContains,
    TResult Function(String userId)? peopleDoesNotContain,
    TResult Function()? peopleIsEmpty,
    TResult Function()? peopleIsNotEmpty,
    TResult Function()? filesIsEmpty,
    TResult Function()? filesIsNotEmpty,
    TResult Function(String pageId)? relationContains,
    TResult Function(String pageId)? relationDoesNotContain,
    TResult Function()? relationIsEmpty,
    TResult Function()? relationIsNotEmpty,
    required TResult orElse(),
  }) {
    if (peopleDoesNotContain != null) {
      return peopleDoesNotContain(userId);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(TextEqualsFilter value) textEquals,
    required TResult Function(TextDoesNotEqualFilter value) textDoesNotEqual,
    required TResult Function(TextContainsFilter value) textContains,
    required TResult Function(TextDoesNotContainFilter value)
        textDoesNotContain,
    required TResult Function(TextStartsWithFilter value) textStartsWith,
    required TResult Function(TextEndsWithFilter value) textEndsWith,
    required TResult Function(TextIsEmptyFilter value) textIsEmpty,
    required TResult Function(TextIsNotEmptyFilter value) textIsNotEmpty,
    required TResult Function(NumberEqualsFilter value) numberEquals,
    required TResult Function(NumberDoesNotEqualFilter value)
        numberDoesNotEqual,
    required TResult Function(NumberGreaterThanFilter value) numberGreaterThan,
    required TResult Function(NumberLessThanFilter value) numberLessThan,
    required TResult Function(NumberGreaterThanOrEqualFilter value)
        numberGreaterThanOrEqual,
    required TResult Function(NumberLessThanOrEqualFilter value)
        numberLessThanOrEqual,
    required TResult Function(NumberIsEmptyFilter value) numberIsEmpty,
    required TResult Function(NumberIsNotEmptyFilter value) numberIsNotEmpty,
    required TResult Function(CheckboxEqualsFilter value) checkboxEquals,
    required TResult Function(SelectEqualsFilter value) selectEquals,
    required TResult Function(SelectDoesNotEqualFilter value)
        selectDoesNotEqual,
    required TResult Function(SelectIsEmptyFilter value) selectIsEmpty,
    required TResult Function(SelectIsNotEmptyFilter value) selectIsNotEmpty,
    required TResult Function(MultiSelectContainsFilter value)
        multiSelectContains,
    required TResult Function(MultiSelectDoesNotContainFilter value)
        multiSelectDoesNotContain,
    required TResult Function(MultiSelectIsEmptyFilter value)
        multiSelectIsEmpty,
    required TResult Function(MultiSelectIsNotEmptyFilter value)
        multiSelectIsNotEmpty,
    required TResult Function(DateEqualsFilter value) dateEquals,
    required TResult Function(DateBeforeFilter value) dateBefore,
    required TResult Function(DateAfterFilter value) dateAfter,
    required TResult Function(DateOnOrBeforeFilter value) dateOnOrBefore,
    required TResult Function(DateOnOrAfterFilter value) dateOnOrAfter,
    required TResult Function(DateIsEmptyFilter value) dateIsEmpty,
    required TResult Function(DateIsNotEmptyFilter value) dateIsNotEmpty,
    required TResult Function(DatePastWeekFilter value) datePastWeek,
    required TResult Function(DatePastMonthFilter value) datePastMonth,
    required TResult Function(DatePastYearFilter value) datePastYear,
    required TResult Function(DateNextWeekFilter value) dateNextWeek,
    required TResult Function(DateNextMonthFilter value) dateNextMonth,
    required TResult Function(DateNextYearFilter value) dateNextYear,
    required TResult Function(PeopleContainsFilter value) peopleContains,
    required TResult Function(PeopleDoesNotContainFilter value)
        peopleDoesNotContain,
    required TResult Function(PeopleIsEmptyFilter value) peopleIsEmpty,
    required TResult Function(PeopleIsNotEmptyFilter value) peopleIsNotEmpty,
    required TResult Function(FilesIsEmptyFilter value) filesIsEmpty,
    required TResult Function(FilesIsNotEmptyFilter value) filesIsNotEmpty,
    required TResult Function(RelationContainsFilter value) relationContains,
    required TResult Function(RelationDoesNotContainFilter value)
        relationDoesNotContain,
    required TResult Function(RelationIsEmptyFilter value) relationIsEmpty,
    required TResult Function(RelationIsNotEmptyFilter value)
        relationIsNotEmpty,
  }) {
    return peopleDoesNotContain(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(TextEqualsFilter value)? textEquals,
    TResult? Function(TextDoesNotEqualFilter value)? textDoesNotEqual,
    TResult? Function(TextContainsFilter value)? textContains,
    TResult? Function(TextDoesNotContainFilter value)? textDoesNotContain,
    TResult? Function(TextStartsWithFilter value)? textStartsWith,
    TResult? Function(TextEndsWithFilter value)? textEndsWith,
    TResult? Function(TextIsEmptyFilter value)? textIsEmpty,
    TResult? Function(TextIsNotEmptyFilter value)? textIsNotEmpty,
    TResult? Function(NumberEqualsFilter value)? numberEquals,
    TResult? Function(NumberDoesNotEqualFilter value)? numberDoesNotEqual,
    TResult? Function(NumberGreaterThanFilter value)? numberGreaterThan,
    TResult? Function(NumberLessThanFilter value)? numberLessThan,
    TResult? Function(NumberGreaterThanOrEqualFilter value)?
        numberGreaterThanOrEqual,
    TResult? Function(NumberLessThanOrEqualFilter value)? numberLessThanOrEqual,
    TResult? Function(NumberIsEmptyFilter value)? numberIsEmpty,
    TResult? Function(NumberIsNotEmptyFilter value)? numberIsNotEmpty,
    TResult? Function(CheckboxEqualsFilter value)? checkboxEquals,
    TResult? Function(SelectEqualsFilter value)? selectEquals,
    TResult? Function(SelectDoesNotEqualFilter value)? selectDoesNotEqual,
    TResult? Function(SelectIsEmptyFilter value)? selectIsEmpty,
    TResult? Function(SelectIsNotEmptyFilter value)? selectIsNotEmpty,
    TResult? Function(MultiSelectContainsFilter value)? multiSelectContains,
    TResult? Function(MultiSelectDoesNotContainFilter value)?
        multiSelectDoesNotContain,
    TResult? Function(MultiSelectIsEmptyFilter value)? multiSelectIsEmpty,
    TResult? Function(MultiSelectIsNotEmptyFilter value)? multiSelectIsNotEmpty,
    TResult? Function(DateEqualsFilter value)? dateEquals,
    TResult? Function(DateBeforeFilter value)? dateBefore,
    TResult? Function(DateAfterFilter value)? dateAfter,
    TResult? Function(DateOnOrBeforeFilter value)? dateOnOrBefore,
    TResult? Function(DateOnOrAfterFilter value)? dateOnOrAfter,
    TResult? Function(DateIsEmptyFilter value)? dateIsEmpty,
    TResult? Function(DateIsNotEmptyFilter value)? dateIsNotEmpty,
    TResult? Function(DatePastWeekFilter value)? datePastWeek,
    TResult? Function(DatePastMonthFilter value)? datePastMonth,
    TResult? Function(DatePastYearFilter value)? datePastYear,
    TResult? Function(DateNextWeekFilter value)? dateNextWeek,
    TResult? Function(DateNextMonthFilter value)? dateNextMonth,
    TResult? Function(DateNextYearFilter value)? dateNextYear,
    TResult? Function(PeopleContainsFilter value)? peopleContains,
    TResult? Function(PeopleDoesNotContainFilter value)? peopleDoesNotContain,
    TResult? Function(PeopleIsEmptyFilter value)? peopleIsEmpty,
    TResult? Function(PeopleIsNotEmptyFilter value)? peopleIsNotEmpty,
    TResult? Function(FilesIsEmptyFilter value)? filesIsEmpty,
    TResult? Function(FilesIsNotEmptyFilter value)? filesIsNotEmpty,
    TResult? Function(RelationContainsFilter value)? relationContains,
    TResult? Function(RelationDoesNotContainFilter value)?
        relationDoesNotContain,
    TResult? Function(RelationIsEmptyFilter value)? relationIsEmpty,
    TResult? Function(RelationIsNotEmptyFilter value)? relationIsNotEmpty,
  }) {
    return peopleDoesNotContain?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(TextEqualsFilter value)? textEquals,
    TResult Function(TextDoesNotEqualFilter value)? textDoesNotEqual,
    TResult Function(TextContainsFilter value)? textContains,
    TResult Function(TextDoesNotContainFilter value)? textDoesNotContain,
    TResult Function(TextStartsWithFilter value)? textStartsWith,
    TResult Function(TextEndsWithFilter value)? textEndsWith,
    TResult Function(TextIsEmptyFilter value)? textIsEmpty,
    TResult Function(TextIsNotEmptyFilter value)? textIsNotEmpty,
    TResult Function(NumberEqualsFilter value)? numberEquals,
    TResult Function(NumberDoesNotEqualFilter value)? numberDoesNotEqual,
    TResult Function(NumberGreaterThanFilter value)? numberGreaterThan,
    TResult Function(NumberLessThanFilter value)? numberLessThan,
    TResult Function(NumberGreaterThanOrEqualFilter value)?
        numberGreaterThanOrEqual,
    TResult Function(NumberLessThanOrEqualFilter value)? numberLessThanOrEqual,
    TResult Function(NumberIsEmptyFilter value)? numberIsEmpty,
    TResult Function(NumberIsNotEmptyFilter value)? numberIsNotEmpty,
    TResult Function(CheckboxEqualsFilter value)? checkboxEquals,
    TResult Function(SelectEqualsFilter value)? selectEquals,
    TResult Function(SelectDoesNotEqualFilter value)? selectDoesNotEqual,
    TResult Function(SelectIsEmptyFilter value)? selectIsEmpty,
    TResult Function(SelectIsNotEmptyFilter value)? selectIsNotEmpty,
    TResult Function(MultiSelectContainsFilter value)? multiSelectContains,
    TResult Function(MultiSelectDoesNotContainFilter value)?
        multiSelectDoesNotContain,
    TResult Function(MultiSelectIsEmptyFilter value)? multiSelectIsEmpty,
    TResult Function(MultiSelectIsNotEmptyFilter value)? multiSelectIsNotEmpty,
    TResult Function(DateEqualsFilter value)? dateEquals,
    TResult Function(DateBeforeFilter value)? dateBefore,
    TResult Function(DateAfterFilter value)? dateAfter,
    TResult Function(DateOnOrBeforeFilter value)? dateOnOrBefore,
    TResult Function(DateOnOrAfterFilter value)? dateOnOrAfter,
    TResult Function(DateIsEmptyFilter value)? dateIsEmpty,
    TResult Function(DateIsNotEmptyFilter value)? dateIsNotEmpty,
    TResult Function(DatePastWeekFilter value)? datePastWeek,
    TResult Function(DatePastMonthFilter value)? datePastMonth,
    TResult Function(DatePastYearFilter value)? datePastYear,
    TResult Function(DateNextWeekFilter value)? dateNextWeek,
    TResult Function(DateNextMonthFilter value)? dateNextMonth,
    TResult Function(DateNextYearFilter value)? dateNextYear,
    TResult Function(PeopleContainsFilter value)? peopleContains,
    TResult Function(PeopleDoesNotContainFilter value)? peopleDoesNotContain,
    TResult Function(PeopleIsEmptyFilter value)? peopleIsEmpty,
    TResult Function(PeopleIsNotEmptyFilter value)? peopleIsNotEmpty,
    TResult Function(FilesIsEmptyFilter value)? filesIsEmpty,
    TResult Function(FilesIsNotEmptyFilter value)? filesIsNotEmpty,
    TResult Function(RelationContainsFilter value)? relationContains,
    TResult Function(RelationDoesNotContainFilter value)?
        relationDoesNotContain,
    TResult Function(RelationIsEmptyFilter value)? relationIsEmpty,
    TResult Function(RelationIsNotEmptyFilter value)? relationIsNotEmpty,
    required TResult orElse(),
  }) {
    if (peopleDoesNotContain != null) {
      return peopleDoesNotContain(this);
    }
    return orElse();
  }
}

abstract class PeopleDoesNotContainFilter extends PropertyFilter {
  const factory PeopleDoesNotContainFilter(final String userId) =
      _$PeopleDoesNotContainFilterImpl;
  const PeopleDoesNotContainFilter._() : super._();

  String get userId;

  /// Create a copy of PropertyFilter
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  _$$PeopleDoesNotContainFilterImplCopyWith<_$PeopleDoesNotContainFilterImpl>
      get copyWith => throw _privateConstructorUsedError;
}

/// @nodoc
abstract class _$$PeopleIsEmptyFilterImplCopyWith<$Res> {
  factory _$$PeopleIsEmptyFilterImplCopyWith(_$PeopleIsEmptyFilterImpl value,
          $Res Function(_$PeopleIsEmptyFilterImpl) then) =
      __$$PeopleIsEmptyFilterImplCopyWithImpl<$Res>;
}

/// @nodoc
class __$$PeopleIsEmptyFilterImplCopyWithImpl<$Res>
    extends _$PropertyFilterCopyWithImpl<$Res, _$PeopleIsEmptyFilterImpl>
    implements _$$PeopleIsEmptyFilterImplCopyWith<$Res> {
  __$$PeopleIsEmptyFilterImplCopyWithImpl(_$PeopleIsEmptyFilterImpl _value,
      $Res Function(_$PeopleIsEmptyFilterImpl) _then)
      : super(_value, _then);

  /// Create a copy of PropertyFilter
  /// with the given fields replaced by the non-null parameter values.
}

/// @nodoc

class _$PeopleIsEmptyFilterImpl extends PeopleIsEmptyFilter {
  const _$PeopleIsEmptyFilterImpl() : super._();

  @override
  String toString() {
    return 'PropertyFilter.peopleIsEmpty()';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$PeopleIsEmptyFilterImpl);
  }

  @override
  int get hashCode => runtimeType.hashCode;

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function(String value) textEquals,
    required TResult Function(String value) textDoesNotEqual,
    required TResult Function(String value) textContains,
    required TResult Function(String value) textDoesNotContain,
    required TResult Function(String value) textStartsWith,
    required TResult Function(String value) textEndsWith,
    required TResult Function() textIsEmpty,
    required TResult Function() textIsNotEmpty,
    required TResult Function(double value) numberEquals,
    required TResult Function(double value) numberDoesNotEqual,
    required TResult Function(double value) numberGreaterThan,
    required TResult Function(double value) numberLessThan,
    required TResult Function(double value) numberGreaterThanOrEqual,
    required TResult Function(double value) numberLessThanOrEqual,
    required TResult Function() numberIsEmpty,
    required TResult Function() numberIsNotEmpty,
    required TResult Function(bool value) checkboxEquals,
    required TResult Function(String value) selectEquals,
    required TResult Function(String value) selectDoesNotEqual,
    required TResult Function() selectIsEmpty,
    required TResult Function() selectIsNotEmpty,
    required TResult Function(String value) multiSelectContains,
    required TResult Function(String value) multiSelectDoesNotContain,
    required TResult Function() multiSelectIsEmpty,
    required TResult Function() multiSelectIsNotEmpty,
    required TResult Function(String date) dateEquals,
    required TResult Function(String date) dateBefore,
    required TResult Function(String date) dateAfter,
    required TResult Function(String date) dateOnOrBefore,
    required TResult Function(String date) dateOnOrAfter,
    required TResult Function() dateIsEmpty,
    required TResult Function() dateIsNotEmpty,
    required TResult Function() datePastWeek,
    required TResult Function() datePastMonth,
    required TResult Function() datePastYear,
    required TResult Function() dateNextWeek,
    required TResult Function() dateNextMonth,
    required TResult Function() dateNextYear,
    required TResult Function(String userId) peopleContains,
    required TResult Function(String userId) peopleDoesNotContain,
    required TResult Function() peopleIsEmpty,
    required TResult Function() peopleIsNotEmpty,
    required TResult Function() filesIsEmpty,
    required TResult Function() filesIsNotEmpty,
    required TResult Function(String pageId) relationContains,
    required TResult Function(String pageId) relationDoesNotContain,
    required TResult Function() relationIsEmpty,
    required TResult Function() relationIsNotEmpty,
  }) {
    return peopleIsEmpty();
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function(String value)? textEquals,
    TResult? Function(String value)? textDoesNotEqual,
    TResult? Function(String value)? textContains,
    TResult? Function(String value)? textDoesNotContain,
    TResult? Function(String value)? textStartsWith,
    TResult? Function(String value)? textEndsWith,
    TResult? Function()? textIsEmpty,
    TResult? Function()? textIsNotEmpty,
    TResult? Function(double value)? numberEquals,
    TResult? Function(double value)? numberDoesNotEqual,
    TResult? Function(double value)? numberGreaterThan,
    TResult? Function(double value)? numberLessThan,
    TResult? Function(double value)? numberGreaterThanOrEqual,
    TResult? Function(double value)? numberLessThanOrEqual,
    TResult? Function()? numberIsEmpty,
    TResult? Function()? numberIsNotEmpty,
    TResult? Function(bool value)? checkboxEquals,
    TResult? Function(String value)? selectEquals,
    TResult? Function(String value)? selectDoesNotEqual,
    TResult? Function()? selectIsEmpty,
    TResult? Function()? selectIsNotEmpty,
    TResult? Function(String value)? multiSelectContains,
    TResult? Function(String value)? multiSelectDoesNotContain,
    TResult? Function()? multiSelectIsEmpty,
    TResult? Function()? multiSelectIsNotEmpty,
    TResult? Function(String date)? dateEquals,
    TResult? Function(String date)? dateBefore,
    TResult? Function(String date)? dateAfter,
    TResult? Function(String date)? dateOnOrBefore,
    TResult? Function(String date)? dateOnOrAfter,
    TResult? Function()? dateIsEmpty,
    TResult? Function()? dateIsNotEmpty,
    TResult? Function()? datePastWeek,
    TResult? Function()? datePastMonth,
    TResult? Function()? datePastYear,
    TResult? Function()? dateNextWeek,
    TResult? Function()? dateNextMonth,
    TResult? Function()? dateNextYear,
    TResult? Function(String userId)? peopleContains,
    TResult? Function(String userId)? peopleDoesNotContain,
    TResult? Function()? peopleIsEmpty,
    TResult? Function()? peopleIsNotEmpty,
    TResult? Function()? filesIsEmpty,
    TResult? Function()? filesIsNotEmpty,
    TResult? Function(String pageId)? relationContains,
    TResult? Function(String pageId)? relationDoesNotContain,
    TResult? Function()? relationIsEmpty,
    TResult? Function()? relationIsNotEmpty,
  }) {
    return peopleIsEmpty?.call();
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function(String value)? textEquals,
    TResult Function(String value)? textDoesNotEqual,
    TResult Function(String value)? textContains,
    TResult Function(String value)? textDoesNotContain,
    TResult Function(String value)? textStartsWith,
    TResult Function(String value)? textEndsWith,
    TResult Function()? textIsEmpty,
    TResult Function()? textIsNotEmpty,
    TResult Function(double value)? numberEquals,
    TResult Function(double value)? numberDoesNotEqual,
    TResult Function(double value)? numberGreaterThan,
    TResult Function(double value)? numberLessThan,
    TResult Function(double value)? numberGreaterThanOrEqual,
    TResult Function(double value)? numberLessThanOrEqual,
    TResult Function()? numberIsEmpty,
    TResult Function()? numberIsNotEmpty,
    TResult Function(bool value)? checkboxEquals,
    TResult Function(String value)? selectEquals,
    TResult Function(String value)? selectDoesNotEqual,
    TResult Function()? selectIsEmpty,
    TResult Function()? selectIsNotEmpty,
    TResult Function(String value)? multiSelectContains,
    TResult Function(String value)? multiSelectDoesNotContain,
    TResult Function()? multiSelectIsEmpty,
    TResult Function()? multiSelectIsNotEmpty,
    TResult Function(String date)? dateEquals,
    TResult Function(String date)? dateBefore,
    TResult Function(String date)? dateAfter,
    TResult Function(String date)? dateOnOrBefore,
    TResult Function(String date)? dateOnOrAfter,
    TResult Function()? dateIsEmpty,
    TResult Function()? dateIsNotEmpty,
    TResult Function()? datePastWeek,
    TResult Function()? datePastMonth,
    TResult Function()? datePastYear,
    TResult Function()? dateNextWeek,
    TResult Function()? dateNextMonth,
    TResult Function()? dateNextYear,
    TResult Function(String userId)? peopleContains,
    TResult Function(String userId)? peopleDoesNotContain,
    TResult Function()? peopleIsEmpty,
    TResult Function()? peopleIsNotEmpty,
    TResult Function()? filesIsEmpty,
    TResult Function()? filesIsNotEmpty,
    TResult Function(String pageId)? relationContains,
    TResult Function(String pageId)? relationDoesNotContain,
    TResult Function()? relationIsEmpty,
    TResult Function()? relationIsNotEmpty,
    required TResult orElse(),
  }) {
    if (peopleIsEmpty != null) {
      return peopleIsEmpty();
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(TextEqualsFilter value) textEquals,
    required TResult Function(TextDoesNotEqualFilter value) textDoesNotEqual,
    required TResult Function(TextContainsFilter value) textContains,
    required TResult Function(TextDoesNotContainFilter value)
        textDoesNotContain,
    required TResult Function(TextStartsWithFilter value) textStartsWith,
    required TResult Function(TextEndsWithFilter value) textEndsWith,
    required TResult Function(TextIsEmptyFilter value) textIsEmpty,
    required TResult Function(TextIsNotEmptyFilter value) textIsNotEmpty,
    required TResult Function(NumberEqualsFilter value) numberEquals,
    required TResult Function(NumberDoesNotEqualFilter value)
        numberDoesNotEqual,
    required TResult Function(NumberGreaterThanFilter value) numberGreaterThan,
    required TResult Function(NumberLessThanFilter value) numberLessThan,
    required TResult Function(NumberGreaterThanOrEqualFilter value)
        numberGreaterThanOrEqual,
    required TResult Function(NumberLessThanOrEqualFilter value)
        numberLessThanOrEqual,
    required TResult Function(NumberIsEmptyFilter value) numberIsEmpty,
    required TResult Function(NumberIsNotEmptyFilter value) numberIsNotEmpty,
    required TResult Function(CheckboxEqualsFilter value) checkboxEquals,
    required TResult Function(SelectEqualsFilter value) selectEquals,
    required TResult Function(SelectDoesNotEqualFilter value)
        selectDoesNotEqual,
    required TResult Function(SelectIsEmptyFilter value) selectIsEmpty,
    required TResult Function(SelectIsNotEmptyFilter value) selectIsNotEmpty,
    required TResult Function(MultiSelectContainsFilter value)
        multiSelectContains,
    required TResult Function(MultiSelectDoesNotContainFilter value)
        multiSelectDoesNotContain,
    required TResult Function(MultiSelectIsEmptyFilter value)
        multiSelectIsEmpty,
    required TResult Function(MultiSelectIsNotEmptyFilter value)
        multiSelectIsNotEmpty,
    required TResult Function(DateEqualsFilter value) dateEquals,
    required TResult Function(DateBeforeFilter value) dateBefore,
    required TResult Function(DateAfterFilter value) dateAfter,
    required TResult Function(DateOnOrBeforeFilter value) dateOnOrBefore,
    required TResult Function(DateOnOrAfterFilter value) dateOnOrAfter,
    required TResult Function(DateIsEmptyFilter value) dateIsEmpty,
    required TResult Function(DateIsNotEmptyFilter value) dateIsNotEmpty,
    required TResult Function(DatePastWeekFilter value) datePastWeek,
    required TResult Function(DatePastMonthFilter value) datePastMonth,
    required TResult Function(DatePastYearFilter value) datePastYear,
    required TResult Function(DateNextWeekFilter value) dateNextWeek,
    required TResult Function(DateNextMonthFilter value) dateNextMonth,
    required TResult Function(DateNextYearFilter value) dateNextYear,
    required TResult Function(PeopleContainsFilter value) peopleContains,
    required TResult Function(PeopleDoesNotContainFilter value)
        peopleDoesNotContain,
    required TResult Function(PeopleIsEmptyFilter value) peopleIsEmpty,
    required TResult Function(PeopleIsNotEmptyFilter value) peopleIsNotEmpty,
    required TResult Function(FilesIsEmptyFilter value) filesIsEmpty,
    required TResult Function(FilesIsNotEmptyFilter value) filesIsNotEmpty,
    required TResult Function(RelationContainsFilter value) relationContains,
    required TResult Function(RelationDoesNotContainFilter value)
        relationDoesNotContain,
    required TResult Function(RelationIsEmptyFilter value) relationIsEmpty,
    required TResult Function(RelationIsNotEmptyFilter value)
        relationIsNotEmpty,
  }) {
    return peopleIsEmpty(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(TextEqualsFilter value)? textEquals,
    TResult? Function(TextDoesNotEqualFilter value)? textDoesNotEqual,
    TResult? Function(TextContainsFilter value)? textContains,
    TResult? Function(TextDoesNotContainFilter value)? textDoesNotContain,
    TResult? Function(TextStartsWithFilter value)? textStartsWith,
    TResult? Function(TextEndsWithFilter value)? textEndsWith,
    TResult? Function(TextIsEmptyFilter value)? textIsEmpty,
    TResult? Function(TextIsNotEmptyFilter value)? textIsNotEmpty,
    TResult? Function(NumberEqualsFilter value)? numberEquals,
    TResult? Function(NumberDoesNotEqualFilter value)? numberDoesNotEqual,
    TResult? Function(NumberGreaterThanFilter value)? numberGreaterThan,
    TResult? Function(NumberLessThanFilter value)? numberLessThan,
    TResult? Function(NumberGreaterThanOrEqualFilter value)?
        numberGreaterThanOrEqual,
    TResult? Function(NumberLessThanOrEqualFilter value)? numberLessThanOrEqual,
    TResult? Function(NumberIsEmptyFilter value)? numberIsEmpty,
    TResult? Function(NumberIsNotEmptyFilter value)? numberIsNotEmpty,
    TResult? Function(CheckboxEqualsFilter value)? checkboxEquals,
    TResult? Function(SelectEqualsFilter value)? selectEquals,
    TResult? Function(SelectDoesNotEqualFilter value)? selectDoesNotEqual,
    TResult? Function(SelectIsEmptyFilter value)? selectIsEmpty,
    TResult? Function(SelectIsNotEmptyFilter value)? selectIsNotEmpty,
    TResult? Function(MultiSelectContainsFilter value)? multiSelectContains,
    TResult? Function(MultiSelectDoesNotContainFilter value)?
        multiSelectDoesNotContain,
    TResult? Function(MultiSelectIsEmptyFilter value)? multiSelectIsEmpty,
    TResult? Function(MultiSelectIsNotEmptyFilter value)? multiSelectIsNotEmpty,
    TResult? Function(DateEqualsFilter value)? dateEquals,
    TResult? Function(DateBeforeFilter value)? dateBefore,
    TResult? Function(DateAfterFilter value)? dateAfter,
    TResult? Function(DateOnOrBeforeFilter value)? dateOnOrBefore,
    TResult? Function(DateOnOrAfterFilter value)? dateOnOrAfter,
    TResult? Function(DateIsEmptyFilter value)? dateIsEmpty,
    TResult? Function(DateIsNotEmptyFilter value)? dateIsNotEmpty,
    TResult? Function(DatePastWeekFilter value)? datePastWeek,
    TResult? Function(DatePastMonthFilter value)? datePastMonth,
    TResult? Function(DatePastYearFilter value)? datePastYear,
    TResult? Function(DateNextWeekFilter value)? dateNextWeek,
    TResult? Function(DateNextMonthFilter value)? dateNextMonth,
    TResult? Function(DateNextYearFilter value)? dateNextYear,
    TResult? Function(PeopleContainsFilter value)? peopleContains,
    TResult? Function(PeopleDoesNotContainFilter value)? peopleDoesNotContain,
    TResult? Function(PeopleIsEmptyFilter value)? peopleIsEmpty,
    TResult? Function(PeopleIsNotEmptyFilter value)? peopleIsNotEmpty,
    TResult? Function(FilesIsEmptyFilter value)? filesIsEmpty,
    TResult? Function(FilesIsNotEmptyFilter value)? filesIsNotEmpty,
    TResult? Function(RelationContainsFilter value)? relationContains,
    TResult? Function(RelationDoesNotContainFilter value)?
        relationDoesNotContain,
    TResult? Function(RelationIsEmptyFilter value)? relationIsEmpty,
    TResult? Function(RelationIsNotEmptyFilter value)? relationIsNotEmpty,
  }) {
    return peopleIsEmpty?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(TextEqualsFilter value)? textEquals,
    TResult Function(TextDoesNotEqualFilter value)? textDoesNotEqual,
    TResult Function(TextContainsFilter value)? textContains,
    TResult Function(TextDoesNotContainFilter value)? textDoesNotContain,
    TResult Function(TextStartsWithFilter value)? textStartsWith,
    TResult Function(TextEndsWithFilter value)? textEndsWith,
    TResult Function(TextIsEmptyFilter value)? textIsEmpty,
    TResult Function(TextIsNotEmptyFilter value)? textIsNotEmpty,
    TResult Function(NumberEqualsFilter value)? numberEquals,
    TResult Function(NumberDoesNotEqualFilter value)? numberDoesNotEqual,
    TResult Function(NumberGreaterThanFilter value)? numberGreaterThan,
    TResult Function(NumberLessThanFilter value)? numberLessThan,
    TResult Function(NumberGreaterThanOrEqualFilter value)?
        numberGreaterThanOrEqual,
    TResult Function(NumberLessThanOrEqualFilter value)? numberLessThanOrEqual,
    TResult Function(NumberIsEmptyFilter value)? numberIsEmpty,
    TResult Function(NumberIsNotEmptyFilter value)? numberIsNotEmpty,
    TResult Function(CheckboxEqualsFilter value)? checkboxEquals,
    TResult Function(SelectEqualsFilter value)? selectEquals,
    TResult Function(SelectDoesNotEqualFilter value)? selectDoesNotEqual,
    TResult Function(SelectIsEmptyFilter value)? selectIsEmpty,
    TResult Function(SelectIsNotEmptyFilter value)? selectIsNotEmpty,
    TResult Function(MultiSelectContainsFilter value)? multiSelectContains,
    TResult Function(MultiSelectDoesNotContainFilter value)?
        multiSelectDoesNotContain,
    TResult Function(MultiSelectIsEmptyFilter value)? multiSelectIsEmpty,
    TResult Function(MultiSelectIsNotEmptyFilter value)? multiSelectIsNotEmpty,
    TResult Function(DateEqualsFilter value)? dateEquals,
    TResult Function(DateBeforeFilter value)? dateBefore,
    TResult Function(DateAfterFilter value)? dateAfter,
    TResult Function(DateOnOrBeforeFilter value)? dateOnOrBefore,
    TResult Function(DateOnOrAfterFilter value)? dateOnOrAfter,
    TResult Function(DateIsEmptyFilter value)? dateIsEmpty,
    TResult Function(DateIsNotEmptyFilter value)? dateIsNotEmpty,
    TResult Function(DatePastWeekFilter value)? datePastWeek,
    TResult Function(DatePastMonthFilter value)? datePastMonth,
    TResult Function(DatePastYearFilter value)? datePastYear,
    TResult Function(DateNextWeekFilter value)? dateNextWeek,
    TResult Function(DateNextMonthFilter value)? dateNextMonth,
    TResult Function(DateNextYearFilter value)? dateNextYear,
    TResult Function(PeopleContainsFilter value)? peopleContains,
    TResult Function(PeopleDoesNotContainFilter value)? peopleDoesNotContain,
    TResult Function(PeopleIsEmptyFilter value)? peopleIsEmpty,
    TResult Function(PeopleIsNotEmptyFilter value)? peopleIsNotEmpty,
    TResult Function(FilesIsEmptyFilter value)? filesIsEmpty,
    TResult Function(FilesIsNotEmptyFilter value)? filesIsNotEmpty,
    TResult Function(RelationContainsFilter value)? relationContains,
    TResult Function(RelationDoesNotContainFilter value)?
        relationDoesNotContain,
    TResult Function(RelationIsEmptyFilter value)? relationIsEmpty,
    TResult Function(RelationIsNotEmptyFilter value)? relationIsNotEmpty,
    required TResult orElse(),
  }) {
    if (peopleIsEmpty != null) {
      return peopleIsEmpty(this);
    }
    return orElse();
  }
}

abstract class PeopleIsEmptyFilter extends PropertyFilter {
  const factory PeopleIsEmptyFilter() = _$PeopleIsEmptyFilterImpl;
  const PeopleIsEmptyFilter._() : super._();
}

/// @nodoc
abstract class _$$PeopleIsNotEmptyFilterImplCopyWith<$Res> {
  factory _$$PeopleIsNotEmptyFilterImplCopyWith(
          _$PeopleIsNotEmptyFilterImpl value,
          $Res Function(_$PeopleIsNotEmptyFilterImpl) then) =
      __$$PeopleIsNotEmptyFilterImplCopyWithImpl<$Res>;
}

/// @nodoc
class __$$PeopleIsNotEmptyFilterImplCopyWithImpl<$Res>
    extends _$PropertyFilterCopyWithImpl<$Res, _$PeopleIsNotEmptyFilterImpl>
    implements _$$PeopleIsNotEmptyFilterImplCopyWith<$Res> {
  __$$PeopleIsNotEmptyFilterImplCopyWithImpl(
      _$PeopleIsNotEmptyFilterImpl _value,
      $Res Function(_$PeopleIsNotEmptyFilterImpl) _then)
      : super(_value, _then);

  /// Create a copy of PropertyFilter
  /// with the given fields replaced by the non-null parameter values.
}

/// @nodoc

class _$PeopleIsNotEmptyFilterImpl extends PeopleIsNotEmptyFilter {
  const _$PeopleIsNotEmptyFilterImpl() : super._();

  @override
  String toString() {
    return 'PropertyFilter.peopleIsNotEmpty()';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$PeopleIsNotEmptyFilterImpl);
  }

  @override
  int get hashCode => runtimeType.hashCode;

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function(String value) textEquals,
    required TResult Function(String value) textDoesNotEqual,
    required TResult Function(String value) textContains,
    required TResult Function(String value) textDoesNotContain,
    required TResult Function(String value) textStartsWith,
    required TResult Function(String value) textEndsWith,
    required TResult Function() textIsEmpty,
    required TResult Function() textIsNotEmpty,
    required TResult Function(double value) numberEquals,
    required TResult Function(double value) numberDoesNotEqual,
    required TResult Function(double value) numberGreaterThan,
    required TResult Function(double value) numberLessThan,
    required TResult Function(double value) numberGreaterThanOrEqual,
    required TResult Function(double value) numberLessThanOrEqual,
    required TResult Function() numberIsEmpty,
    required TResult Function() numberIsNotEmpty,
    required TResult Function(bool value) checkboxEquals,
    required TResult Function(String value) selectEquals,
    required TResult Function(String value) selectDoesNotEqual,
    required TResult Function() selectIsEmpty,
    required TResult Function() selectIsNotEmpty,
    required TResult Function(String value) multiSelectContains,
    required TResult Function(String value) multiSelectDoesNotContain,
    required TResult Function() multiSelectIsEmpty,
    required TResult Function() multiSelectIsNotEmpty,
    required TResult Function(String date) dateEquals,
    required TResult Function(String date) dateBefore,
    required TResult Function(String date) dateAfter,
    required TResult Function(String date) dateOnOrBefore,
    required TResult Function(String date) dateOnOrAfter,
    required TResult Function() dateIsEmpty,
    required TResult Function() dateIsNotEmpty,
    required TResult Function() datePastWeek,
    required TResult Function() datePastMonth,
    required TResult Function() datePastYear,
    required TResult Function() dateNextWeek,
    required TResult Function() dateNextMonth,
    required TResult Function() dateNextYear,
    required TResult Function(String userId) peopleContains,
    required TResult Function(String userId) peopleDoesNotContain,
    required TResult Function() peopleIsEmpty,
    required TResult Function() peopleIsNotEmpty,
    required TResult Function() filesIsEmpty,
    required TResult Function() filesIsNotEmpty,
    required TResult Function(String pageId) relationContains,
    required TResult Function(String pageId) relationDoesNotContain,
    required TResult Function() relationIsEmpty,
    required TResult Function() relationIsNotEmpty,
  }) {
    return peopleIsNotEmpty();
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function(String value)? textEquals,
    TResult? Function(String value)? textDoesNotEqual,
    TResult? Function(String value)? textContains,
    TResult? Function(String value)? textDoesNotContain,
    TResult? Function(String value)? textStartsWith,
    TResult? Function(String value)? textEndsWith,
    TResult? Function()? textIsEmpty,
    TResult? Function()? textIsNotEmpty,
    TResult? Function(double value)? numberEquals,
    TResult? Function(double value)? numberDoesNotEqual,
    TResult? Function(double value)? numberGreaterThan,
    TResult? Function(double value)? numberLessThan,
    TResult? Function(double value)? numberGreaterThanOrEqual,
    TResult? Function(double value)? numberLessThanOrEqual,
    TResult? Function()? numberIsEmpty,
    TResult? Function()? numberIsNotEmpty,
    TResult? Function(bool value)? checkboxEquals,
    TResult? Function(String value)? selectEquals,
    TResult? Function(String value)? selectDoesNotEqual,
    TResult? Function()? selectIsEmpty,
    TResult? Function()? selectIsNotEmpty,
    TResult? Function(String value)? multiSelectContains,
    TResult? Function(String value)? multiSelectDoesNotContain,
    TResult? Function()? multiSelectIsEmpty,
    TResult? Function()? multiSelectIsNotEmpty,
    TResult? Function(String date)? dateEquals,
    TResult? Function(String date)? dateBefore,
    TResult? Function(String date)? dateAfter,
    TResult? Function(String date)? dateOnOrBefore,
    TResult? Function(String date)? dateOnOrAfter,
    TResult? Function()? dateIsEmpty,
    TResult? Function()? dateIsNotEmpty,
    TResult? Function()? datePastWeek,
    TResult? Function()? datePastMonth,
    TResult? Function()? datePastYear,
    TResult? Function()? dateNextWeek,
    TResult? Function()? dateNextMonth,
    TResult? Function()? dateNextYear,
    TResult? Function(String userId)? peopleContains,
    TResult? Function(String userId)? peopleDoesNotContain,
    TResult? Function()? peopleIsEmpty,
    TResult? Function()? peopleIsNotEmpty,
    TResult? Function()? filesIsEmpty,
    TResult? Function()? filesIsNotEmpty,
    TResult? Function(String pageId)? relationContains,
    TResult? Function(String pageId)? relationDoesNotContain,
    TResult? Function()? relationIsEmpty,
    TResult? Function()? relationIsNotEmpty,
  }) {
    return peopleIsNotEmpty?.call();
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function(String value)? textEquals,
    TResult Function(String value)? textDoesNotEqual,
    TResult Function(String value)? textContains,
    TResult Function(String value)? textDoesNotContain,
    TResult Function(String value)? textStartsWith,
    TResult Function(String value)? textEndsWith,
    TResult Function()? textIsEmpty,
    TResult Function()? textIsNotEmpty,
    TResult Function(double value)? numberEquals,
    TResult Function(double value)? numberDoesNotEqual,
    TResult Function(double value)? numberGreaterThan,
    TResult Function(double value)? numberLessThan,
    TResult Function(double value)? numberGreaterThanOrEqual,
    TResult Function(double value)? numberLessThanOrEqual,
    TResult Function()? numberIsEmpty,
    TResult Function()? numberIsNotEmpty,
    TResult Function(bool value)? checkboxEquals,
    TResult Function(String value)? selectEquals,
    TResult Function(String value)? selectDoesNotEqual,
    TResult Function()? selectIsEmpty,
    TResult Function()? selectIsNotEmpty,
    TResult Function(String value)? multiSelectContains,
    TResult Function(String value)? multiSelectDoesNotContain,
    TResult Function()? multiSelectIsEmpty,
    TResult Function()? multiSelectIsNotEmpty,
    TResult Function(String date)? dateEquals,
    TResult Function(String date)? dateBefore,
    TResult Function(String date)? dateAfter,
    TResult Function(String date)? dateOnOrBefore,
    TResult Function(String date)? dateOnOrAfter,
    TResult Function()? dateIsEmpty,
    TResult Function()? dateIsNotEmpty,
    TResult Function()? datePastWeek,
    TResult Function()? datePastMonth,
    TResult Function()? datePastYear,
    TResult Function()? dateNextWeek,
    TResult Function()? dateNextMonth,
    TResult Function()? dateNextYear,
    TResult Function(String userId)? peopleContains,
    TResult Function(String userId)? peopleDoesNotContain,
    TResult Function()? peopleIsEmpty,
    TResult Function()? peopleIsNotEmpty,
    TResult Function()? filesIsEmpty,
    TResult Function()? filesIsNotEmpty,
    TResult Function(String pageId)? relationContains,
    TResult Function(String pageId)? relationDoesNotContain,
    TResult Function()? relationIsEmpty,
    TResult Function()? relationIsNotEmpty,
    required TResult orElse(),
  }) {
    if (peopleIsNotEmpty != null) {
      return peopleIsNotEmpty();
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(TextEqualsFilter value) textEquals,
    required TResult Function(TextDoesNotEqualFilter value) textDoesNotEqual,
    required TResult Function(TextContainsFilter value) textContains,
    required TResult Function(TextDoesNotContainFilter value)
        textDoesNotContain,
    required TResult Function(TextStartsWithFilter value) textStartsWith,
    required TResult Function(TextEndsWithFilter value) textEndsWith,
    required TResult Function(TextIsEmptyFilter value) textIsEmpty,
    required TResult Function(TextIsNotEmptyFilter value) textIsNotEmpty,
    required TResult Function(NumberEqualsFilter value) numberEquals,
    required TResult Function(NumberDoesNotEqualFilter value)
        numberDoesNotEqual,
    required TResult Function(NumberGreaterThanFilter value) numberGreaterThan,
    required TResult Function(NumberLessThanFilter value) numberLessThan,
    required TResult Function(NumberGreaterThanOrEqualFilter value)
        numberGreaterThanOrEqual,
    required TResult Function(NumberLessThanOrEqualFilter value)
        numberLessThanOrEqual,
    required TResult Function(NumberIsEmptyFilter value) numberIsEmpty,
    required TResult Function(NumberIsNotEmptyFilter value) numberIsNotEmpty,
    required TResult Function(CheckboxEqualsFilter value) checkboxEquals,
    required TResult Function(SelectEqualsFilter value) selectEquals,
    required TResult Function(SelectDoesNotEqualFilter value)
        selectDoesNotEqual,
    required TResult Function(SelectIsEmptyFilter value) selectIsEmpty,
    required TResult Function(SelectIsNotEmptyFilter value) selectIsNotEmpty,
    required TResult Function(MultiSelectContainsFilter value)
        multiSelectContains,
    required TResult Function(MultiSelectDoesNotContainFilter value)
        multiSelectDoesNotContain,
    required TResult Function(MultiSelectIsEmptyFilter value)
        multiSelectIsEmpty,
    required TResult Function(MultiSelectIsNotEmptyFilter value)
        multiSelectIsNotEmpty,
    required TResult Function(DateEqualsFilter value) dateEquals,
    required TResult Function(DateBeforeFilter value) dateBefore,
    required TResult Function(DateAfterFilter value) dateAfter,
    required TResult Function(DateOnOrBeforeFilter value) dateOnOrBefore,
    required TResult Function(DateOnOrAfterFilter value) dateOnOrAfter,
    required TResult Function(DateIsEmptyFilter value) dateIsEmpty,
    required TResult Function(DateIsNotEmptyFilter value) dateIsNotEmpty,
    required TResult Function(DatePastWeekFilter value) datePastWeek,
    required TResult Function(DatePastMonthFilter value) datePastMonth,
    required TResult Function(DatePastYearFilter value) datePastYear,
    required TResult Function(DateNextWeekFilter value) dateNextWeek,
    required TResult Function(DateNextMonthFilter value) dateNextMonth,
    required TResult Function(DateNextYearFilter value) dateNextYear,
    required TResult Function(PeopleContainsFilter value) peopleContains,
    required TResult Function(PeopleDoesNotContainFilter value)
        peopleDoesNotContain,
    required TResult Function(PeopleIsEmptyFilter value) peopleIsEmpty,
    required TResult Function(PeopleIsNotEmptyFilter value) peopleIsNotEmpty,
    required TResult Function(FilesIsEmptyFilter value) filesIsEmpty,
    required TResult Function(FilesIsNotEmptyFilter value) filesIsNotEmpty,
    required TResult Function(RelationContainsFilter value) relationContains,
    required TResult Function(RelationDoesNotContainFilter value)
        relationDoesNotContain,
    required TResult Function(RelationIsEmptyFilter value) relationIsEmpty,
    required TResult Function(RelationIsNotEmptyFilter value)
        relationIsNotEmpty,
  }) {
    return peopleIsNotEmpty(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(TextEqualsFilter value)? textEquals,
    TResult? Function(TextDoesNotEqualFilter value)? textDoesNotEqual,
    TResult? Function(TextContainsFilter value)? textContains,
    TResult? Function(TextDoesNotContainFilter value)? textDoesNotContain,
    TResult? Function(TextStartsWithFilter value)? textStartsWith,
    TResult? Function(TextEndsWithFilter value)? textEndsWith,
    TResult? Function(TextIsEmptyFilter value)? textIsEmpty,
    TResult? Function(TextIsNotEmptyFilter value)? textIsNotEmpty,
    TResult? Function(NumberEqualsFilter value)? numberEquals,
    TResult? Function(NumberDoesNotEqualFilter value)? numberDoesNotEqual,
    TResult? Function(NumberGreaterThanFilter value)? numberGreaterThan,
    TResult? Function(NumberLessThanFilter value)? numberLessThan,
    TResult? Function(NumberGreaterThanOrEqualFilter value)?
        numberGreaterThanOrEqual,
    TResult? Function(NumberLessThanOrEqualFilter value)? numberLessThanOrEqual,
    TResult? Function(NumberIsEmptyFilter value)? numberIsEmpty,
    TResult? Function(NumberIsNotEmptyFilter value)? numberIsNotEmpty,
    TResult? Function(CheckboxEqualsFilter value)? checkboxEquals,
    TResult? Function(SelectEqualsFilter value)? selectEquals,
    TResult? Function(SelectDoesNotEqualFilter value)? selectDoesNotEqual,
    TResult? Function(SelectIsEmptyFilter value)? selectIsEmpty,
    TResult? Function(SelectIsNotEmptyFilter value)? selectIsNotEmpty,
    TResult? Function(MultiSelectContainsFilter value)? multiSelectContains,
    TResult? Function(MultiSelectDoesNotContainFilter value)?
        multiSelectDoesNotContain,
    TResult? Function(MultiSelectIsEmptyFilter value)? multiSelectIsEmpty,
    TResult? Function(MultiSelectIsNotEmptyFilter value)? multiSelectIsNotEmpty,
    TResult? Function(DateEqualsFilter value)? dateEquals,
    TResult? Function(DateBeforeFilter value)? dateBefore,
    TResult? Function(DateAfterFilter value)? dateAfter,
    TResult? Function(DateOnOrBeforeFilter value)? dateOnOrBefore,
    TResult? Function(DateOnOrAfterFilter value)? dateOnOrAfter,
    TResult? Function(DateIsEmptyFilter value)? dateIsEmpty,
    TResult? Function(DateIsNotEmptyFilter value)? dateIsNotEmpty,
    TResult? Function(DatePastWeekFilter value)? datePastWeek,
    TResult? Function(DatePastMonthFilter value)? datePastMonth,
    TResult? Function(DatePastYearFilter value)? datePastYear,
    TResult? Function(DateNextWeekFilter value)? dateNextWeek,
    TResult? Function(DateNextMonthFilter value)? dateNextMonth,
    TResult? Function(DateNextYearFilter value)? dateNextYear,
    TResult? Function(PeopleContainsFilter value)? peopleContains,
    TResult? Function(PeopleDoesNotContainFilter value)? peopleDoesNotContain,
    TResult? Function(PeopleIsEmptyFilter value)? peopleIsEmpty,
    TResult? Function(PeopleIsNotEmptyFilter value)? peopleIsNotEmpty,
    TResult? Function(FilesIsEmptyFilter value)? filesIsEmpty,
    TResult? Function(FilesIsNotEmptyFilter value)? filesIsNotEmpty,
    TResult? Function(RelationContainsFilter value)? relationContains,
    TResult? Function(RelationDoesNotContainFilter value)?
        relationDoesNotContain,
    TResult? Function(RelationIsEmptyFilter value)? relationIsEmpty,
    TResult? Function(RelationIsNotEmptyFilter value)? relationIsNotEmpty,
  }) {
    return peopleIsNotEmpty?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(TextEqualsFilter value)? textEquals,
    TResult Function(TextDoesNotEqualFilter value)? textDoesNotEqual,
    TResult Function(TextContainsFilter value)? textContains,
    TResult Function(TextDoesNotContainFilter value)? textDoesNotContain,
    TResult Function(TextStartsWithFilter value)? textStartsWith,
    TResult Function(TextEndsWithFilter value)? textEndsWith,
    TResult Function(TextIsEmptyFilter value)? textIsEmpty,
    TResult Function(TextIsNotEmptyFilter value)? textIsNotEmpty,
    TResult Function(NumberEqualsFilter value)? numberEquals,
    TResult Function(NumberDoesNotEqualFilter value)? numberDoesNotEqual,
    TResult Function(NumberGreaterThanFilter value)? numberGreaterThan,
    TResult Function(NumberLessThanFilter value)? numberLessThan,
    TResult Function(NumberGreaterThanOrEqualFilter value)?
        numberGreaterThanOrEqual,
    TResult Function(NumberLessThanOrEqualFilter value)? numberLessThanOrEqual,
    TResult Function(NumberIsEmptyFilter value)? numberIsEmpty,
    TResult Function(NumberIsNotEmptyFilter value)? numberIsNotEmpty,
    TResult Function(CheckboxEqualsFilter value)? checkboxEquals,
    TResult Function(SelectEqualsFilter value)? selectEquals,
    TResult Function(SelectDoesNotEqualFilter value)? selectDoesNotEqual,
    TResult Function(SelectIsEmptyFilter value)? selectIsEmpty,
    TResult Function(SelectIsNotEmptyFilter value)? selectIsNotEmpty,
    TResult Function(MultiSelectContainsFilter value)? multiSelectContains,
    TResult Function(MultiSelectDoesNotContainFilter value)?
        multiSelectDoesNotContain,
    TResult Function(MultiSelectIsEmptyFilter value)? multiSelectIsEmpty,
    TResult Function(MultiSelectIsNotEmptyFilter value)? multiSelectIsNotEmpty,
    TResult Function(DateEqualsFilter value)? dateEquals,
    TResult Function(DateBeforeFilter value)? dateBefore,
    TResult Function(DateAfterFilter value)? dateAfter,
    TResult Function(DateOnOrBeforeFilter value)? dateOnOrBefore,
    TResult Function(DateOnOrAfterFilter value)? dateOnOrAfter,
    TResult Function(DateIsEmptyFilter value)? dateIsEmpty,
    TResult Function(DateIsNotEmptyFilter value)? dateIsNotEmpty,
    TResult Function(DatePastWeekFilter value)? datePastWeek,
    TResult Function(DatePastMonthFilter value)? datePastMonth,
    TResult Function(DatePastYearFilter value)? datePastYear,
    TResult Function(DateNextWeekFilter value)? dateNextWeek,
    TResult Function(DateNextMonthFilter value)? dateNextMonth,
    TResult Function(DateNextYearFilter value)? dateNextYear,
    TResult Function(PeopleContainsFilter value)? peopleContains,
    TResult Function(PeopleDoesNotContainFilter value)? peopleDoesNotContain,
    TResult Function(PeopleIsEmptyFilter value)? peopleIsEmpty,
    TResult Function(PeopleIsNotEmptyFilter value)? peopleIsNotEmpty,
    TResult Function(FilesIsEmptyFilter value)? filesIsEmpty,
    TResult Function(FilesIsNotEmptyFilter value)? filesIsNotEmpty,
    TResult Function(RelationContainsFilter value)? relationContains,
    TResult Function(RelationDoesNotContainFilter value)?
        relationDoesNotContain,
    TResult Function(RelationIsEmptyFilter value)? relationIsEmpty,
    TResult Function(RelationIsNotEmptyFilter value)? relationIsNotEmpty,
    required TResult orElse(),
  }) {
    if (peopleIsNotEmpty != null) {
      return peopleIsNotEmpty(this);
    }
    return orElse();
  }
}

abstract class PeopleIsNotEmptyFilter extends PropertyFilter {
  const factory PeopleIsNotEmptyFilter() = _$PeopleIsNotEmptyFilterImpl;
  const PeopleIsNotEmptyFilter._() : super._();
}

/// @nodoc
abstract class _$$FilesIsEmptyFilterImplCopyWith<$Res> {
  factory _$$FilesIsEmptyFilterImplCopyWith(_$FilesIsEmptyFilterImpl value,
          $Res Function(_$FilesIsEmptyFilterImpl) then) =
      __$$FilesIsEmptyFilterImplCopyWithImpl<$Res>;
}

/// @nodoc
class __$$FilesIsEmptyFilterImplCopyWithImpl<$Res>
    extends _$PropertyFilterCopyWithImpl<$Res, _$FilesIsEmptyFilterImpl>
    implements _$$FilesIsEmptyFilterImplCopyWith<$Res> {
  __$$FilesIsEmptyFilterImplCopyWithImpl(_$FilesIsEmptyFilterImpl _value,
      $Res Function(_$FilesIsEmptyFilterImpl) _then)
      : super(_value, _then);

  /// Create a copy of PropertyFilter
  /// with the given fields replaced by the non-null parameter values.
}

/// @nodoc

class _$FilesIsEmptyFilterImpl extends FilesIsEmptyFilter {
  const _$FilesIsEmptyFilterImpl() : super._();

  @override
  String toString() {
    return 'PropertyFilter.filesIsEmpty()';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType && other is _$FilesIsEmptyFilterImpl);
  }

  @override
  int get hashCode => runtimeType.hashCode;

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function(String value) textEquals,
    required TResult Function(String value) textDoesNotEqual,
    required TResult Function(String value) textContains,
    required TResult Function(String value) textDoesNotContain,
    required TResult Function(String value) textStartsWith,
    required TResult Function(String value) textEndsWith,
    required TResult Function() textIsEmpty,
    required TResult Function() textIsNotEmpty,
    required TResult Function(double value) numberEquals,
    required TResult Function(double value) numberDoesNotEqual,
    required TResult Function(double value) numberGreaterThan,
    required TResult Function(double value) numberLessThan,
    required TResult Function(double value) numberGreaterThanOrEqual,
    required TResult Function(double value) numberLessThanOrEqual,
    required TResult Function() numberIsEmpty,
    required TResult Function() numberIsNotEmpty,
    required TResult Function(bool value) checkboxEquals,
    required TResult Function(String value) selectEquals,
    required TResult Function(String value) selectDoesNotEqual,
    required TResult Function() selectIsEmpty,
    required TResult Function() selectIsNotEmpty,
    required TResult Function(String value) multiSelectContains,
    required TResult Function(String value) multiSelectDoesNotContain,
    required TResult Function() multiSelectIsEmpty,
    required TResult Function() multiSelectIsNotEmpty,
    required TResult Function(String date) dateEquals,
    required TResult Function(String date) dateBefore,
    required TResult Function(String date) dateAfter,
    required TResult Function(String date) dateOnOrBefore,
    required TResult Function(String date) dateOnOrAfter,
    required TResult Function() dateIsEmpty,
    required TResult Function() dateIsNotEmpty,
    required TResult Function() datePastWeek,
    required TResult Function() datePastMonth,
    required TResult Function() datePastYear,
    required TResult Function() dateNextWeek,
    required TResult Function() dateNextMonth,
    required TResult Function() dateNextYear,
    required TResult Function(String userId) peopleContains,
    required TResult Function(String userId) peopleDoesNotContain,
    required TResult Function() peopleIsEmpty,
    required TResult Function() peopleIsNotEmpty,
    required TResult Function() filesIsEmpty,
    required TResult Function() filesIsNotEmpty,
    required TResult Function(String pageId) relationContains,
    required TResult Function(String pageId) relationDoesNotContain,
    required TResult Function() relationIsEmpty,
    required TResult Function() relationIsNotEmpty,
  }) {
    return filesIsEmpty();
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function(String value)? textEquals,
    TResult? Function(String value)? textDoesNotEqual,
    TResult? Function(String value)? textContains,
    TResult? Function(String value)? textDoesNotContain,
    TResult? Function(String value)? textStartsWith,
    TResult? Function(String value)? textEndsWith,
    TResult? Function()? textIsEmpty,
    TResult? Function()? textIsNotEmpty,
    TResult? Function(double value)? numberEquals,
    TResult? Function(double value)? numberDoesNotEqual,
    TResult? Function(double value)? numberGreaterThan,
    TResult? Function(double value)? numberLessThan,
    TResult? Function(double value)? numberGreaterThanOrEqual,
    TResult? Function(double value)? numberLessThanOrEqual,
    TResult? Function()? numberIsEmpty,
    TResult? Function()? numberIsNotEmpty,
    TResult? Function(bool value)? checkboxEquals,
    TResult? Function(String value)? selectEquals,
    TResult? Function(String value)? selectDoesNotEqual,
    TResult? Function()? selectIsEmpty,
    TResult? Function()? selectIsNotEmpty,
    TResult? Function(String value)? multiSelectContains,
    TResult? Function(String value)? multiSelectDoesNotContain,
    TResult? Function()? multiSelectIsEmpty,
    TResult? Function()? multiSelectIsNotEmpty,
    TResult? Function(String date)? dateEquals,
    TResult? Function(String date)? dateBefore,
    TResult? Function(String date)? dateAfter,
    TResult? Function(String date)? dateOnOrBefore,
    TResult? Function(String date)? dateOnOrAfter,
    TResult? Function()? dateIsEmpty,
    TResult? Function()? dateIsNotEmpty,
    TResult? Function()? datePastWeek,
    TResult? Function()? datePastMonth,
    TResult? Function()? datePastYear,
    TResult? Function()? dateNextWeek,
    TResult? Function()? dateNextMonth,
    TResult? Function()? dateNextYear,
    TResult? Function(String userId)? peopleContains,
    TResult? Function(String userId)? peopleDoesNotContain,
    TResult? Function()? peopleIsEmpty,
    TResult? Function()? peopleIsNotEmpty,
    TResult? Function()? filesIsEmpty,
    TResult? Function()? filesIsNotEmpty,
    TResult? Function(String pageId)? relationContains,
    TResult? Function(String pageId)? relationDoesNotContain,
    TResult? Function()? relationIsEmpty,
    TResult? Function()? relationIsNotEmpty,
  }) {
    return filesIsEmpty?.call();
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function(String value)? textEquals,
    TResult Function(String value)? textDoesNotEqual,
    TResult Function(String value)? textContains,
    TResult Function(String value)? textDoesNotContain,
    TResult Function(String value)? textStartsWith,
    TResult Function(String value)? textEndsWith,
    TResult Function()? textIsEmpty,
    TResult Function()? textIsNotEmpty,
    TResult Function(double value)? numberEquals,
    TResult Function(double value)? numberDoesNotEqual,
    TResult Function(double value)? numberGreaterThan,
    TResult Function(double value)? numberLessThan,
    TResult Function(double value)? numberGreaterThanOrEqual,
    TResult Function(double value)? numberLessThanOrEqual,
    TResult Function()? numberIsEmpty,
    TResult Function()? numberIsNotEmpty,
    TResult Function(bool value)? checkboxEquals,
    TResult Function(String value)? selectEquals,
    TResult Function(String value)? selectDoesNotEqual,
    TResult Function()? selectIsEmpty,
    TResult Function()? selectIsNotEmpty,
    TResult Function(String value)? multiSelectContains,
    TResult Function(String value)? multiSelectDoesNotContain,
    TResult Function()? multiSelectIsEmpty,
    TResult Function()? multiSelectIsNotEmpty,
    TResult Function(String date)? dateEquals,
    TResult Function(String date)? dateBefore,
    TResult Function(String date)? dateAfter,
    TResult Function(String date)? dateOnOrBefore,
    TResult Function(String date)? dateOnOrAfter,
    TResult Function()? dateIsEmpty,
    TResult Function()? dateIsNotEmpty,
    TResult Function()? datePastWeek,
    TResult Function()? datePastMonth,
    TResult Function()? datePastYear,
    TResult Function()? dateNextWeek,
    TResult Function()? dateNextMonth,
    TResult Function()? dateNextYear,
    TResult Function(String userId)? peopleContains,
    TResult Function(String userId)? peopleDoesNotContain,
    TResult Function()? peopleIsEmpty,
    TResult Function()? peopleIsNotEmpty,
    TResult Function()? filesIsEmpty,
    TResult Function()? filesIsNotEmpty,
    TResult Function(String pageId)? relationContains,
    TResult Function(String pageId)? relationDoesNotContain,
    TResult Function()? relationIsEmpty,
    TResult Function()? relationIsNotEmpty,
    required TResult orElse(),
  }) {
    if (filesIsEmpty != null) {
      return filesIsEmpty();
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(TextEqualsFilter value) textEquals,
    required TResult Function(TextDoesNotEqualFilter value) textDoesNotEqual,
    required TResult Function(TextContainsFilter value) textContains,
    required TResult Function(TextDoesNotContainFilter value)
        textDoesNotContain,
    required TResult Function(TextStartsWithFilter value) textStartsWith,
    required TResult Function(TextEndsWithFilter value) textEndsWith,
    required TResult Function(TextIsEmptyFilter value) textIsEmpty,
    required TResult Function(TextIsNotEmptyFilter value) textIsNotEmpty,
    required TResult Function(NumberEqualsFilter value) numberEquals,
    required TResult Function(NumberDoesNotEqualFilter value)
        numberDoesNotEqual,
    required TResult Function(NumberGreaterThanFilter value) numberGreaterThan,
    required TResult Function(NumberLessThanFilter value) numberLessThan,
    required TResult Function(NumberGreaterThanOrEqualFilter value)
        numberGreaterThanOrEqual,
    required TResult Function(NumberLessThanOrEqualFilter value)
        numberLessThanOrEqual,
    required TResult Function(NumberIsEmptyFilter value) numberIsEmpty,
    required TResult Function(NumberIsNotEmptyFilter value) numberIsNotEmpty,
    required TResult Function(CheckboxEqualsFilter value) checkboxEquals,
    required TResult Function(SelectEqualsFilter value) selectEquals,
    required TResult Function(SelectDoesNotEqualFilter value)
        selectDoesNotEqual,
    required TResult Function(SelectIsEmptyFilter value) selectIsEmpty,
    required TResult Function(SelectIsNotEmptyFilter value) selectIsNotEmpty,
    required TResult Function(MultiSelectContainsFilter value)
        multiSelectContains,
    required TResult Function(MultiSelectDoesNotContainFilter value)
        multiSelectDoesNotContain,
    required TResult Function(MultiSelectIsEmptyFilter value)
        multiSelectIsEmpty,
    required TResult Function(MultiSelectIsNotEmptyFilter value)
        multiSelectIsNotEmpty,
    required TResult Function(DateEqualsFilter value) dateEquals,
    required TResult Function(DateBeforeFilter value) dateBefore,
    required TResult Function(DateAfterFilter value) dateAfter,
    required TResult Function(DateOnOrBeforeFilter value) dateOnOrBefore,
    required TResult Function(DateOnOrAfterFilter value) dateOnOrAfter,
    required TResult Function(DateIsEmptyFilter value) dateIsEmpty,
    required TResult Function(DateIsNotEmptyFilter value) dateIsNotEmpty,
    required TResult Function(DatePastWeekFilter value) datePastWeek,
    required TResult Function(DatePastMonthFilter value) datePastMonth,
    required TResult Function(DatePastYearFilter value) datePastYear,
    required TResult Function(DateNextWeekFilter value) dateNextWeek,
    required TResult Function(DateNextMonthFilter value) dateNextMonth,
    required TResult Function(DateNextYearFilter value) dateNextYear,
    required TResult Function(PeopleContainsFilter value) peopleContains,
    required TResult Function(PeopleDoesNotContainFilter value)
        peopleDoesNotContain,
    required TResult Function(PeopleIsEmptyFilter value) peopleIsEmpty,
    required TResult Function(PeopleIsNotEmptyFilter value) peopleIsNotEmpty,
    required TResult Function(FilesIsEmptyFilter value) filesIsEmpty,
    required TResult Function(FilesIsNotEmptyFilter value) filesIsNotEmpty,
    required TResult Function(RelationContainsFilter value) relationContains,
    required TResult Function(RelationDoesNotContainFilter value)
        relationDoesNotContain,
    required TResult Function(RelationIsEmptyFilter value) relationIsEmpty,
    required TResult Function(RelationIsNotEmptyFilter value)
        relationIsNotEmpty,
  }) {
    return filesIsEmpty(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(TextEqualsFilter value)? textEquals,
    TResult? Function(TextDoesNotEqualFilter value)? textDoesNotEqual,
    TResult? Function(TextContainsFilter value)? textContains,
    TResult? Function(TextDoesNotContainFilter value)? textDoesNotContain,
    TResult? Function(TextStartsWithFilter value)? textStartsWith,
    TResult? Function(TextEndsWithFilter value)? textEndsWith,
    TResult? Function(TextIsEmptyFilter value)? textIsEmpty,
    TResult? Function(TextIsNotEmptyFilter value)? textIsNotEmpty,
    TResult? Function(NumberEqualsFilter value)? numberEquals,
    TResult? Function(NumberDoesNotEqualFilter value)? numberDoesNotEqual,
    TResult? Function(NumberGreaterThanFilter value)? numberGreaterThan,
    TResult? Function(NumberLessThanFilter value)? numberLessThan,
    TResult? Function(NumberGreaterThanOrEqualFilter value)?
        numberGreaterThanOrEqual,
    TResult? Function(NumberLessThanOrEqualFilter value)? numberLessThanOrEqual,
    TResult? Function(NumberIsEmptyFilter value)? numberIsEmpty,
    TResult? Function(NumberIsNotEmptyFilter value)? numberIsNotEmpty,
    TResult? Function(CheckboxEqualsFilter value)? checkboxEquals,
    TResult? Function(SelectEqualsFilter value)? selectEquals,
    TResult? Function(SelectDoesNotEqualFilter value)? selectDoesNotEqual,
    TResult? Function(SelectIsEmptyFilter value)? selectIsEmpty,
    TResult? Function(SelectIsNotEmptyFilter value)? selectIsNotEmpty,
    TResult? Function(MultiSelectContainsFilter value)? multiSelectContains,
    TResult? Function(MultiSelectDoesNotContainFilter value)?
        multiSelectDoesNotContain,
    TResult? Function(MultiSelectIsEmptyFilter value)? multiSelectIsEmpty,
    TResult? Function(MultiSelectIsNotEmptyFilter value)? multiSelectIsNotEmpty,
    TResult? Function(DateEqualsFilter value)? dateEquals,
    TResult? Function(DateBeforeFilter value)? dateBefore,
    TResult? Function(DateAfterFilter value)? dateAfter,
    TResult? Function(DateOnOrBeforeFilter value)? dateOnOrBefore,
    TResult? Function(DateOnOrAfterFilter value)? dateOnOrAfter,
    TResult? Function(DateIsEmptyFilter value)? dateIsEmpty,
    TResult? Function(DateIsNotEmptyFilter value)? dateIsNotEmpty,
    TResult? Function(DatePastWeekFilter value)? datePastWeek,
    TResult? Function(DatePastMonthFilter value)? datePastMonth,
    TResult? Function(DatePastYearFilter value)? datePastYear,
    TResult? Function(DateNextWeekFilter value)? dateNextWeek,
    TResult? Function(DateNextMonthFilter value)? dateNextMonth,
    TResult? Function(DateNextYearFilter value)? dateNextYear,
    TResult? Function(PeopleContainsFilter value)? peopleContains,
    TResult? Function(PeopleDoesNotContainFilter value)? peopleDoesNotContain,
    TResult? Function(PeopleIsEmptyFilter value)? peopleIsEmpty,
    TResult? Function(PeopleIsNotEmptyFilter value)? peopleIsNotEmpty,
    TResult? Function(FilesIsEmptyFilter value)? filesIsEmpty,
    TResult? Function(FilesIsNotEmptyFilter value)? filesIsNotEmpty,
    TResult? Function(RelationContainsFilter value)? relationContains,
    TResult? Function(RelationDoesNotContainFilter value)?
        relationDoesNotContain,
    TResult? Function(RelationIsEmptyFilter value)? relationIsEmpty,
    TResult? Function(RelationIsNotEmptyFilter value)? relationIsNotEmpty,
  }) {
    return filesIsEmpty?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(TextEqualsFilter value)? textEquals,
    TResult Function(TextDoesNotEqualFilter value)? textDoesNotEqual,
    TResult Function(TextContainsFilter value)? textContains,
    TResult Function(TextDoesNotContainFilter value)? textDoesNotContain,
    TResult Function(TextStartsWithFilter value)? textStartsWith,
    TResult Function(TextEndsWithFilter value)? textEndsWith,
    TResult Function(TextIsEmptyFilter value)? textIsEmpty,
    TResult Function(TextIsNotEmptyFilter value)? textIsNotEmpty,
    TResult Function(NumberEqualsFilter value)? numberEquals,
    TResult Function(NumberDoesNotEqualFilter value)? numberDoesNotEqual,
    TResult Function(NumberGreaterThanFilter value)? numberGreaterThan,
    TResult Function(NumberLessThanFilter value)? numberLessThan,
    TResult Function(NumberGreaterThanOrEqualFilter value)?
        numberGreaterThanOrEqual,
    TResult Function(NumberLessThanOrEqualFilter value)? numberLessThanOrEqual,
    TResult Function(NumberIsEmptyFilter value)? numberIsEmpty,
    TResult Function(NumberIsNotEmptyFilter value)? numberIsNotEmpty,
    TResult Function(CheckboxEqualsFilter value)? checkboxEquals,
    TResult Function(SelectEqualsFilter value)? selectEquals,
    TResult Function(SelectDoesNotEqualFilter value)? selectDoesNotEqual,
    TResult Function(SelectIsEmptyFilter value)? selectIsEmpty,
    TResult Function(SelectIsNotEmptyFilter value)? selectIsNotEmpty,
    TResult Function(MultiSelectContainsFilter value)? multiSelectContains,
    TResult Function(MultiSelectDoesNotContainFilter value)?
        multiSelectDoesNotContain,
    TResult Function(MultiSelectIsEmptyFilter value)? multiSelectIsEmpty,
    TResult Function(MultiSelectIsNotEmptyFilter value)? multiSelectIsNotEmpty,
    TResult Function(DateEqualsFilter value)? dateEquals,
    TResult Function(DateBeforeFilter value)? dateBefore,
    TResult Function(DateAfterFilter value)? dateAfter,
    TResult Function(DateOnOrBeforeFilter value)? dateOnOrBefore,
    TResult Function(DateOnOrAfterFilter value)? dateOnOrAfter,
    TResult Function(DateIsEmptyFilter value)? dateIsEmpty,
    TResult Function(DateIsNotEmptyFilter value)? dateIsNotEmpty,
    TResult Function(DatePastWeekFilter value)? datePastWeek,
    TResult Function(DatePastMonthFilter value)? datePastMonth,
    TResult Function(DatePastYearFilter value)? datePastYear,
    TResult Function(DateNextWeekFilter value)? dateNextWeek,
    TResult Function(DateNextMonthFilter value)? dateNextMonth,
    TResult Function(DateNextYearFilter value)? dateNextYear,
    TResult Function(PeopleContainsFilter value)? peopleContains,
    TResult Function(PeopleDoesNotContainFilter value)? peopleDoesNotContain,
    TResult Function(PeopleIsEmptyFilter value)? peopleIsEmpty,
    TResult Function(PeopleIsNotEmptyFilter value)? peopleIsNotEmpty,
    TResult Function(FilesIsEmptyFilter value)? filesIsEmpty,
    TResult Function(FilesIsNotEmptyFilter value)? filesIsNotEmpty,
    TResult Function(RelationContainsFilter value)? relationContains,
    TResult Function(RelationDoesNotContainFilter value)?
        relationDoesNotContain,
    TResult Function(RelationIsEmptyFilter value)? relationIsEmpty,
    TResult Function(RelationIsNotEmptyFilter value)? relationIsNotEmpty,
    required TResult orElse(),
  }) {
    if (filesIsEmpty != null) {
      return filesIsEmpty(this);
    }
    return orElse();
  }
}

abstract class FilesIsEmptyFilter extends PropertyFilter {
  const factory FilesIsEmptyFilter() = _$FilesIsEmptyFilterImpl;
  const FilesIsEmptyFilter._() : super._();
}

/// @nodoc
abstract class _$$FilesIsNotEmptyFilterImplCopyWith<$Res> {
  factory _$$FilesIsNotEmptyFilterImplCopyWith(
          _$FilesIsNotEmptyFilterImpl value,
          $Res Function(_$FilesIsNotEmptyFilterImpl) then) =
      __$$FilesIsNotEmptyFilterImplCopyWithImpl<$Res>;
}

/// @nodoc
class __$$FilesIsNotEmptyFilterImplCopyWithImpl<$Res>
    extends _$PropertyFilterCopyWithImpl<$Res, _$FilesIsNotEmptyFilterImpl>
    implements _$$FilesIsNotEmptyFilterImplCopyWith<$Res> {
  __$$FilesIsNotEmptyFilterImplCopyWithImpl(_$FilesIsNotEmptyFilterImpl _value,
      $Res Function(_$FilesIsNotEmptyFilterImpl) _then)
      : super(_value, _then);

  /// Create a copy of PropertyFilter
  /// with the given fields replaced by the non-null parameter values.
}

/// @nodoc

class _$FilesIsNotEmptyFilterImpl extends FilesIsNotEmptyFilter {
  const _$FilesIsNotEmptyFilterImpl() : super._();

  @override
  String toString() {
    return 'PropertyFilter.filesIsNotEmpty()';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$FilesIsNotEmptyFilterImpl);
  }

  @override
  int get hashCode => runtimeType.hashCode;

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function(String value) textEquals,
    required TResult Function(String value) textDoesNotEqual,
    required TResult Function(String value) textContains,
    required TResult Function(String value) textDoesNotContain,
    required TResult Function(String value) textStartsWith,
    required TResult Function(String value) textEndsWith,
    required TResult Function() textIsEmpty,
    required TResult Function() textIsNotEmpty,
    required TResult Function(double value) numberEquals,
    required TResult Function(double value) numberDoesNotEqual,
    required TResult Function(double value) numberGreaterThan,
    required TResult Function(double value) numberLessThan,
    required TResult Function(double value) numberGreaterThanOrEqual,
    required TResult Function(double value) numberLessThanOrEqual,
    required TResult Function() numberIsEmpty,
    required TResult Function() numberIsNotEmpty,
    required TResult Function(bool value) checkboxEquals,
    required TResult Function(String value) selectEquals,
    required TResult Function(String value) selectDoesNotEqual,
    required TResult Function() selectIsEmpty,
    required TResult Function() selectIsNotEmpty,
    required TResult Function(String value) multiSelectContains,
    required TResult Function(String value) multiSelectDoesNotContain,
    required TResult Function() multiSelectIsEmpty,
    required TResult Function() multiSelectIsNotEmpty,
    required TResult Function(String date) dateEquals,
    required TResult Function(String date) dateBefore,
    required TResult Function(String date) dateAfter,
    required TResult Function(String date) dateOnOrBefore,
    required TResult Function(String date) dateOnOrAfter,
    required TResult Function() dateIsEmpty,
    required TResult Function() dateIsNotEmpty,
    required TResult Function() datePastWeek,
    required TResult Function() datePastMonth,
    required TResult Function() datePastYear,
    required TResult Function() dateNextWeek,
    required TResult Function() dateNextMonth,
    required TResult Function() dateNextYear,
    required TResult Function(String userId) peopleContains,
    required TResult Function(String userId) peopleDoesNotContain,
    required TResult Function() peopleIsEmpty,
    required TResult Function() peopleIsNotEmpty,
    required TResult Function() filesIsEmpty,
    required TResult Function() filesIsNotEmpty,
    required TResult Function(String pageId) relationContains,
    required TResult Function(String pageId) relationDoesNotContain,
    required TResult Function() relationIsEmpty,
    required TResult Function() relationIsNotEmpty,
  }) {
    return filesIsNotEmpty();
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function(String value)? textEquals,
    TResult? Function(String value)? textDoesNotEqual,
    TResult? Function(String value)? textContains,
    TResult? Function(String value)? textDoesNotContain,
    TResult? Function(String value)? textStartsWith,
    TResult? Function(String value)? textEndsWith,
    TResult? Function()? textIsEmpty,
    TResult? Function()? textIsNotEmpty,
    TResult? Function(double value)? numberEquals,
    TResult? Function(double value)? numberDoesNotEqual,
    TResult? Function(double value)? numberGreaterThan,
    TResult? Function(double value)? numberLessThan,
    TResult? Function(double value)? numberGreaterThanOrEqual,
    TResult? Function(double value)? numberLessThanOrEqual,
    TResult? Function()? numberIsEmpty,
    TResult? Function()? numberIsNotEmpty,
    TResult? Function(bool value)? checkboxEquals,
    TResult? Function(String value)? selectEquals,
    TResult? Function(String value)? selectDoesNotEqual,
    TResult? Function()? selectIsEmpty,
    TResult? Function()? selectIsNotEmpty,
    TResult? Function(String value)? multiSelectContains,
    TResult? Function(String value)? multiSelectDoesNotContain,
    TResult? Function()? multiSelectIsEmpty,
    TResult? Function()? multiSelectIsNotEmpty,
    TResult? Function(String date)? dateEquals,
    TResult? Function(String date)? dateBefore,
    TResult? Function(String date)? dateAfter,
    TResult? Function(String date)? dateOnOrBefore,
    TResult? Function(String date)? dateOnOrAfter,
    TResult? Function()? dateIsEmpty,
    TResult? Function()? dateIsNotEmpty,
    TResult? Function()? datePastWeek,
    TResult? Function()? datePastMonth,
    TResult? Function()? datePastYear,
    TResult? Function()? dateNextWeek,
    TResult? Function()? dateNextMonth,
    TResult? Function()? dateNextYear,
    TResult? Function(String userId)? peopleContains,
    TResult? Function(String userId)? peopleDoesNotContain,
    TResult? Function()? peopleIsEmpty,
    TResult? Function()? peopleIsNotEmpty,
    TResult? Function()? filesIsEmpty,
    TResult? Function()? filesIsNotEmpty,
    TResult? Function(String pageId)? relationContains,
    TResult? Function(String pageId)? relationDoesNotContain,
    TResult? Function()? relationIsEmpty,
    TResult? Function()? relationIsNotEmpty,
  }) {
    return filesIsNotEmpty?.call();
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function(String value)? textEquals,
    TResult Function(String value)? textDoesNotEqual,
    TResult Function(String value)? textContains,
    TResult Function(String value)? textDoesNotContain,
    TResult Function(String value)? textStartsWith,
    TResult Function(String value)? textEndsWith,
    TResult Function()? textIsEmpty,
    TResult Function()? textIsNotEmpty,
    TResult Function(double value)? numberEquals,
    TResult Function(double value)? numberDoesNotEqual,
    TResult Function(double value)? numberGreaterThan,
    TResult Function(double value)? numberLessThan,
    TResult Function(double value)? numberGreaterThanOrEqual,
    TResult Function(double value)? numberLessThanOrEqual,
    TResult Function()? numberIsEmpty,
    TResult Function()? numberIsNotEmpty,
    TResult Function(bool value)? checkboxEquals,
    TResult Function(String value)? selectEquals,
    TResult Function(String value)? selectDoesNotEqual,
    TResult Function()? selectIsEmpty,
    TResult Function()? selectIsNotEmpty,
    TResult Function(String value)? multiSelectContains,
    TResult Function(String value)? multiSelectDoesNotContain,
    TResult Function()? multiSelectIsEmpty,
    TResult Function()? multiSelectIsNotEmpty,
    TResult Function(String date)? dateEquals,
    TResult Function(String date)? dateBefore,
    TResult Function(String date)? dateAfter,
    TResult Function(String date)? dateOnOrBefore,
    TResult Function(String date)? dateOnOrAfter,
    TResult Function()? dateIsEmpty,
    TResult Function()? dateIsNotEmpty,
    TResult Function()? datePastWeek,
    TResult Function()? datePastMonth,
    TResult Function()? datePastYear,
    TResult Function()? dateNextWeek,
    TResult Function()? dateNextMonth,
    TResult Function()? dateNextYear,
    TResult Function(String userId)? peopleContains,
    TResult Function(String userId)? peopleDoesNotContain,
    TResult Function()? peopleIsEmpty,
    TResult Function()? peopleIsNotEmpty,
    TResult Function()? filesIsEmpty,
    TResult Function()? filesIsNotEmpty,
    TResult Function(String pageId)? relationContains,
    TResult Function(String pageId)? relationDoesNotContain,
    TResult Function()? relationIsEmpty,
    TResult Function()? relationIsNotEmpty,
    required TResult orElse(),
  }) {
    if (filesIsNotEmpty != null) {
      return filesIsNotEmpty();
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(TextEqualsFilter value) textEquals,
    required TResult Function(TextDoesNotEqualFilter value) textDoesNotEqual,
    required TResult Function(TextContainsFilter value) textContains,
    required TResult Function(TextDoesNotContainFilter value)
        textDoesNotContain,
    required TResult Function(TextStartsWithFilter value) textStartsWith,
    required TResult Function(TextEndsWithFilter value) textEndsWith,
    required TResult Function(TextIsEmptyFilter value) textIsEmpty,
    required TResult Function(TextIsNotEmptyFilter value) textIsNotEmpty,
    required TResult Function(NumberEqualsFilter value) numberEquals,
    required TResult Function(NumberDoesNotEqualFilter value)
        numberDoesNotEqual,
    required TResult Function(NumberGreaterThanFilter value) numberGreaterThan,
    required TResult Function(NumberLessThanFilter value) numberLessThan,
    required TResult Function(NumberGreaterThanOrEqualFilter value)
        numberGreaterThanOrEqual,
    required TResult Function(NumberLessThanOrEqualFilter value)
        numberLessThanOrEqual,
    required TResult Function(NumberIsEmptyFilter value) numberIsEmpty,
    required TResult Function(NumberIsNotEmptyFilter value) numberIsNotEmpty,
    required TResult Function(CheckboxEqualsFilter value) checkboxEquals,
    required TResult Function(SelectEqualsFilter value) selectEquals,
    required TResult Function(SelectDoesNotEqualFilter value)
        selectDoesNotEqual,
    required TResult Function(SelectIsEmptyFilter value) selectIsEmpty,
    required TResult Function(SelectIsNotEmptyFilter value) selectIsNotEmpty,
    required TResult Function(MultiSelectContainsFilter value)
        multiSelectContains,
    required TResult Function(MultiSelectDoesNotContainFilter value)
        multiSelectDoesNotContain,
    required TResult Function(MultiSelectIsEmptyFilter value)
        multiSelectIsEmpty,
    required TResult Function(MultiSelectIsNotEmptyFilter value)
        multiSelectIsNotEmpty,
    required TResult Function(DateEqualsFilter value) dateEquals,
    required TResult Function(DateBeforeFilter value) dateBefore,
    required TResult Function(DateAfterFilter value) dateAfter,
    required TResult Function(DateOnOrBeforeFilter value) dateOnOrBefore,
    required TResult Function(DateOnOrAfterFilter value) dateOnOrAfter,
    required TResult Function(DateIsEmptyFilter value) dateIsEmpty,
    required TResult Function(DateIsNotEmptyFilter value) dateIsNotEmpty,
    required TResult Function(DatePastWeekFilter value) datePastWeek,
    required TResult Function(DatePastMonthFilter value) datePastMonth,
    required TResult Function(DatePastYearFilter value) datePastYear,
    required TResult Function(DateNextWeekFilter value) dateNextWeek,
    required TResult Function(DateNextMonthFilter value) dateNextMonth,
    required TResult Function(DateNextYearFilter value) dateNextYear,
    required TResult Function(PeopleContainsFilter value) peopleContains,
    required TResult Function(PeopleDoesNotContainFilter value)
        peopleDoesNotContain,
    required TResult Function(PeopleIsEmptyFilter value) peopleIsEmpty,
    required TResult Function(PeopleIsNotEmptyFilter value) peopleIsNotEmpty,
    required TResult Function(FilesIsEmptyFilter value) filesIsEmpty,
    required TResult Function(FilesIsNotEmptyFilter value) filesIsNotEmpty,
    required TResult Function(RelationContainsFilter value) relationContains,
    required TResult Function(RelationDoesNotContainFilter value)
        relationDoesNotContain,
    required TResult Function(RelationIsEmptyFilter value) relationIsEmpty,
    required TResult Function(RelationIsNotEmptyFilter value)
        relationIsNotEmpty,
  }) {
    return filesIsNotEmpty(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(TextEqualsFilter value)? textEquals,
    TResult? Function(TextDoesNotEqualFilter value)? textDoesNotEqual,
    TResult? Function(TextContainsFilter value)? textContains,
    TResult? Function(TextDoesNotContainFilter value)? textDoesNotContain,
    TResult? Function(TextStartsWithFilter value)? textStartsWith,
    TResult? Function(TextEndsWithFilter value)? textEndsWith,
    TResult? Function(TextIsEmptyFilter value)? textIsEmpty,
    TResult? Function(TextIsNotEmptyFilter value)? textIsNotEmpty,
    TResult? Function(NumberEqualsFilter value)? numberEquals,
    TResult? Function(NumberDoesNotEqualFilter value)? numberDoesNotEqual,
    TResult? Function(NumberGreaterThanFilter value)? numberGreaterThan,
    TResult? Function(NumberLessThanFilter value)? numberLessThan,
    TResult? Function(NumberGreaterThanOrEqualFilter value)?
        numberGreaterThanOrEqual,
    TResult? Function(NumberLessThanOrEqualFilter value)? numberLessThanOrEqual,
    TResult? Function(NumberIsEmptyFilter value)? numberIsEmpty,
    TResult? Function(NumberIsNotEmptyFilter value)? numberIsNotEmpty,
    TResult? Function(CheckboxEqualsFilter value)? checkboxEquals,
    TResult? Function(SelectEqualsFilter value)? selectEquals,
    TResult? Function(SelectDoesNotEqualFilter value)? selectDoesNotEqual,
    TResult? Function(SelectIsEmptyFilter value)? selectIsEmpty,
    TResult? Function(SelectIsNotEmptyFilter value)? selectIsNotEmpty,
    TResult? Function(MultiSelectContainsFilter value)? multiSelectContains,
    TResult? Function(MultiSelectDoesNotContainFilter value)?
        multiSelectDoesNotContain,
    TResult? Function(MultiSelectIsEmptyFilter value)? multiSelectIsEmpty,
    TResult? Function(MultiSelectIsNotEmptyFilter value)? multiSelectIsNotEmpty,
    TResult? Function(DateEqualsFilter value)? dateEquals,
    TResult? Function(DateBeforeFilter value)? dateBefore,
    TResult? Function(DateAfterFilter value)? dateAfter,
    TResult? Function(DateOnOrBeforeFilter value)? dateOnOrBefore,
    TResult? Function(DateOnOrAfterFilter value)? dateOnOrAfter,
    TResult? Function(DateIsEmptyFilter value)? dateIsEmpty,
    TResult? Function(DateIsNotEmptyFilter value)? dateIsNotEmpty,
    TResult? Function(DatePastWeekFilter value)? datePastWeek,
    TResult? Function(DatePastMonthFilter value)? datePastMonth,
    TResult? Function(DatePastYearFilter value)? datePastYear,
    TResult? Function(DateNextWeekFilter value)? dateNextWeek,
    TResult? Function(DateNextMonthFilter value)? dateNextMonth,
    TResult? Function(DateNextYearFilter value)? dateNextYear,
    TResult? Function(PeopleContainsFilter value)? peopleContains,
    TResult? Function(PeopleDoesNotContainFilter value)? peopleDoesNotContain,
    TResult? Function(PeopleIsEmptyFilter value)? peopleIsEmpty,
    TResult? Function(PeopleIsNotEmptyFilter value)? peopleIsNotEmpty,
    TResult? Function(FilesIsEmptyFilter value)? filesIsEmpty,
    TResult? Function(FilesIsNotEmptyFilter value)? filesIsNotEmpty,
    TResult? Function(RelationContainsFilter value)? relationContains,
    TResult? Function(RelationDoesNotContainFilter value)?
        relationDoesNotContain,
    TResult? Function(RelationIsEmptyFilter value)? relationIsEmpty,
    TResult? Function(RelationIsNotEmptyFilter value)? relationIsNotEmpty,
  }) {
    return filesIsNotEmpty?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(TextEqualsFilter value)? textEquals,
    TResult Function(TextDoesNotEqualFilter value)? textDoesNotEqual,
    TResult Function(TextContainsFilter value)? textContains,
    TResult Function(TextDoesNotContainFilter value)? textDoesNotContain,
    TResult Function(TextStartsWithFilter value)? textStartsWith,
    TResult Function(TextEndsWithFilter value)? textEndsWith,
    TResult Function(TextIsEmptyFilter value)? textIsEmpty,
    TResult Function(TextIsNotEmptyFilter value)? textIsNotEmpty,
    TResult Function(NumberEqualsFilter value)? numberEquals,
    TResult Function(NumberDoesNotEqualFilter value)? numberDoesNotEqual,
    TResult Function(NumberGreaterThanFilter value)? numberGreaterThan,
    TResult Function(NumberLessThanFilter value)? numberLessThan,
    TResult Function(NumberGreaterThanOrEqualFilter value)?
        numberGreaterThanOrEqual,
    TResult Function(NumberLessThanOrEqualFilter value)? numberLessThanOrEqual,
    TResult Function(NumberIsEmptyFilter value)? numberIsEmpty,
    TResult Function(NumberIsNotEmptyFilter value)? numberIsNotEmpty,
    TResult Function(CheckboxEqualsFilter value)? checkboxEquals,
    TResult Function(SelectEqualsFilter value)? selectEquals,
    TResult Function(SelectDoesNotEqualFilter value)? selectDoesNotEqual,
    TResult Function(SelectIsEmptyFilter value)? selectIsEmpty,
    TResult Function(SelectIsNotEmptyFilter value)? selectIsNotEmpty,
    TResult Function(MultiSelectContainsFilter value)? multiSelectContains,
    TResult Function(MultiSelectDoesNotContainFilter value)?
        multiSelectDoesNotContain,
    TResult Function(MultiSelectIsEmptyFilter value)? multiSelectIsEmpty,
    TResult Function(MultiSelectIsNotEmptyFilter value)? multiSelectIsNotEmpty,
    TResult Function(DateEqualsFilter value)? dateEquals,
    TResult Function(DateBeforeFilter value)? dateBefore,
    TResult Function(DateAfterFilter value)? dateAfter,
    TResult Function(DateOnOrBeforeFilter value)? dateOnOrBefore,
    TResult Function(DateOnOrAfterFilter value)? dateOnOrAfter,
    TResult Function(DateIsEmptyFilter value)? dateIsEmpty,
    TResult Function(DateIsNotEmptyFilter value)? dateIsNotEmpty,
    TResult Function(DatePastWeekFilter value)? datePastWeek,
    TResult Function(DatePastMonthFilter value)? datePastMonth,
    TResult Function(DatePastYearFilter value)? datePastYear,
    TResult Function(DateNextWeekFilter value)? dateNextWeek,
    TResult Function(DateNextMonthFilter value)? dateNextMonth,
    TResult Function(DateNextYearFilter value)? dateNextYear,
    TResult Function(PeopleContainsFilter value)? peopleContains,
    TResult Function(PeopleDoesNotContainFilter value)? peopleDoesNotContain,
    TResult Function(PeopleIsEmptyFilter value)? peopleIsEmpty,
    TResult Function(PeopleIsNotEmptyFilter value)? peopleIsNotEmpty,
    TResult Function(FilesIsEmptyFilter value)? filesIsEmpty,
    TResult Function(FilesIsNotEmptyFilter value)? filesIsNotEmpty,
    TResult Function(RelationContainsFilter value)? relationContains,
    TResult Function(RelationDoesNotContainFilter value)?
        relationDoesNotContain,
    TResult Function(RelationIsEmptyFilter value)? relationIsEmpty,
    TResult Function(RelationIsNotEmptyFilter value)? relationIsNotEmpty,
    required TResult orElse(),
  }) {
    if (filesIsNotEmpty != null) {
      return filesIsNotEmpty(this);
    }
    return orElse();
  }
}

abstract class FilesIsNotEmptyFilter extends PropertyFilter {
  const factory FilesIsNotEmptyFilter() = _$FilesIsNotEmptyFilterImpl;
  const FilesIsNotEmptyFilter._() : super._();
}

/// @nodoc
abstract class _$$RelationContainsFilterImplCopyWith<$Res> {
  factory _$$RelationContainsFilterImplCopyWith(
          _$RelationContainsFilterImpl value,
          $Res Function(_$RelationContainsFilterImpl) then) =
      __$$RelationContainsFilterImplCopyWithImpl<$Res>;
  @useResult
  $Res call({String pageId});
}

/// @nodoc
class __$$RelationContainsFilterImplCopyWithImpl<$Res>
    extends _$PropertyFilterCopyWithImpl<$Res, _$RelationContainsFilterImpl>
    implements _$$RelationContainsFilterImplCopyWith<$Res> {
  __$$RelationContainsFilterImplCopyWithImpl(
      _$RelationContainsFilterImpl _value,
      $Res Function(_$RelationContainsFilterImpl) _then)
      : super(_value, _then);

  /// Create a copy of PropertyFilter
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? pageId = null,
  }) {
    return _then(_$RelationContainsFilterImpl(
      null == pageId
          ? _value.pageId
          : pageId // ignore: cast_nullable_to_non_nullable
              as String,
    ));
  }
}

/// @nodoc

class _$RelationContainsFilterImpl extends RelationContainsFilter {
  const _$RelationContainsFilterImpl(this.pageId) : super._();

  @override
  final String pageId;

  @override
  String toString() {
    return 'PropertyFilter.relationContains(pageId: $pageId)';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$RelationContainsFilterImpl &&
            (identical(other.pageId, pageId) || other.pageId == pageId));
  }

  @override
  int get hashCode => Object.hash(runtimeType, pageId);

  /// Create a copy of PropertyFilter
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  @pragma('vm:prefer-inline')
  _$$RelationContainsFilterImplCopyWith<_$RelationContainsFilterImpl>
      get copyWith => __$$RelationContainsFilterImplCopyWithImpl<
          _$RelationContainsFilterImpl>(this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function(String value) textEquals,
    required TResult Function(String value) textDoesNotEqual,
    required TResult Function(String value) textContains,
    required TResult Function(String value) textDoesNotContain,
    required TResult Function(String value) textStartsWith,
    required TResult Function(String value) textEndsWith,
    required TResult Function() textIsEmpty,
    required TResult Function() textIsNotEmpty,
    required TResult Function(double value) numberEquals,
    required TResult Function(double value) numberDoesNotEqual,
    required TResult Function(double value) numberGreaterThan,
    required TResult Function(double value) numberLessThan,
    required TResult Function(double value) numberGreaterThanOrEqual,
    required TResult Function(double value) numberLessThanOrEqual,
    required TResult Function() numberIsEmpty,
    required TResult Function() numberIsNotEmpty,
    required TResult Function(bool value) checkboxEquals,
    required TResult Function(String value) selectEquals,
    required TResult Function(String value) selectDoesNotEqual,
    required TResult Function() selectIsEmpty,
    required TResult Function() selectIsNotEmpty,
    required TResult Function(String value) multiSelectContains,
    required TResult Function(String value) multiSelectDoesNotContain,
    required TResult Function() multiSelectIsEmpty,
    required TResult Function() multiSelectIsNotEmpty,
    required TResult Function(String date) dateEquals,
    required TResult Function(String date) dateBefore,
    required TResult Function(String date) dateAfter,
    required TResult Function(String date) dateOnOrBefore,
    required TResult Function(String date) dateOnOrAfter,
    required TResult Function() dateIsEmpty,
    required TResult Function() dateIsNotEmpty,
    required TResult Function() datePastWeek,
    required TResult Function() datePastMonth,
    required TResult Function() datePastYear,
    required TResult Function() dateNextWeek,
    required TResult Function() dateNextMonth,
    required TResult Function() dateNextYear,
    required TResult Function(String userId) peopleContains,
    required TResult Function(String userId) peopleDoesNotContain,
    required TResult Function() peopleIsEmpty,
    required TResult Function() peopleIsNotEmpty,
    required TResult Function() filesIsEmpty,
    required TResult Function() filesIsNotEmpty,
    required TResult Function(String pageId) relationContains,
    required TResult Function(String pageId) relationDoesNotContain,
    required TResult Function() relationIsEmpty,
    required TResult Function() relationIsNotEmpty,
  }) {
    return relationContains(pageId);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function(String value)? textEquals,
    TResult? Function(String value)? textDoesNotEqual,
    TResult? Function(String value)? textContains,
    TResult? Function(String value)? textDoesNotContain,
    TResult? Function(String value)? textStartsWith,
    TResult? Function(String value)? textEndsWith,
    TResult? Function()? textIsEmpty,
    TResult? Function()? textIsNotEmpty,
    TResult? Function(double value)? numberEquals,
    TResult? Function(double value)? numberDoesNotEqual,
    TResult? Function(double value)? numberGreaterThan,
    TResult? Function(double value)? numberLessThan,
    TResult? Function(double value)? numberGreaterThanOrEqual,
    TResult? Function(double value)? numberLessThanOrEqual,
    TResult? Function()? numberIsEmpty,
    TResult? Function()? numberIsNotEmpty,
    TResult? Function(bool value)? checkboxEquals,
    TResult? Function(String value)? selectEquals,
    TResult? Function(String value)? selectDoesNotEqual,
    TResult? Function()? selectIsEmpty,
    TResult? Function()? selectIsNotEmpty,
    TResult? Function(String value)? multiSelectContains,
    TResult? Function(String value)? multiSelectDoesNotContain,
    TResult? Function()? multiSelectIsEmpty,
    TResult? Function()? multiSelectIsNotEmpty,
    TResult? Function(String date)? dateEquals,
    TResult? Function(String date)? dateBefore,
    TResult? Function(String date)? dateAfter,
    TResult? Function(String date)? dateOnOrBefore,
    TResult? Function(String date)? dateOnOrAfter,
    TResult? Function()? dateIsEmpty,
    TResult? Function()? dateIsNotEmpty,
    TResult? Function()? datePastWeek,
    TResult? Function()? datePastMonth,
    TResult? Function()? datePastYear,
    TResult? Function()? dateNextWeek,
    TResult? Function()? dateNextMonth,
    TResult? Function()? dateNextYear,
    TResult? Function(String userId)? peopleContains,
    TResult? Function(String userId)? peopleDoesNotContain,
    TResult? Function()? peopleIsEmpty,
    TResult? Function()? peopleIsNotEmpty,
    TResult? Function()? filesIsEmpty,
    TResult? Function()? filesIsNotEmpty,
    TResult? Function(String pageId)? relationContains,
    TResult? Function(String pageId)? relationDoesNotContain,
    TResult? Function()? relationIsEmpty,
    TResult? Function()? relationIsNotEmpty,
  }) {
    return relationContains?.call(pageId);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function(String value)? textEquals,
    TResult Function(String value)? textDoesNotEqual,
    TResult Function(String value)? textContains,
    TResult Function(String value)? textDoesNotContain,
    TResult Function(String value)? textStartsWith,
    TResult Function(String value)? textEndsWith,
    TResult Function()? textIsEmpty,
    TResult Function()? textIsNotEmpty,
    TResult Function(double value)? numberEquals,
    TResult Function(double value)? numberDoesNotEqual,
    TResult Function(double value)? numberGreaterThan,
    TResult Function(double value)? numberLessThan,
    TResult Function(double value)? numberGreaterThanOrEqual,
    TResult Function(double value)? numberLessThanOrEqual,
    TResult Function()? numberIsEmpty,
    TResult Function()? numberIsNotEmpty,
    TResult Function(bool value)? checkboxEquals,
    TResult Function(String value)? selectEquals,
    TResult Function(String value)? selectDoesNotEqual,
    TResult Function()? selectIsEmpty,
    TResult Function()? selectIsNotEmpty,
    TResult Function(String value)? multiSelectContains,
    TResult Function(String value)? multiSelectDoesNotContain,
    TResult Function()? multiSelectIsEmpty,
    TResult Function()? multiSelectIsNotEmpty,
    TResult Function(String date)? dateEquals,
    TResult Function(String date)? dateBefore,
    TResult Function(String date)? dateAfter,
    TResult Function(String date)? dateOnOrBefore,
    TResult Function(String date)? dateOnOrAfter,
    TResult Function()? dateIsEmpty,
    TResult Function()? dateIsNotEmpty,
    TResult Function()? datePastWeek,
    TResult Function()? datePastMonth,
    TResult Function()? datePastYear,
    TResult Function()? dateNextWeek,
    TResult Function()? dateNextMonth,
    TResult Function()? dateNextYear,
    TResult Function(String userId)? peopleContains,
    TResult Function(String userId)? peopleDoesNotContain,
    TResult Function()? peopleIsEmpty,
    TResult Function()? peopleIsNotEmpty,
    TResult Function()? filesIsEmpty,
    TResult Function()? filesIsNotEmpty,
    TResult Function(String pageId)? relationContains,
    TResult Function(String pageId)? relationDoesNotContain,
    TResult Function()? relationIsEmpty,
    TResult Function()? relationIsNotEmpty,
    required TResult orElse(),
  }) {
    if (relationContains != null) {
      return relationContains(pageId);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(TextEqualsFilter value) textEquals,
    required TResult Function(TextDoesNotEqualFilter value) textDoesNotEqual,
    required TResult Function(TextContainsFilter value) textContains,
    required TResult Function(TextDoesNotContainFilter value)
        textDoesNotContain,
    required TResult Function(TextStartsWithFilter value) textStartsWith,
    required TResult Function(TextEndsWithFilter value) textEndsWith,
    required TResult Function(TextIsEmptyFilter value) textIsEmpty,
    required TResult Function(TextIsNotEmptyFilter value) textIsNotEmpty,
    required TResult Function(NumberEqualsFilter value) numberEquals,
    required TResult Function(NumberDoesNotEqualFilter value)
        numberDoesNotEqual,
    required TResult Function(NumberGreaterThanFilter value) numberGreaterThan,
    required TResult Function(NumberLessThanFilter value) numberLessThan,
    required TResult Function(NumberGreaterThanOrEqualFilter value)
        numberGreaterThanOrEqual,
    required TResult Function(NumberLessThanOrEqualFilter value)
        numberLessThanOrEqual,
    required TResult Function(NumberIsEmptyFilter value) numberIsEmpty,
    required TResult Function(NumberIsNotEmptyFilter value) numberIsNotEmpty,
    required TResult Function(CheckboxEqualsFilter value) checkboxEquals,
    required TResult Function(SelectEqualsFilter value) selectEquals,
    required TResult Function(SelectDoesNotEqualFilter value)
        selectDoesNotEqual,
    required TResult Function(SelectIsEmptyFilter value) selectIsEmpty,
    required TResult Function(SelectIsNotEmptyFilter value) selectIsNotEmpty,
    required TResult Function(MultiSelectContainsFilter value)
        multiSelectContains,
    required TResult Function(MultiSelectDoesNotContainFilter value)
        multiSelectDoesNotContain,
    required TResult Function(MultiSelectIsEmptyFilter value)
        multiSelectIsEmpty,
    required TResult Function(MultiSelectIsNotEmptyFilter value)
        multiSelectIsNotEmpty,
    required TResult Function(DateEqualsFilter value) dateEquals,
    required TResult Function(DateBeforeFilter value) dateBefore,
    required TResult Function(DateAfterFilter value) dateAfter,
    required TResult Function(DateOnOrBeforeFilter value) dateOnOrBefore,
    required TResult Function(DateOnOrAfterFilter value) dateOnOrAfter,
    required TResult Function(DateIsEmptyFilter value) dateIsEmpty,
    required TResult Function(DateIsNotEmptyFilter value) dateIsNotEmpty,
    required TResult Function(DatePastWeekFilter value) datePastWeek,
    required TResult Function(DatePastMonthFilter value) datePastMonth,
    required TResult Function(DatePastYearFilter value) datePastYear,
    required TResult Function(DateNextWeekFilter value) dateNextWeek,
    required TResult Function(DateNextMonthFilter value) dateNextMonth,
    required TResult Function(DateNextYearFilter value) dateNextYear,
    required TResult Function(PeopleContainsFilter value) peopleContains,
    required TResult Function(PeopleDoesNotContainFilter value)
        peopleDoesNotContain,
    required TResult Function(PeopleIsEmptyFilter value) peopleIsEmpty,
    required TResult Function(PeopleIsNotEmptyFilter value) peopleIsNotEmpty,
    required TResult Function(FilesIsEmptyFilter value) filesIsEmpty,
    required TResult Function(FilesIsNotEmptyFilter value) filesIsNotEmpty,
    required TResult Function(RelationContainsFilter value) relationContains,
    required TResult Function(RelationDoesNotContainFilter value)
        relationDoesNotContain,
    required TResult Function(RelationIsEmptyFilter value) relationIsEmpty,
    required TResult Function(RelationIsNotEmptyFilter value)
        relationIsNotEmpty,
  }) {
    return relationContains(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(TextEqualsFilter value)? textEquals,
    TResult? Function(TextDoesNotEqualFilter value)? textDoesNotEqual,
    TResult? Function(TextContainsFilter value)? textContains,
    TResult? Function(TextDoesNotContainFilter value)? textDoesNotContain,
    TResult? Function(TextStartsWithFilter value)? textStartsWith,
    TResult? Function(TextEndsWithFilter value)? textEndsWith,
    TResult? Function(TextIsEmptyFilter value)? textIsEmpty,
    TResult? Function(TextIsNotEmptyFilter value)? textIsNotEmpty,
    TResult? Function(NumberEqualsFilter value)? numberEquals,
    TResult? Function(NumberDoesNotEqualFilter value)? numberDoesNotEqual,
    TResult? Function(NumberGreaterThanFilter value)? numberGreaterThan,
    TResult? Function(NumberLessThanFilter value)? numberLessThan,
    TResult? Function(NumberGreaterThanOrEqualFilter value)?
        numberGreaterThanOrEqual,
    TResult? Function(NumberLessThanOrEqualFilter value)? numberLessThanOrEqual,
    TResult? Function(NumberIsEmptyFilter value)? numberIsEmpty,
    TResult? Function(NumberIsNotEmptyFilter value)? numberIsNotEmpty,
    TResult? Function(CheckboxEqualsFilter value)? checkboxEquals,
    TResult? Function(SelectEqualsFilter value)? selectEquals,
    TResult? Function(SelectDoesNotEqualFilter value)? selectDoesNotEqual,
    TResult? Function(SelectIsEmptyFilter value)? selectIsEmpty,
    TResult? Function(SelectIsNotEmptyFilter value)? selectIsNotEmpty,
    TResult? Function(MultiSelectContainsFilter value)? multiSelectContains,
    TResult? Function(MultiSelectDoesNotContainFilter value)?
        multiSelectDoesNotContain,
    TResult? Function(MultiSelectIsEmptyFilter value)? multiSelectIsEmpty,
    TResult? Function(MultiSelectIsNotEmptyFilter value)? multiSelectIsNotEmpty,
    TResult? Function(DateEqualsFilter value)? dateEquals,
    TResult? Function(DateBeforeFilter value)? dateBefore,
    TResult? Function(DateAfterFilter value)? dateAfter,
    TResult? Function(DateOnOrBeforeFilter value)? dateOnOrBefore,
    TResult? Function(DateOnOrAfterFilter value)? dateOnOrAfter,
    TResult? Function(DateIsEmptyFilter value)? dateIsEmpty,
    TResult? Function(DateIsNotEmptyFilter value)? dateIsNotEmpty,
    TResult? Function(DatePastWeekFilter value)? datePastWeek,
    TResult? Function(DatePastMonthFilter value)? datePastMonth,
    TResult? Function(DatePastYearFilter value)? datePastYear,
    TResult? Function(DateNextWeekFilter value)? dateNextWeek,
    TResult? Function(DateNextMonthFilter value)? dateNextMonth,
    TResult? Function(DateNextYearFilter value)? dateNextYear,
    TResult? Function(PeopleContainsFilter value)? peopleContains,
    TResult? Function(PeopleDoesNotContainFilter value)? peopleDoesNotContain,
    TResult? Function(PeopleIsEmptyFilter value)? peopleIsEmpty,
    TResult? Function(PeopleIsNotEmptyFilter value)? peopleIsNotEmpty,
    TResult? Function(FilesIsEmptyFilter value)? filesIsEmpty,
    TResult? Function(FilesIsNotEmptyFilter value)? filesIsNotEmpty,
    TResult? Function(RelationContainsFilter value)? relationContains,
    TResult? Function(RelationDoesNotContainFilter value)?
        relationDoesNotContain,
    TResult? Function(RelationIsEmptyFilter value)? relationIsEmpty,
    TResult? Function(RelationIsNotEmptyFilter value)? relationIsNotEmpty,
  }) {
    return relationContains?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(TextEqualsFilter value)? textEquals,
    TResult Function(TextDoesNotEqualFilter value)? textDoesNotEqual,
    TResult Function(TextContainsFilter value)? textContains,
    TResult Function(TextDoesNotContainFilter value)? textDoesNotContain,
    TResult Function(TextStartsWithFilter value)? textStartsWith,
    TResult Function(TextEndsWithFilter value)? textEndsWith,
    TResult Function(TextIsEmptyFilter value)? textIsEmpty,
    TResult Function(TextIsNotEmptyFilter value)? textIsNotEmpty,
    TResult Function(NumberEqualsFilter value)? numberEquals,
    TResult Function(NumberDoesNotEqualFilter value)? numberDoesNotEqual,
    TResult Function(NumberGreaterThanFilter value)? numberGreaterThan,
    TResult Function(NumberLessThanFilter value)? numberLessThan,
    TResult Function(NumberGreaterThanOrEqualFilter value)?
        numberGreaterThanOrEqual,
    TResult Function(NumberLessThanOrEqualFilter value)? numberLessThanOrEqual,
    TResult Function(NumberIsEmptyFilter value)? numberIsEmpty,
    TResult Function(NumberIsNotEmptyFilter value)? numberIsNotEmpty,
    TResult Function(CheckboxEqualsFilter value)? checkboxEquals,
    TResult Function(SelectEqualsFilter value)? selectEquals,
    TResult Function(SelectDoesNotEqualFilter value)? selectDoesNotEqual,
    TResult Function(SelectIsEmptyFilter value)? selectIsEmpty,
    TResult Function(SelectIsNotEmptyFilter value)? selectIsNotEmpty,
    TResult Function(MultiSelectContainsFilter value)? multiSelectContains,
    TResult Function(MultiSelectDoesNotContainFilter value)?
        multiSelectDoesNotContain,
    TResult Function(MultiSelectIsEmptyFilter value)? multiSelectIsEmpty,
    TResult Function(MultiSelectIsNotEmptyFilter value)? multiSelectIsNotEmpty,
    TResult Function(DateEqualsFilter value)? dateEquals,
    TResult Function(DateBeforeFilter value)? dateBefore,
    TResult Function(DateAfterFilter value)? dateAfter,
    TResult Function(DateOnOrBeforeFilter value)? dateOnOrBefore,
    TResult Function(DateOnOrAfterFilter value)? dateOnOrAfter,
    TResult Function(DateIsEmptyFilter value)? dateIsEmpty,
    TResult Function(DateIsNotEmptyFilter value)? dateIsNotEmpty,
    TResult Function(DatePastWeekFilter value)? datePastWeek,
    TResult Function(DatePastMonthFilter value)? datePastMonth,
    TResult Function(DatePastYearFilter value)? datePastYear,
    TResult Function(DateNextWeekFilter value)? dateNextWeek,
    TResult Function(DateNextMonthFilter value)? dateNextMonth,
    TResult Function(DateNextYearFilter value)? dateNextYear,
    TResult Function(PeopleContainsFilter value)? peopleContains,
    TResult Function(PeopleDoesNotContainFilter value)? peopleDoesNotContain,
    TResult Function(PeopleIsEmptyFilter value)? peopleIsEmpty,
    TResult Function(PeopleIsNotEmptyFilter value)? peopleIsNotEmpty,
    TResult Function(FilesIsEmptyFilter value)? filesIsEmpty,
    TResult Function(FilesIsNotEmptyFilter value)? filesIsNotEmpty,
    TResult Function(RelationContainsFilter value)? relationContains,
    TResult Function(RelationDoesNotContainFilter value)?
        relationDoesNotContain,
    TResult Function(RelationIsEmptyFilter value)? relationIsEmpty,
    TResult Function(RelationIsNotEmptyFilter value)? relationIsNotEmpty,
    required TResult orElse(),
  }) {
    if (relationContains != null) {
      return relationContains(this);
    }
    return orElse();
  }
}

abstract class RelationContainsFilter extends PropertyFilter {
  const factory RelationContainsFilter(final String pageId) =
      _$RelationContainsFilterImpl;
  const RelationContainsFilter._() : super._();

  String get pageId;

  /// Create a copy of PropertyFilter
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  _$$RelationContainsFilterImplCopyWith<_$RelationContainsFilterImpl>
      get copyWith => throw _privateConstructorUsedError;
}

/// @nodoc
abstract class _$$RelationDoesNotContainFilterImplCopyWith<$Res> {
  factory _$$RelationDoesNotContainFilterImplCopyWith(
          _$RelationDoesNotContainFilterImpl value,
          $Res Function(_$RelationDoesNotContainFilterImpl) then) =
      __$$RelationDoesNotContainFilterImplCopyWithImpl<$Res>;
  @useResult
  $Res call({String pageId});
}

/// @nodoc
class __$$RelationDoesNotContainFilterImplCopyWithImpl<$Res>
    extends _$PropertyFilterCopyWithImpl<$Res,
        _$RelationDoesNotContainFilterImpl>
    implements _$$RelationDoesNotContainFilterImplCopyWith<$Res> {
  __$$RelationDoesNotContainFilterImplCopyWithImpl(
      _$RelationDoesNotContainFilterImpl _value,
      $Res Function(_$RelationDoesNotContainFilterImpl) _then)
      : super(_value, _then);

  /// Create a copy of PropertyFilter
  /// with the given fields replaced by the non-null parameter values.
  @pragma('vm:prefer-inline')
  @override
  $Res call({
    Object? pageId = null,
  }) {
    return _then(_$RelationDoesNotContainFilterImpl(
      null == pageId
          ? _value.pageId
          : pageId // ignore: cast_nullable_to_non_nullable
              as String,
    ));
  }
}

/// @nodoc

class _$RelationDoesNotContainFilterImpl extends RelationDoesNotContainFilter {
  const _$RelationDoesNotContainFilterImpl(this.pageId) : super._();

  @override
  final String pageId;

  @override
  String toString() {
    return 'PropertyFilter.relationDoesNotContain(pageId: $pageId)';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$RelationDoesNotContainFilterImpl &&
            (identical(other.pageId, pageId) || other.pageId == pageId));
  }

  @override
  int get hashCode => Object.hash(runtimeType, pageId);

  /// Create a copy of PropertyFilter
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  @override
  @pragma('vm:prefer-inline')
  _$$RelationDoesNotContainFilterImplCopyWith<
          _$RelationDoesNotContainFilterImpl>
      get copyWith => __$$RelationDoesNotContainFilterImplCopyWithImpl<
          _$RelationDoesNotContainFilterImpl>(this, _$identity);

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function(String value) textEquals,
    required TResult Function(String value) textDoesNotEqual,
    required TResult Function(String value) textContains,
    required TResult Function(String value) textDoesNotContain,
    required TResult Function(String value) textStartsWith,
    required TResult Function(String value) textEndsWith,
    required TResult Function() textIsEmpty,
    required TResult Function() textIsNotEmpty,
    required TResult Function(double value) numberEquals,
    required TResult Function(double value) numberDoesNotEqual,
    required TResult Function(double value) numberGreaterThan,
    required TResult Function(double value) numberLessThan,
    required TResult Function(double value) numberGreaterThanOrEqual,
    required TResult Function(double value) numberLessThanOrEqual,
    required TResult Function() numberIsEmpty,
    required TResult Function() numberIsNotEmpty,
    required TResult Function(bool value) checkboxEquals,
    required TResult Function(String value) selectEquals,
    required TResult Function(String value) selectDoesNotEqual,
    required TResult Function() selectIsEmpty,
    required TResult Function() selectIsNotEmpty,
    required TResult Function(String value) multiSelectContains,
    required TResult Function(String value) multiSelectDoesNotContain,
    required TResult Function() multiSelectIsEmpty,
    required TResult Function() multiSelectIsNotEmpty,
    required TResult Function(String date) dateEquals,
    required TResult Function(String date) dateBefore,
    required TResult Function(String date) dateAfter,
    required TResult Function(String date) dateOnOrBefore,
    required TResult Function(String date) dateOnOrAfter,
    required TResult Function() dateIsEmpty,
    required TResult Function() dateIsNotEmpty,
    required TResult Function() datePastWeek,
    required TResult Function() datePastMonth,
    required TResult Function() datePastYear,
    required TResult Function() dateNextWeek,
    required TResult Function() dateNextMonth,
    required TResult Function() dateNextYear,
    required TResult Function(String userId) peopleContains,
    required TResult Function(String userId) peopleDoesNotContain,
    required TResult Function() peopleIsEmpty,
    required TResult Function() peopleIsNotEmpty,
    required TResult Function() filesIsEmpty,
    required TResult Function() filesIsNotEmpty,
    required TResult Function(String pageId) relationContains,
    required TResult Function(String pageId) relationDoesNotContain,
    required TResult Function() relationIsEmpty,
    required TResult Function() relationIsNotEmpty,
  }) {
    return relationDoesNotContain(pageId);
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function(String value)? textEquals,
    TResult? Function(String value)? textDoesNotEqual,
    TResult? Function(String value)? textContains,
    TResult? Function(String value)? textDoesNotContain,
    TResult? Function(String value)? textStartsWith,
    TResult? Function(String value)? textEndsWith,
    TResult? Function()? textIsEmpty,
    TResult? Function()? textIsNotEmpty,
    TResult? Function(double value)? numberEquals,
    TResult? Function(double value)? numberDoesNotEqual,
    TResult? Function(double value)? numberGreaterThan,
    TResult? Function(double value)? numberLessThan,
    TResult? Function(double value)? numberGreaterThanOrEqual,
    TResult? Function(double value)? numberLessThanOrEqual,
    TResult? Function()? numberIsEmpty,
    TResult? Function()? numberIsNotEmpty,
    TResult? Function(bool value)? checkboxEquals,
    TResult? Function(String value)? selectEquals,
    TResult? Function(String value)? selectDoesNotEqual,
    TResult? Function()? selectIsEmpty,
    TResult? Function()? selectIsNotEmpty,
    TResult? Function(String value)? multiSelectContains,
    TResult? Function(String value)? multiSelectDoesNotContain,
    TResult? Function()? multiSelectIsEmpty,
    TResult? Function()? multiSelectIsNotEmpty,
    TResult? Function(String date)? dateEquals,
    TResult? Function(String date)? dateBefore,
    TResult? Function(String date)? dateAfter,
    TResult? Function(String date)? dateOnOrBefore,
    TResult? Function(String date)? dateOnOrAfter,
    TResult? Function()? dateIsEmpty,
    TResult? Function()? dateIsNotEmpty,
    TResult? Function()? datePastWeek,
    TResult? Function()? datePastMonth,
    TResult? Function()? datePastYear,
    TResult? Function()? dateNextWeek,
    TResult? Function()? dateNextMonth,
    TResult? Function()? dateNextYear,
    TResult? Function(String userId)? peopleContains,
    TResult? Function(String userId)? peopleDoesNotContain,
    TResult? Function()? peopleIsEmpty,
    TResult? Function()? peopleIsNotEmpty,
    TResult? Function()? filesIsEmpty,
    TResult? Function()? filesIsNotEmpty,
    TResult? Function(String pageId)? relationContains,
    TResult? Function(String pageId)? relationDoesNotContain,
    TResult? Function()? relationIsEmpty,
    TResult? Function()? relationIsNotEmpty,
  }) {
    return relationDoesNotContain?.call(pageId);
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function(String value)? textEquals,
    TResult Function(String value)? textDoesNotEqual,
    TResult Function(String value)? textContains,
    TResult Function(String value)? textDoesNotContain,
    TResult Function(String value)? textStartsWith,
    TResult Function(String value)? textEndsWith,
    TResult Function()? textIsEmpty,
    TResult Function()? textIsNotEmpty,
    TResult Function(double value)? numberEquals,
    TResult Function(double value)? numberDoesNotEqual,
    TResult Function(double value)? numberGreaterThan,
    TResult Function(double value)? numberLessThan,
    TResult Function(double value)? numberGreaterThanOrEqual,
    TResult Function(double value)? numberLessThanOrEqual,
    TResult Function()? numberIsEmpty,
    TResult Function()? numberIsNotEmpty,
    TResult Function(bool value)? checkboxEquals,
    TResult Function(String value)? selectEquals,
    TResult Function(String value)? selectDoesNotEqual,
    TResult Function()? selectIsEmpty,
    TResult Function()? selectIsNotEmpty,
    TResult Function(String value)? multiSelectContains,
    TResult Function(String value)? multiSelectDoesNotContain,
    TResult Function()? multiSelectIsEmpty,
    TResult Function()? multiSelectIsNotEmpty,
    TResult Function(String date)? dateEquals,
    TResult Function(String date)? dateBefore,
    TResult Function(String date)? dateAfter,
    TResult Function(String date)? dateOnOrBefore,
    TResult Function(String date)? dateOnOrAfter,
    TResult Function()? dateIsEmpty,
    TResult Function()? dateIsNotEmpty,
    TResult Function()? datePastWeek,
    TResult Function()? datePastMonth,
    TResult Function()? datePastYear,
    TResult Function()? dateNextWeek,
    TResult Function()? dateNextMonth,
    TResult Function()? dateNextYear,
    TResult Function(String userId)? peopleContains,
    TResult Function(String userId)? peopleDoesNotContain,
    TResult Function()? peopleIsEmpty,
    TResult Function()? peopleIsNotEmpty,
    TResult Function()? filesIsEmpty,
    TResult Function()? filesIsNotEmpty,
    TResult Function(String pageId)? relationContains,
    TResult Function(String pageId)? relationDoesNotContain,
    TResult Function()? relationIsEmpty,
    TResult Function()? relationIsNotEmpty,
    required TResult orElse(),
  }) {
    if (relationDoesNotContain != null) {
      return relationDoesNotContain(pageId);
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(TextEqualsFilter value) textEquals,
    required TResult Function(TextDoesNotEqualFilter value) textDoesNotEqual,
    required TResult Function(TextContainsFilter value) textContains,
    required TResult Function(TextDoesNotContainFilter value)
        textDoesNotContain,
    required TResult Function(TextStartsWithFilter value) textStartsWith,
    required TResult Function(TextEndsWithFilter value) textEndsWith,
    required TResult Function(TextIsEmptyFilter value) textIsEmpty,
    required TResult Function(TextIsNotEmptyFilter value) textIsNotEmpty,
    required TResult Function(NumberEqualsFilter value) numberEquals,
    required TResult Function(NumberDoesNotEqualFilter value)
        numberDoesNotEqual,
    required TResult Function(NumberGreaterThanFilter value) numberGreaterThan,
    required TResult Function(NumberLessThanFilter value) numberLessThan,
    required TResult Function(NumberGreaterThanOrEqualFilter value)
        numberGreaterThanOrEqual,
    required TResult Function(NumberLessThanOrEqualFilter value)
        numberLessThanOrEqual,
    required TResult Function(NumberIsEmptyFilter value) numberIsEmpty,
    required TResult Function(NumberIsNotEmptyFilter value) numberIsNotEmpty,
    required TResult Function(CheckboxEqualsFilter value) checkboxEquals,
    required TResult Function(SelectEqualsFilter value) selectEquals,
    required TResult Function(SelectDoesNotEqualFilter value)
        selectDoesNotEqual,
    required TResult Function(SelectIsEmptyFilter value) selectIsEmpty,
    required TResult Function(SelectIsNotEmptyFilter value) selectIsNotEmpty,
    required TResult Function(MultiSelectContainsFilter value)
        multiSelectContains,
    required TResult Function(MultiSelectDoesNotContainFilter value)
        multiSelectDoesNotContain,
    required TResult Function(MultiSelectIsEmptyFilter value)
        multiSelectIsEmpty,
    required TResult Function(MultiSelectIsNotEmptyFilter value)
        multiSelectIsNotEmpty,
    required TResult Function(DateEqualsFilter value) dateEquals,
    required TResult Function(DateBeforeFilter value) dateBefore,
    required TResult Function(DateAfterFilter value) dateAfter,
    required TResult Function(DateOnOrBeforeFilter value) dateOnOrBefore,
    required TResult Function(DateOnOrAfterFilter value) dateOnOrAfter,
    required TResult Function(DateIsEmptyFilter value) dateIsEmpty,
    required TResult Function(DateIsNotEmptyFilter value) dateIsNotEmpty,
    required TResult Function(DatePastWeekFilter value) datePastWeek,
    required TResult Function(DatePastMonthFilter value) datePastMonth,
    required TResult Function(DatePastYearFilter value) datePastYear,
    required TResult Function(DateNextWeekFilter value) dateNextWeek,
    required TResult Function(DateNextMonthFilter value) dateNextMonth,
    required TResult Function(DateNextYearFilter value) dateNextYear,
    required TResult Function(PeopleContainsFilter value) peopleContains,
    required TResult Function(PeopleDoesNotContainFilter value)
        peopleDoesNotContain,
    required TResult Function(PeopleIsEmptyFilter value) peopleIsEmpty,
    required TResult Function(PeopleIsNotEmptyFilter value) peopleIsNotEmpty,
    required TResult Function(FilesIsEmptyFilter value) filesIsEmpty,
    required TResult Function(FilesIsNotEmptyFilter value) filesIsNotEmpty,
    required TResult Function(RelationContainsFilter value) relationContains,
    required TResult Function(RelationDoesNotContainFilter value)
        relationDoesNotContain,
    required TResult Function(RelationIsEmptyFilter value) relationIsEmpty,
    required TResult Function(RelationIsNotEmptyFilter value)
        relationIsNotEmpty,
  }) {
    return relationDoesNotContain(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(TextEqualsFilter value)? textEquals,
    TResult? Function(TextDoesNotEqualFilter value)? textDoesNotEqual,
    TResult? Function(TextContainsFilter value)? textContains,
    TResult? Function(TextDoesNotContainFilter value)? textDoesNotContain,
    TResult? Function(TextStartsWithFilter value)? textStartsWith,
    TResult? Function(TextEndsWithFilter value)? textEndsWith,
    TResult? Function(TextIsEmptyFilter value)? textIsEmpty,
    TResult? Function(TextIsNotEmptyFilter value)? textIsNotEmpty,
    TResult? Function(NumberEqualsFilter value)? numberEquals,
    TResult? Function(NumberDoesNotEqualFilter value)? numberDoesNotEqual,
    TResult? Function(NumberGreaterThanFilter value)? numberGreaterThan,
    TResult? Function(NumberLessThanFilter value)? numberLessThan,
    TResult? Function(NumberGreaterThanOrEqualFilter value)?
        numberGreaterThanOrEqual,
    TResult? Function(NumberLessThanOrEqualFilter value)? numberLessThanOrEqual,
    TResult? Function(NumberIsEmptyFilter value)? numberIsEmpty,
    TResult? Function(NumberIsNotEmptyFilter value)? numberIsNotEmpty,
    TResult? Function(CheckboxEqualsFilter value)? checkboxEquals,
    TResult? Function(SelectEqualsFilter value)? selectEquals,
    TResult? Function(SelectDoesNotEqualFilter value)? selectDoesNotEqual,
    TResult? Function(SelectIsEmptyFilter value)? selectIsEmpty,
    TResult? Function(SelectIsNotEmptyFilter value)? selectIsNotEmpty,
    TResult? Function(MultiSelectContainsFilter value)? multiSelectContains,
    TResult? Function(MultiSelectDoesNotContainFilter value)?
        multiSelectDoesNotContain,
    TResult? Function(MultiSelectIsEmptyFilter value)? multiSelectIsEmpty,
    TResult? Function(MultiSelectIsNotEmptyFilter value)? multiSelectIsNotEmpty,
    TResult? Function(DateEqualsFilter value)? dateEquals,
    TResult? Function(DateBeforeFilter value)? dateBefore,
    TResult? Function(DateAfterFilter value)? dateAfter,
    TResult? Function(DateOnOrBeforeFilter value)? dateOnOrBefore,
    TResult? Function(DateOnOrAfterFilter value)? dateOnOrAfter,
    TResult? Function(DateIsEmptyFilter value)? dateIsEmpty,
    TResult? Function(DateIsNotEmptyFilter value)? dateIsNotEmpty,
    TResult? Function(DatePastWeekFilter value)? datePastWeek,
    TResult? Function(DatePastMonthFilter value)? datePastMonth,
    TResult? Function(DatePastYearFilter value)? datePastYear,
    TResult? Function(DateNextWeekFilter value)? dateNextWeek,
    TResult? Function(DateNextMonthFilter value)? dateNextMonth,
    TResult? Function(DateNextYearFilter value)? dateNextYear,
    TResult? Function(PeopleContainsFilter value)? peopleContains,
    TResult? Function(PeopleDoesNotContainFilter value)? peopleDoesNotContain,
    TResult? Function(PeopleIsEmptyFilter value)? peopleIsEmpty,
    TResult? Function(PeopleIsNotEmptyFilter value)? peopleIsNotEmpty,
    TResult? Function(FilesIsEmptyFilter value)? filesIsEmpty,
    TResult? Function(FilesIsNotEmptyFilter value)? filesIsNotEmpty,
    TResult? Function(RelationContainsFilter value)? relationContains,
    TResult? Function(RelationDoesNotContainFilter value)?
        relationDoesNotContain,
    TResult? Function(RelationIsEmptyFilter value)? relationIsEmpty,
    TResult? Function(RelationIsNotEmptyFilter value)? relationIsNotEmpty,
  }) {
    return relationDoesNotContain?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(TextEqualsFilter value)? textEquals,
    TResult Function(TextDoesNotEqualFilter value)? textDoesNotEqual,
    TResult Function(TextContainsFilter value)? textContains,
    TResult Function(TextDoesNotContainFilter value)? textDoesNotContain,
    TResult Function(TextStartsWithFilter value)? textStartsWith,
    TResult Function(TextEndsWithFilter value)? textEndsWith,
    TResult Function(TextIsEmptyFilter value)? textIsEmpty,
    TResult Function(TextIsNotEmptyFilter value)? textIsNotEmpty,
    TResult Function(NumberEqualsFilter value)? numberEquals,
    TResult Function(NumberDoesNotEqualFilter value)? numberDoesNotEqual,
    TResult Function(NumberGreaterThanFilter value)? numberGreaterThan,
    TResult Function(NumberLessThanFilter value)? numberLessThan,
    TResult Function(NumberGreaterThanOrEqualFilter value)?
        numberGreaterThanOrEqual,
    TResult Function(NumberLessThanOrEqualFilter value)? numberLessThanOrEqual,
    TResult Function(NumberIsEmptyFilter value)? numberIsEmpty,
    TResult Function(NumberIsNotEmptyFilter value)? numberIsNotEmpty,
    TResult Function(CheckboxEqualsFilter value)? checkboxEquals,
    TResult Function(SelectEqualsFilter value)? selectEquals,
    TResult Function(SelectDoesNotEqualFilter value)? selectDoesNotEqual,
    TResult Function(SelectIsEmptyFilter value)? selectIsEmpty,
    TResult Function(SelectIsNotEmptyFilter value)? selectIsNotEmpty,
    TResult Function(MultiSelectContainsFilter value)? multiSelectContains,
    TResult Function(MultiSelectDoesNotContainFilter value)?
        multiSelectDoesNotContain,
    TResult Function(MultiSelectIsEmptyFilter value)? multiSelectIsEmpty,
    TResult Function(MultiSelectIsNotEmptyFilter value)? multiSelectIsNotEmpty,
    TResult Function(DateEqualsFilter value)? dateEquals,
    TResult Function(DateBeforeFilter value)? dateBefore,
    TResult Function(DateAfterFilter value)? dateAfter,
    TResult Function(DateOnOrBeforeFilter value)? dateOnOrBefore,
    TResult Function(DateOnOrAfterFilter value)? dateOnOrAfter,
    TResult Function(DateIsEmptyFilter value)? dateIsEmpty,
    TResult Function(DateIsNotEmptyFilter value)? dateIsNotEmpty,
    TResult Function(DatePastWeekFilter value)? datePastWeek,
    TResult Function(DatePastMonthFilter value)? datePastMonth,
    TResult Function(DatePastYearFilter value)? datePastYear,
    TResult Function(DateNextWeekFilter value)? dateNextWeek,
    TResult Function(DateNextMonthFilter value)? dateNextMonth,
    TResult Function(DateNextYearFilter value)? dateNextYear,
    TResult Function(PeopleContainsFilter value)? peopleContains,
    TResult Function(PeopleDoesNotContainFilter value)? peopleDoesNotContain,
    TResult Function(PeopleIsEmptyFilter value)? peopleIsEmpty,
    TResult Function(PeopleIsNotEmptyFilter value)? peopleIsNotEmpty,
    TResult Function(FilesIsEmptyFilter value)? filesIsEmpty,
    TResult Function(FilesIsNotEmptyFilter value)? filesIsNotEmpty,
    TResult Function(RelationContainsFilter value)? relationContains,
    TResult Function(RelationDoesNotContainFilter value)?
        relationDoesNotContain,
    TResult Function(RelationIsEmptyFilter value)? relationIsEmpty,
    TResult Function(RelationIsNotEmptyFilter value)? relationIsNotEmpty,
    required TResult orElse(),
  }) {
    if (relationDoesNotContain != null) {
      return relationDoesNotContain(this);
    }
    return orElse();
  }
}

abstract class RelationDoesNotContainFilter extends PropertyFilter {
  const factory RelationDoesNotContainFilter(final String pageId) =
      _$RelationDoesNotContainFilterImpl;
  const RelationDoesNotContainFilter._() : super._();

  String get pageId;

  /// Create a copy of PropertyFilter
  /// with the given fields replaced by the non-null parameter values.
  @JsonKey(includeFromJson: false, includeToJson: false)
  _$$RelationDoesNotContainFilterImplCopyWith<
          _$RelationDoesNotContainFilterImpl>
      get copyWith => throw _privateConstructorUsedError;
}

/// @nodoc
abstract class _$$RelationIsEmptyFilterImplCopyWith<$Res> {
  factory _$$RelationIsEmptyFilterImplCopyWith(
          _$RelationIsEmptyFilterImpl value,
          $Res Function(_$RelationIsEmptyFilterImpl) then) =
      __$$RelationIsEmptyFilterImplCopyWithImpl<$Res>;
}

/// @nodoc
class __$$RelationIsEmptyFilterImplCopyWithImpl<$Res>
    extends _$PropertyFilterCopyWithImpl<$Res, _$RelationIsEmptyFilterImpl>
    implements _$$RelationIsEmptyFilterImplCopyWith<$Res> {
  __$$RelationIsEmptyFilterImplCopyWithImpl(_$RelationIsEmptyFilterImpl _value,
      $Res Function(_$RelationIsEmptyFilterImpl) _then)
      : super(_value, _then);

  /// Create a copy of PropertyFilter
  /// with the given fields replaced by the non-null parameter values.
}

/// @nodoc

class _$RelationIsEmptyFilterImpl extends RelationIsEmptyFilter {
  const _$RelationIsEmptyFilterImpl() : super._();

  @override
  String toString() {
    return 'PropertyFilter.relationIsEmpty()';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$RelationIsEmptyFilterImpl);
  }

  @override
  int get hashCode => runtimeType.hashCode;

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function(String value) textEquals,
    required TResult Function(String value) textDoesNotEqual,
    required TResult Function(String value) textContains,
    required TResult Function(String value) textDoesNotContain,
    required TResult Function(String value) textStartsWith,
    required TResult Function(String value) textEndsWith,
    required TResult Function() textIsEmpty,
    required TResult Function() textIsNotEmpty,
    required TResult Function(double value) numberEquals,
    required TResult Function(double value) numberDoesNotEqual,
    required TResult Function(double value) numberGreaterThan,
    required TResult Function(double value) numberLessThan,
    required TResult Function(double value) numberGreaterThanOrEqual,
    required TResult Function(double value) numberLessThanOrEqual,
    required TResult Function() numberIsEmpty,
    required TResult Function() numberIsNotEmpty,
    required TResult Function(bool value) checkboxEquals,
    required TResult Function(String value) selectEquals,
    required TResult Function(String value) selectDoesNotEqual,
    required TResult Function() selectIsEmpty,
    required TResult Function() selectIsNotEmpty,
    required TResult Function(String value) multiSelectContains,
    required TResult Function(String value) multiSelectDoesNotContain,
    required TResult Function() multiSelectIsEmpty,
    required TResult Function() multiSelectIsNotEmpty,
    required TResult Function(String date) dateEquals,
    required TResult Function(String date) dateBefore,
    required TResult Function(String date) dateAfter,
    required TResult Function(String date) dateOnOrBefore,
    required TResult Function(String date) dateOnOrAfter,
    required TResult Function() dateIsEmpty,
    required TResult Function() dateIsNotEmpty,
    required TResult Function() datePastWeek,
    required TResult Function() datePastMonth,
    required TResult Function() datePastYear,
    required TResult Function() dateNextWeek,
    required TResult Function() dateNextMonth,
    required TResult Function() dateNextYear,
    required TResult Function(String userId) peopleContains,
    required TResult Function(String userId) peopleDoesNotContain,
    required TResult Function() peopleIsEmpty,
    required TResult Function() peopleIsNotEmpty,
    required TResult Function() filesIsEmpty,
    required TResult Function() filesIsNotEmpty,
    required TResult Function(String pageId) relationContains,
    required TResult Function(String pageId) relationDoesNotContain,
    required TResult Function() relationIsEmpty,
    required TResult Function() relationIsNotEmpty,
  }) {
    return relationIsEmpty();
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function(String value)? textEquals,
    TResult? Function(String value)? textDoesNotEqual,
    TResult? Function(String value)? textContains,
    TResult? Function(String value)? textDoesNotContain,
    TResult? Function(String value)? textStartsWith,
    TResult? Function(String value)? textEndsWith,
    TResult? Function()? textIsEmpty,
    TResult? Function()? textIsNotEmpty,
    TResult? Function(double value)? numberEquals,
    TResult? Function(double value)? numberDoesNotEqual,
    TResult? Function(double value)? numberGreaterThan,
    TResult? Function(double value)? numberLessThan,
    TResult? Function(double value)? numberGreaterThanOrEqual,
    TResult? Function(double value)? numberLessThanOrEqual,
    TResult? Function()? numberIsEmpty,
    TResult? Function()? numberIsNotEmpty,
    TResult? Function(bool value)? checkboxEquals,
    TResult? Function(String value)? selectEquals,
    TResult? Function(String value)? selectDoesNotEqual,
    TResult? Function()? selectIsEmpty,
    TResult? Function()? selectIsNotEmpty,
    TResult? Function(String value)? multiSelectContains,
    TResult? Function(String value)? multiSelectDoesNotContain,
    TResult? Function()? multiSelectIsEmpty,
    TResult? Function()? multiSelectIsNotEmpty,
    TResult? Function(String date)? dateEquals,
    TResult? Function(String date)? dateBefore,
    TResult? Function(String date)? dateAfter,
    TResult? Function(String date)? dateOnOrBefore,
    TResult? Function(String date)? dateOnOrAfter,
    TResult? Function()? dateIsEmpty,
    TResult? Function()? dateIsNotEmpty,
    TResult? Function()? datePastWeek,
    TResult? Function()? datePastMonth,
    TResult? Function()? datePastYear,
    TResult? Function()? dateNextWeek,
    TResult? Function()? dateNextMonth,
    TResult? Function()? dateNextYear,
    TResult? Function(String userId)? peopleContains,
    TResult? Function(String userId)? peopleDoesNotContain,
    TResult? Function()? peopleIsEmpty,
    TResult? Function()? peopleIsNotEmpty,
    TResult? Function()? filesIsEmpty,
    TResult? Function()? filesIsNotEmpty,
    TResult? Function(String pageId)? relationContains,
    TResult? Function(String pageId)? relationDoesNotContain,
    TResult? Function()? relationIsEmpty,
    TResult? Function()? relationIsNotEmpty,
  }) {
    return relationIsEmpty?.call();
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function(String value)? textEquals,
    TResult Function(String value)? textDoesNotEqual,
    TResult Function(String value)? textContains,
    TResult Function(String value)? textDoesNotContain,
    TResult Function(String value)? textStartsWith,
    TResult Function(String value)? textEndsWith,
    TResult Function()? textIsEmpty,
    TResult Function()? textIsNotEmpty,
    TResult Function(double value)? numberEquals,
    TResult Function(double value)? numberDoesNotEqual,
    TResult Function(double value)? numberGreaterThan,
    TResult Function(double value)? numberLessThan,
    TResult Function(double value)? numberGreaterThanOrEqual,
    TResult Function(double value)? numberLessThanOrEqual,
    TResult Function()? numberIsEmpty,
    TResult Function()? numberIsNotEmpty,
    TResult Function(bool value)? checkboxEquals,
    TResult Function(String value)? selectEquals,
    TResult Function(String value)? selectDoesNotEqual,
    TResult Function()? selectIsEmpty,
    TResult Function()? selectIsNotEmpty,
    TResult Function(String value)? multiSelectContains,
    TResult Function(String value)? multiSelectDoesNotContain,
    TResult Function()? multiSelectIsEmpty,
    TResult Function()? multiSelectIsNotEmpty,
    TResult Function(String date)? dateEquals,
    TResult Function(String date)? dateBefore,
    TResult Function(String date)? dateAfter,
    TResult Function(String date)? dateOnOrBefore,
    TResult Function(String date)? dateOnOrAfter,
    TResult Function()? dateIsEmpty,
    TResult Function()? dateIsNotEmpty,
    TResult Function()? datePastWeek,
    TResult Function()? datePastMonth,
    TResult Function()? datePastYear,
    TResult Function()? dateNextWeek,
    TResult Function()? dateNextMonth,
    TResult Function()? dateNextYear,
    TResult Function(String userId)? peopleContains,
    TResult Function(String userId)? peopleDoesNotContain,
    TResult Function()? peopleIsEmpty,
    TResult Function()? peopleIsNotEmpty,
    TResult Function()? filesIsEmpty,
    TResult Function()? filesIsNotEmpty,
    TResult Function(String pageId)? relationContains,
    TResult Function(String pageId)? relationDoesNotContain,
    TResult Function()? relationIsEmpty,
    TResult Function()? relationIsNotEmpty,
    required TResult orElse(),
  }) {
    if (relationIsEmpty != null) {
      return relationIsEmpty();
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(TextEqualsFilter value) textEquals,
    required TResult Function(TextDoesNotEqualFilter value) textDoesNotEqual,
    required TResult Function(TextContainsFilter value) textContains,
    required TResult Function(TextDoesNotContainFilter value)
        textDoesNotContain,
    required TResult Function(TextStartsWithFilter value) textStartsWith,
    required TResult Function(TextEndsWithFilter value) textEndsWith,
    required TResult Function(TextIsEmptyFilter value) textIsEmpty,
    required TResult Function(TextIsNotEmptyFilter value) textIsNotEmpty,
    required TResult Function(NumberEqualsFilter value) numberEquals,
    required TResult Function(NumberDoesNotEqualFilter value)
        numberDoesNotEqual,
    required TResult Function(NumberGreaterThanFilter value) numberGreaterThan,
    required TResult Function(NumberLessThanFilter value) numberLessThan,
    required TResult Function(NumberGreaterThanOrEqualFilter value)
        numberGreaterThanOrEqual,
    required TResult Function(NumberLessThanOrEqualFilter value)
        numberLessThanOrEqual,
    required TResult Function(NumberIsEmptyFilter value) numberIsEmpty,
    required TResult Function(NumberIsNotEmptyFilter value) numberIsNotEmpty,
    required TResult Function(CheckboxEqualsFilter value) checkboxEquals,
    required TResult Function(SelectEqualsFilter value) selectEquals,
    required TResult Function(SelectDoesNotEqualFilter value)
        selectDoesNotEqual,
    required TResult Function(SelectIsEmptyFilter value) selectIsEmpty,
    required TResult Function(SelectIsNotEmptyFilter value) selectIsNotEmpty,
    required TResult Function(MultiSelectContainsFilter value)
        multiSelectContains,
    required TResult Function(MultiSelectDoesNotContainFilter value)
        multiSelectDoesNotContain,
    required TResult Function(MultiSelectIsEmptyFilter value)
        multiSelectIsEmpty,
    required TResult Function(MultiSelectIsNotEmptyFilter value)
        multiSelectIsNotEmpty,
    required TResult Function(DateEqualsFilter value) dateEquals,
    required TResult Function(DateBeforeFilter value) dateBefore,
    required TResult Function(DateAfterFilter value) dateAfter,
    required TResult Function(DateOnOrBeforeFilter value) dateOnOrBefore,
    required TResult Function(DateOnOrAfterFilter value) dateOnOrAfter,
    required TResult Function(DateIsEmptyFilter value) dateIsEmpty,
    required TResult Function(DateIsNotEmptyFilter value) dateIsNotEmpty,
    required TResult Function(DatePastWeekFilter value) datePastWeek,
    required TResult Function(DatePastMonthFilter value) datePastMonth,
    required TResult Function(DatePastYearFilter value) datePastYear,
    required TResult Function(DateNextWeekFilter value) dateNextWeek,
    required TResult Function(DateNextMonthFilter value) dateNextMonth,
    required TResult Function(DateNextYearFilter value) dateNextYear,
    required TResult Function(PeopleContainsFilter value) peopleContains,
    required TResult Function(PeopleDoesNotContainFilter value)
        peopleDoesNotContain,
    required TResult Function(PeopleIsEmptyFilter value) peopleIsEmpty,
    required TResult Function(PeopleIsNotEmptyFilter value) peopleIsNotEmpty,
    required TResult Function(FilesIsEmptyFilter value) filesIsEmpty,
    required TResult Function(FilesIsNotEmptyFilter value) filesIsNotEmpty,
    required TResult Function(RelationContainsFilter value) relationContains,
    required TResult Function(RelationDoesNotContainFilter value)
        relationDoesNotContain,
    required TResult Function(RelationIsEmptyFilter value) relationIsEmpty,
    required TResult Function(RelationIsNotEmptyFilter value)
        relationIsNotEmpty,
  }) {
    return relationIsEmpty(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(TextEqualsFilter value)? textEquals,
    TResult? Function(TextDoesNotEqualFilter value)? textDoesNotEqual,
    TResult? Function(TextContainsFilter value)? textContains,
    TResult? Function(TextDoesNotContainFilter value)? textDoesNotContain,
    TResult? Function(TextStartsWithFilter value)? textStartsWith,
    TResult? Function(TextEndsWithFilter value)? textEndsWith,
    TResult? Function(TextIsEmptyFilter value)? textIsEmpty,
    TResult? Function(TextIsNotEmptyFilter value)? textIsNotEmpty,
    TResult? Function(NumberEqualsFilter value)? numberEquals,
    TResult? Function(NumberDoesNotEqualFilter value)? numberDoesNotEqual,
    TResult? Function(NumberGreaterThanFilter value)? numberGreaterThan,
    TResult? Function(NumberLessThanFilter value)? numberLessThan,
    TResult? Function(NumberGreaterThanOrEqualFilter value)?
        numberGreaterThanOrEqual,
    TResult? Function(NumberLessThanOrEqualFilter value)? numberLessThanOrEqual,
    TResult? Function(NumberIsEmptyFilter value)? numberIsEmpty,
    TResult? Function(NumberIsNotEmptyFilter value)? numberIsNotEmpty,
    TResult? Function(CheckboxEqualsFilter value)? checkboxEquals,
    TResult? Function(SelectEqualsFilter value)? selectEquals,
    TResult? Function(SelectDoesNotEqualFilter value)? selectDoesNotEqual,
    TResult? Function(SelectIsEmptyFilter value)? selectIsEmpty,
    TResult? Function(SelectIsNotEmptyFilter value)? selectIsNotEmpty,
    TResult? Function(MultiSelectContainsFilter value)? multiSelectContains,
    TResult? Function(MultiSelectDoesNotContainFilter value)?
        multiSelectDoesNotContain,
    TResult? Function(MultiSelectIsEmptyFilter value)? multiSelectIsEmpty,
    TResult? Function(MultiSelectIsNotEmptyFilter value)? multiSelectIsNotEmpty,
    TResult? Function(DateEqualsFilter value)? dateEquals,
    TResult? Function(DateBeforeFilter value)? dateBefore,
    TResult? Function(DateAfterFilter value)? dateAfter,
    TResult? Function(DateOnOrBeforeFilter value)? dateOnOrBefore,
    TResult? Function(DateOnOrAfterFilter value)? dateOnOrAfter,
    TResult? Function(DateIsEmptyFilter value)? dateIsEmpty,
    TResult? Function(DateIsNotEmptyFilter value)? dateIsNotEmpty,
    TResult? Function(DatePastWeekFilter value)? datePastWeek,
    TResult? Function(DatePastMonthFilter value)? datePastMonth,
    TResult? Function(DatePastYearFilter value)? datePastYear,
    TResult? Function(DateNextWeekFilter value)? dateNextWeek,
    TResult? Function(DateNextMonthFilter value)? dateNextMonth,
    TResult? Function(DateNextYearFilter value)? dateNextYear,
    TResult? Function(PeopleContainsFilter value)? peopleContains,
    TResult? Function(PeopleDoesNotContainFilter value)? peopleDoesNotContain,
    TResult? Function(PeopleIsEmptyFilter value)? peopleIsEmpty,
    TResult? Function(PeopleIsNotEmptyFilter value)? peopleIsNotEmpty,
    TResult? Function(FilesIsEmptyFilter value)? filesIsEmpty,
    TResult? Function(FilesIsNotEmptyFilter value)? filesIsNotEmpty,
    TResult? Function(RelationContainsFilter value)? relationContains,
    TResult? Function(RelationDoesNotContainFilter value)?
        relationDoesNotContain,
    TResult? Function(RelationIsEmptyFilter value)? relationIsEmpty,
    TResult? Function(RelationIsNotEmptyFilter value)? relationIsNotEmpty,
  }) {
    return relationIsEmpty?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(TextEqualsFilter value)? textEquals,
    TResult Function(TextDoesNotEqualFilter value)? textDoesNotEqual,
    TResult Function(TextContainsFilter value)? textContains,
    TResult Function(TextDoesNotContainFilter value)? textDoesNotContain,
    TResult Function(TextStartsWithFilter value)? textStartsWith,
    TResult Function(TextEndsWithFilter value)? textEndsWith,
    TResult Function(TextIsEmptyFilter value)? textIsEmpty,
    TResult Function(TextIsNotEmptyFilter value)? textIsNotEmpty,
    TResult Function(NumberEqualsFilter value)? numberEquals,
    TResult Function(NumberDoesNotEqualFilter value)? numberDoesNotEqual,
    TResult Function(NumberGreaterThanFilter value)? numberGreaterThan,
    TResult Function(NumberLessThanFilter value)? numberLessThan,
    TResult Function(NumberGreaterThanOrEqualFilter value)?
        numberGreaterThanOrEqual,
    TResult Function(NumberLessThanOrEqualFilter value)? numberLessThanOrEqual,
    TResult Function(NumberIsEmptyFilter value)? numberIsEmpty,
    TResult Function(NumberIsNotEmptyFilter value)? numberIsNotEmpty,
    TResult Function(CheckboxEqualsFilter value)? checkboxEquals,
    TResult Function(SelectEqualsFilter value)? selectEquals,
    TResult Function(SelectDoesNotEqualFilter value)? selectDoesNotEqual,
    TResult Function(SelectIsEmptyFilter value)? selectIsEmpty,
    TResult Function(SelectIsNotEmptyFilter value)? selectIsNotEmpty,
    TResult Function(MultiSelectContainsFilter value)? multiSelectContains,
    TResult Function(MultiSelectDoesNotContainFilter value)?
        multiSelectDoesNotContain,
    TResult Function(MultiSelectIsEmptyFilter value)? multiSelectIsEmpty,
    TResult Function(MultiSelectIsNotEmptyFilter value)? multiSelectIsNotEmpty,
    TResult Function(DateEqualsFilter value)? dateEquals,
    TResult Function(DateBeforeFilter value)? dateBefore,
    TResult Function(DateAfterFilter value)? dateAfter,
    TResult Function(DateOnOrBeforeFilter value)? dateOnOrBefore,
    TResult Function(DateOnOrAfterFilter value)? dateOnOrAfter,
    TResult Function(DateIsEmptyFilter value)? dateIsEmpty,
    TResult Function(DateIsNotEmptyFilter value)? dateIsNotEmpty,
    TResult Function(DatePastWeekFilter value)? datePastWeek,
    TResult Function(DatePastMonthFilter value)? datePastMonth,
    TResult Function(DatePastYearFilter value)? datePastYear,
    TResult Function(DateNextWeekFilter value)? dateNextWeek,
    TResult Function(DateNextMonthFilter value)? dateNextMonth,
    TResult Function(DateNextYearFilter value)? dateNextYear,
    TResult Function(PeopleContainsFilter value)? peopleContains,
    TResult Function(PeopleDoesNotContainFilter value)? peopleDoesNotContain,
    TResult Function(PeopleIsEmptyFilter value)? peopleIsEmpty,
    TResult Function(PeopleIsNotEmptyFilter value)? peopleIsNotEmpty,
    TResult Function(FilesIsEmptyFilter value)? filesIsEmpty,
    TResult Function(FilesIsNotEmptyFilter value)? filesIsNotEmpty,
    TResult Function(RelationContainsFilter value)? relationContains,
    TResult Function(RelationDoesNotContainFilter value)?
        relationDoesNotContain,
    TResult Function(RelationIsEmptyFilter value)? relationIsEmpty,
    TResult Function(RelationIsNotEmptyFilter value)? relationIsNotEmpty,
    required TResult orElse(),
  }) {
    if (relationIsEmpty != null) {
      return relationIsEmpty(this);
    }
    return orElse();
  }
}

abstract class RelationIsEmptyFilter extends PropertyFilter {
  const factory RelationIsEmptyFilter() = _$RelationIsEmptyFilterImpl;
  const RelationIsEmptyFilter._() : super._();
}

/// @nodoc
abstract class _$$RelationIsNotEmptyFilterImplCopyWith<$Res> {
  factory _$$RelationIsNotEmptyFilterImplCopyWith(
          _$RelationIsNotEmptyFilterImpl value,
          $Res Function(_$RelationIsNotEmptyFilterImpl) then) =
      __$$RelationIsNotEmptyFilterImplCopyWithImpl<$Res>;
}

/// @nodoc
class __$$RelationIsNotEmptyFilterImplCopyWithImpl<$Res>
    extends _$PropertyFilterCopyWithImpl<$Res, _$RelationIsNotEmptyFilterImpl>
    implements _$$RelationIsNotEmptyFilterImplCopyWith<$Res> {
  __$$RelationIsNotEmptyFilterImplCopyWithImpl(
      _$RelationIsNotEmptyFilterImpl _value,
      $Res Function(_$RelationIsNotEmptyFilterImpl) _then)
      : super(_value, _then);

  /// Create a copy of PropertyFilter
  /// with the given fields replaced by the non-null parameter values.
}

/// @nodoc

class _$RelationIsNotEmptyFilterImpl extends RelationIsNotEmptyFilter {
  const _$RelationIsNotEmptyFilterImpl() : super._();

  @override
  String toString() {
    return 'PropertyFilter.relationIsNotEmpty()';
  }

  @override
  bool operator ==(Object other) {
    return identical(this, other) ||
        (other.runtimeType == runtimeType &&
            other is _$RelationIsNotEmptyFilterImpl);
  }

  @override
  int get hashCode => runtimeType.hashCode;

  @override
  @optionalTypeArgs
  TResult when<TResult extends Object?>({
    required TResult Function(String value) textEquals,
    required TResult Function(String value) textDoesNotEqual,
    required TResult Function(String value) textContains,
    required TResult Function(String value) textDoesNotContain,
    required TResult Function(String value) textStartsWith,
    required TResult Function(String value) textEndsWith,
    required TResult Function() textIsEmpty,
    required TResult Function() textIsNotEmpty,
    required TResult Function(double value) numberEquals,
    required TResult Function(double value) numberDoesNotEqual,
    required TResult Function(double value) numberGreaterThan,
    required TResult Function(double value) numberLessThan,
    required TResult Function(double value) numberGreaterThanOrEqual,
    required TResult Function(double value) numberLessThanOrEqual,
    required TResult Function() numberIsEmpty,
    required TResult Function() numberIsNotEmpty,
    required TResult Function(bool value) checkboxEquals,
    required TResult Function(String value) selectEquals,
    required TResult Function(String value) selectDoesNotEqual,
    required TResult Function() selectIsEmpty,
    required TResult Function() selectIsNotEmpty,
    required TResult Function(String value) multiSelectContains,
    required TResult Function(String value) multiSelectDoesNotContain,
    required TResult Function() multiSelectIsEmpty,
    required TResult Function() multiSelectIsNotEmpty,
    required TResult Function(String date) dateEquals,
    required TResult Function(String date) dateBefore,
    required TResult Function(String date) dateAfter,
    required TResult Function(String date) dateOnOrBefore,
    required TResult Function(String date) dateOnOrAfter,
    required TResult Function() dateIsEmpty,
    required TResult Function() dateIsNotEmpty,
    required TResult Function() datePastWeek,
    required TResult Function() datePastMonth,
    required TResult Function() datePastYear,
    required TResult Function() dateNextWeek,
    required TResult Function() dateNextMonth,
    required TResult Function() dateNextYear,
    required TResult Function(String userId) peopleContains,
    required TResult Function(String userId) peopleDoesNotContain,
    required TResult Function() peopleIsEmpty,
    required TResult Function() peopleIsNotEmpty,
    required TResult Function() filesIsEmpty,
    required TResult Function() filesIsNotEmpty,
    required TResult Function(String pageId) relationContains,
    required TResult Function(String pageId) relationDoesNotContain,
    required TResult Function() relationIsEmpty,
    required TResult Function() relationIsNotEmpty,
  }) {
    return relationIsNotEmpty();
  }

  @override
  @optionalTypeArgs
  TResult? whenOrNull<TResult extends Object?>({
    TResult? Function(String value)? textEquals,
    TResult? Function(String value)? textDoesNotEqual,
    TResult? Function(String value)? textContains,
    TResult? Function(String value)? textDoesNotContain,
    TResult? Function(String value)? textStartsWith,
    TResult? Function(String value)? textEndsWith,
    TResult? Function()? textIsEmpty,
    TResult? Function()? textIsNotEmpty,
    TResult? Function(double value)? numberEquals,
    TResult? Function(double value)? numberDoesNotEqual,
    TResult? Function(double value)? numberGreaterThan,
    TResult? Function(double value)? numberLessThan,
    TResult? Function(double value)? numberGreaterThanOrEqual,
    TResult? Function(double value)? numberLessThanOrEqual,
    TResult? Function()? numberIsEmpty,
    TResult? Function()? numberIsNotEmpty,
    TResult? Function(bool value)? checkboxEquals,
    TResult? Function(String value)? selectEquals,
    TResult? Function(String value)? selectDoesNotEqual,
    TResult? Function()? selectIsEmpty,
    TResult? Function()? selectIsNotEmpty,
    TResult? Function(String value)? multiSelectContains,
    TResult? Function(String value)? multiSelectDoesNotContain,
    TResult? Function()? multiSelectIsEmpty,
    TResult? Function()? multiSelectIsNotEmpty,
    TResult? Function(String date)? dateEquals,
    TResult? Function(String date)? dateBefore,
    TResult? Function(String date)? dateAfter,
    TResult? Function(String date)? dateOnOrBefore,
    TResult? Function(String date)? dateOnOrAfter,
    TResult? Function()? dateIsEmpty,
    TResult? Function()? dateIsNotEmpty,
    TResult? Function()? datePastWeek,
    TResult? Function()? datePastMonth,
    TResult? Function()? datePastYear,
    TResult? Function()? dateNextWeek,
    TResult? Function()? dateNextMonth,
    TResult? Function()? dateNextYear,
    TResult? Function(String userId)? peopleContains,
    TResult? Function(String userId)? peopleDoesNotContain,
    TResult? Function()? peopleIsEmpty,
    TResult? Function()? peopleIsNotEmpty,
    TResult? Function()? filesIsEmpty,
    TResult? Function()? filesIsNotEmpty,
    TResult? Function(String pageId)? relationContains,
    TResult? Function(String pageId)? relationDoesNotContain,
    TResult? Function()? relationIsEmpty,
    TResult? Function()? relationIsNotEmpty,
  }) {
    return relationIsNotEmpty?.call();
  }

  @override
  @optionalTypeArgs
  TResult maybeWhen<TResult extends Object?>({
    TResult Function(String value)? textEquals,
    TResult Function(String value)? textDoesNotEqual,
    TResult Function(String value)? textContains,
    TResult Function(String value)? textDoesNotContain,
    TResult Function(String value)? textStartsWith,
    TResult Function(String value)? textEndsWith,
    TResult Function()? textIsEmpty,
    TResult Function()? textIsNotEmpty,
    TResult Function(double value)? numberEquals,
    TResult Function(double value)? numberDoesNotEqual,
    TResult Function(double value)? numberGreaterThan,
    TResult Function(double value)? numberLessThan,
    TResult Function(double value)? numberGreaterThanOrEqual,
    TResult Function(double value)? numberLessThanOrEqual,
    TResult Function()? numberIsEmpty,
    TResult Function()? numberIsNotEmpty,
    TResult Function(bool value)? checkboxEquals,
    TResult Function(String value)? selectEquals,
    TResult Function(String value)? selectDoesNotEqual,
    TResult Function()? selectIsEmpty,
    TResult Function()? selectIsNotEmpty,
    TResult Function(String value)? multiSelectContains,
    TResult Function(String value)? multiSelectDoesNotContain,
    TResult Function()? multiSelectIsEmpty,
    TResult Function()? multiSelectIsNotEmpty,
    TResult Function(String date)? dateEquals,
    TResult Function(String date)? dateBefore,
    TResult Function(String date)? dateAfter,
    TResult Function(String date)? dateOnOrBefore,
    TResult Function(String date)? dateOnOrAfter,
    TResult Function()? dateIsEmpty,
    TResult Function()? dateIsNotEmpty,
    TResult Function()? datePastWeek,
    TResult Function()? datePastMonth,
    TResult Function()? datePastYear,
    TResult Function()? dateNextWeek,
    TResult Function()? dateNextMonth,
    TResult Function()? dateNextYear,
    TResult Function(String userId)? peopleContains,
    TResult Function(String userId)? peopleDoesNotContain,
    TResult Function()? peopleIsEmpty,
    TResult Function()? peopleIsNotEmpty,
    TResult Function()? filesIsEmpty,
    TResult Function()? filesIsNotEmpty,
    TResult Function(String pageId)? relationContains,
    TResult Function(String pageId)? relationDoesNotContain,
    TResult Function()? relationIsEmpty,
    TResult Function()? relationIsNotEmpty,
    required TResult orElse(),
  }) {
    if (relationIsNotEmpty != null) {
      return relationIsNotEmpty();
    }
    return orElse();
  }

  @override
  @optionalTypeArgs
  TResult map<TResult extends Object?>({
    required TResult Function(TextEqualsFilter value) textEquals,
    required TResult Function(TextDoesNotEqualFilter value) textDoesNotEqual,
    required TResult Function(TextContainsFilter value) textContains,
    required TResult Function(TextDoesNotContainFilter value)
        textDoesNotContain,
    required TResult Function(TextStartsWithFilter value) textStartsWith,
    required TResult Function(TextEndsWithFilter value) textEndsWith,
    required TResult Function(TextIsEmptyFilter value) textIsEmpty,
    required TResult Function(TextIsNotEmptyFilter value) textIsNotEmpty,
    required TResult Function(NumberEqualsFilter value) numberEquals,
    required TResult Function(NumberDoesNotEqualFilter value)
        numberDoesNotEqual,
    required TResult Function(NumberGreaterThanFilter value) numberGreaterThan,
    required TResult Function(NumberLessThanFilter value) numberLessThan,
    required TResult Function(NumberGreaterThanOrEqualFilter value)
        numberGreaterThanOrEqual,
    required TResult Function(NumberLessThanOrEqualFilter value)
        numberLessThanOrEqual,
    required TResult Function(NumberIsEmptyFilter value) numberIsEmpty,
    required TResult Function(NumberIsNotEmptyFilter value) numberIsNotEmpty,
    required TResult Function(CheckboxEqualsFilter value) checkboxEquals,
    required TResult Function(SelectEqualsFilter value) selectEquals,
    required TResult Function(SelectDoesNotEqualFilter value)
        selectDoesNotEqual,
    required TResult Function(SelectIsEmptyFilter value) selectIsEmpty,
    required TResult Function(SelectIsNotEmptyFilter value) selectIsNotEmpty,
    required TResult Function(MultiSelectContainsFilter value)
        multiSelectContains,
    required TResult Function(MultiSelectDoesNotContainFilter value)
        multiSelectDoesNotContain,
    required TResult Function(MultiSelectIsEmptyFilter value)
        multiSelectIsEmpty,
    required TResult Function(MultiSelectIsNotEmptyFilter value)
        multiSelectIsNotEmpty,
    required TResult Function(DateEqualsFilter value) dateEquals,
    required TResult Function(DateBeforeFilter value) dateBefore,
    required TResult Function(DateAfterFilter value) dateAfter,
    required TResult Function(DateOnOrBeforeFilter value) dateOnOrBefore,
    required TResult Function(DateOnOrAfterFilter value) dateOnOrAfter,
    required TResult Function(DateIsEmptyFilter value) dateIsEmpty,
    required TResult Function(DateIsNotEmptyFilter value) dateIsNotEmpty,
    required TResult Function(DatePastWeekFilter value) datePastWeek,
    required TResult Function(DatePastMonthFilter value) datePastMonth,
    required TResult Function(DatePastYearFilter value) datePastYear,
    required TResult Function(DateNextWeekFilter value) dateNextWeek,
    required TResult Function(DateNextMonthFilter value) dateNextMonth,
    required TResult Function(DateNextYearFilter value) dateNextYear,
    required TResult Function(PeopleContainsFilter value) peopleContains,
    required TResult Function(PeopleDoesNotContainFilter value)
        peopleDoesNotContain,
    required TResult Function(PeopleIsEmptyFilter value) peopleIsEmpty,
    required TResult Function(PeopleIsNotEmptyFilter value) peopleIsNotEmpty,
    required TResult Function(FilesIsEmptyFilter value) filesIsEmpty,
    required TResult Function(FilesIsNotEmptyFilter value) filesIsNotEmpty,
    required TResult Function(RelationContainsFilter value) relationContains,
    required TResult Function(RelationDoesNotContainFilter value)
        relationDoesNotContain,
    required TResult Function(RelationIsEmptyFilter value) relationIsEmpty,
    required TResult Function(RelationIsNotEmptyFilter value)
        relationIsNotEmpty,
  }) {
    return relationIsNotEmpty(this);
  }

  @override
  @optionalTypeArgs
  TResult? mapOrNull<TResult extends Object?>({
    TResult? Function(TextEqualsFilter value)? textEquals,
    TResult? Function(TextDoesNotEqualFilter value)? textDoesNotEqual,
    TResult? Function(TextContainsFilter value)? textContains,
    TResult? Function(TextDoesNotContainFilter value)? textDoesNotContain,
    TResult? Function(TextStartsWithFilter value)? textStartsWith,
    TResult? Function(TextEndsWithFilter value)? textEndsWith,
    TResult? Function(TextIsEmptyFilter value)? textIsEmpty,
    TResult? Function(TextIsNotEmptyFilter value)? textIsNotEmpty,
    TResult? Function(NumberEqualsFilter value)? numberEquals,
    TResult? Function(NumberDoesNotEqualFilter value)? numberDoesNotEqual,
    TResult? Function(NumberGreaterThanFilter value)? numberGreaterThan,
    TResult? Function(NumberLessThanFilter value)? numberLessThan,
    TResult? Function(NumberGreaterThanOrEqualFilter value)?
        numberGreaterThanOrEqual,
    TResult? Function(NumberLessThanOrEqualFilter value)? numberLessThanOrEqual,
    TResult? Function(NumberIsEmptyFilter value)? numberIsEmpty,
    TResult? Function(NumberIsNotEmptyFilter value)? numberIsNotEmpty,
    TResult? Function(CheckboxEqualsFilter value)? checkboxEquals,
    TResult? Function(SelectEqualsFilter value)? selectEquals,
    TResult? Function(SelectDoesNotEqualFilter value)? selectDoesNotEqual,
    TResult? Function(SelectIsEmptyFilter value)? selectIsEmpty,
    TResult? Function(SelectIsNotEmptyFilter value)? selectIsNotEmpty,
    TResult? Function(MultiSelectContainsFilter value)? multiSelectContains,
    TResult? Function(MultiSelectDoesNotContainFilter value)?
        multiSelectDoesNotContain,
    TResult? Function(MultiSelectIsEmptyFilter value)? multiSelectIsEmpty,
    TResult? Function(MultiSelectIsNotEmptyFilter value)? multiSelectIsNotEmpty,
    TResult? Function(DateEqualsFilter value)? dateEquals,
    TResult? Function(DateBeforeFilter value)? dateBefore,
    TResult? Function(DateAfterFilter value)? dateAfter,
    TResult? Function(DateOnOrBeforeFilter value)? dateOnOrBefore,
    TResult? Function(DateOnOrAfterFilter value)? dateOnOrAfter,
    TResult? Function(DateIsEmptyFilter value)? dateIsEmpty,
    TResult? Function(DateIsNotEmptyFilter value)? dateIsNotEmpty,
    TResult? Function(DatePastWeekFilter value)? datePastWeek,
    TResult? Function(DatePastMonthFilter value)? datePastMonth,
    TResult? Function(DatePastYearFilter value)? datePastYear,
    TResult? Function(DateNextWeekFilter value)? dateNextWeek,
    TResult? Function(DateNextMonthFilter value)? dateNextMonth,
    TResult? Function(DateNextYearFilter value)? dateNextYear,
    TResult? Function(PeopleContainsFilter value)? peopleContains,
    TResult? Function(PeopleDoesNotContainFilter value)? peopleDoesNotContain,
    TResult? Function(PeopleIsEmptyFilter value)? peopleIsEmpty,
    TResult? Function(PeopleIsNotEmptyFilter value)? peopleIsNotEmpty,
    TResult? Function(FilesIsEmptyFilter value)? filesIsEmpty,
    TResult? Function(FilesIsNotEmptyFilter value)? filesIsNotEmpty,
    TResult? Function(RelationContainsFilter value)? relationContains,
    TResult? Function(RelationDoesNotContainFilter value)?
        relationDoesNotContain,
    TResult? Function(RelationIsEmptyFilter value)? relationIsEmpty,
    TResult? Function(RelationIsNotEmptyFilter value)? relationIsNotEmpty,
  }) {
    return relationIsNotEmpty?.call(this);
  }

  @override
  @optionalTypeArgs
  TResult maybeMap<TResult extends Object?>({
    TResult Function(TextEqualsFilter value)? textEquals,
    TResult Function(TextDoesNotEqualFilter value)? textDoesNotEqual,
    TResult Function(TextContainsFilter value)? textContains,
    TResult Function(TextDoesNotContainFilter value)? textDoesNotContain,
    TResult Function(TextStartsWithFilter value)? textStartsWith,
    TResult Function(TextEndsWithFilter value)? textEndsWith,
    TResult Function(TextIsEmptyFilter value)? textIsEmpty,
    TResult Function(TextIsNotEmptyFilter value)? textIsNotEmpty,
    TResult Function(NumberEqualsFilter value)? numberEquals,
    TResult Function(NumberDoesNotEqualFilter value)? numberDoesNotEqual,
    TResult Function(NumberGreaterThanFilter value)? numberGreaterThan,
    TResult Function(NumberLessThanFilter value)? numberLessThan,
    TResult Function(NumberGreaterThanOrEqualFilter value)?
        numberGreaterThanOrEqual,
    TResult Function(NumberLessThanOrEqualFilter value)? numberLessThanOrEqual,
    TResult Function(NumberIsEmptyFilter value)? numberIsEmpty,
    TResult Function(NumberIsNotEmptyFilter value)? numberIsNotEmpty,
    TResult Function(CheckboxEqualsFilter value)? checkboxEquals,
    TResult Function(SelectEqualsFilter value)? selectEquals,
    TResult Function(SelectDoesNotEqualFilter value)? selectDoesNotEqual,
    TResult Function(SelectIsEmptyFilter value)? selectIsEmpty,
    TResult Function(SelectIsNotEmptyFilter value)? selectIsNotEmpty,
    TResult Function(MultiSelectContainsFilter value)? multiSelectContains,
    TResult Function(MultiSelectDoesNotContainFilter value)?
        multiSelectDoesNotContain,
    TResult Function(MultiSelectIsEmptyFilter value)? multiSelectIsEmpty,
    TResult Function(MultiSelectIsNotEmptyFilter value)? multiSelectIsNotEmpty,
    TResult Function(DateEqualsFilter value)? dateEquals,
    TResult Function(DateBeforeFilter value)? dateBefore,
    TResult Function(DateAfterFilter value)? dateAfter,
    TResult Function(DateOnOrBeforeFilter value)? dateOnOrBefore,
    TResult Function(DateOnOrAfterFilter value)? dateOnOrAfter,
    TResult Function(DateIsEmptyFilter value)? dateIsEmpty,
    TResult Function(DateIsNotEmptyFilter value)? dateIsNotEmpty,
    TResult Function(DatePastWeekFilter value)? datePastWeek,
    TResult Function(DatePastMonthFilter value)? datePastMonth,
    TResult Function(DatePastYearFilter value)? datePastYear,
    TResult Function(DateNextWeekFilter value)? dateNextWeek,
    TResult Function(DateNextMonthFilter value)? dateNextMonth,
    TResult Function(DateNextYearFilter value)? dateNextYear,
    TResult Function(PeopleContainsFilter value)? peopleContains,
    TResult Function(PeopleDoesNotContainFilter value)? peopleDoesNotContain,
    TResult Function(PeopleIsEmptyFilter value)? peopleIsEmpty,
    TResult Function(PeopleIsNotEmptyFilter value)? peopleIsNotEmpty,
    TResult Function(FilesIsEmptyFilter value)? filesIsEmpty,
    TResult Function(FilesIsNotEmptyFilter value)? filesIsNotEmpty,
    TResult Function(RelationContainsFilter value)? relationContains,
    TResult Function(RelationDoesNotContainFilter value)?
        relationDoesNotContain,
    TResult Function(RelationIsEmptyFilter value)? relationIsEmpty,
    TResult Function(RelationIsNotEmptyFilter value)? relationIsNotEmpty,
    required TResult orElse(),
  }) {
    if (relationIsNotEmpty != null) {
      return relationIsNotEmpty(this);
    }
    return orElse();
  }
}

abstract class RelationIsNotEmptyFilter extends PropertyFilter {
  const factory RelationIsNotEmptyFilter() = _$RelationIsNotEmptyFilterImpl;
  const RelationIsNotEmptyFilter._() : super._();
}
